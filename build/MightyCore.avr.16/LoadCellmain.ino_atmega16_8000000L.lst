
C:\Users\Hosein\AppData\Local\Temp\arduino\sketches\549FA1F68B6C23906776D787748B3AF1/LoadCellmain.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__ctors_end>
       4:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <__vector_1>
       8:	0c 94 0f 07 	jmp	0xe1e	; 0xe1e <__vector_2>
       c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      24:	0c 94 c5 06 	jmp	0xd8a	; 0xd8a <__vector_9>
      28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      2c:	0c 94 83 07 	jmp	0xf06	; 0xf06 <__vector_11>
      30:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__vector_12>
      34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      40:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      44:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <HT1621::print(long, char const*, int) [clone .constprop.38]+0x1a>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__trampolines_end>:
__trampolines_start():
      d6:	00 00       	nop
      d8:	3a 00       	.word	0x003a	; ????
      da:	37 00       	.word	0x0037	; ????
      dc:	34 00       	.word	0x0034	; ????
      de:	31 00       	.word	0x0031	; ????

000000e0 <port_to_output_PGM>:
      e0:	00 00 3b 00 38 00 35 00 32 00                       ..;.8.5.2.

000000ea <port_to_input_PGM>:
      ea:	00 00 39 00 36 00 33 00 30 00                       ..9.6.3.0.

000000f4 <digital_pin_to_port_PGM>:
      f4:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
     104:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

00000114 <digital_pin_to_bit_mask_PGM>:
     114:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
     124:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.

00000134 <digital_pin_to_timer_PGM>:
     134:	00 00 00 02 00 00 00 00 00 00 00 00 05 04 00 07     ................
	...

00000154 <__ctors_start>:
__ctors_start():
     154:	b5 07       	cpc	r27, r21

00000156 <__ctors_end>:
__dtors_end():
     156:	11 24       	eor	r1, r1
     158:	1f be       	out	0x3f, r1	; 63
     15a:	cf e5       	ldi	r28, 0x5F	; 95
     15c:	d4 e0       	ldi	r29, 0x04	; 4
     15e:	de bf       	out	0x3e, r29	; 62
     160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     162:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     164:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     166:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     168:	ec e2       	ldi	r30, 0x2C	; 44
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     16a:	f5 e2       	ldi	r31, 0x25	; 37
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     16e:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     170:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     172:	a6 3b       	cpi	r26, 0xB6	; 182
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     174:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0xc>

00000178 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     178:	22 e0       	ldi	r18, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     17a:	a6 eb       	ldi	r26, 0xB6	; 182
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     17c:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     182:	a9 39       	cpi	r26, 0x99	; 153
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     184:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>

00000188 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     188:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     18a:	cb ea       	ldi	r28, 0xAB	; 171
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     18c:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     18e:	04 c0       	rjmp	.+8      	; 0x198 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     190:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     192:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     194:	0e 94 39 11 	call	0x2272	; 0x2272 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     198:	ca 3a       	cpi	r28, 0xAA	; 170
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     19a:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     19c:	c9 f7       	brne	.-14     	; 0x190 <__do_global_ctors+0x8>
     19e:	0e 94 fb 07 	call	0xff6	; 0xff6 <main>
     1a2:	0c 94 94 12 	jmp	0x2528	; 0x2528 <_exit>

000001a6 <__bad_interrupt>:
__bad_interrupt():
     1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <delayMicroseconds.constprop.50>:
delayMicroseconds():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:761
              // 2 cycles to jump back to delay cycle.
  }

#elif F_CPU >= 8000000L
  // for the 8 MHz clock
  __asm__ __volatile__ (
     1aa:	00 00       	nop
     1ac:	00 00       	nop
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
     1ae:	83 e0       	ldi	r24, 0x03	; 3
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	01 97       	sbiw	r24, 0x01	; 1
     1b4:	f1 f7       	brne	.-4      	; 0x1b2 <delayMicroseconds.constprop.50+0x8>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     1b6:	08 95       	ret

000001b8 <turnOffPWM>:
turnOffPWM():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     1b8:	84 30       	cpi	r24, 0x04	; 4
     1ba:	59 f0       	breq	.+22     	; 0x1d2 <turnOffPWM+0x1a>
     1bc:	28 f4       	brcc	.+10     	; 0x1c8 <turnOffPWM+0x10>
     1be:	81 30       	cpi	r24, 0x01	; 1
     1c0:	99 f0       	breq	.+38     	; 0x1e8 <turnOffPWM+0x30>
     1c2:	82 30       	cpi	r24, 0x02	; 2
     1c4:	89 f0       	breq	.+34     	; 0x1e8 <turnOffPWM+0x30>
     1c6:	08 95       	ret
     1c8:	85 30       	cpi	r24, 0x05	; 5
     1ca:	39 f0       	breq	.+14     	; 0x1da <turnOffPWM+0x22>
     1cc:	87 30       	cpi	r24, 0x07	; 7
     1ce:	41 f0       	breq	.+16     	; 0x1e0 <turnOffPWM+0x28>
     1d0:	08 95       	ret
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     1d2:	8f b5       	in	r24, 0x2f	; 47
     1d4:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     1d6:	8f bd       	out	0x2f, r24	; 47
     1d8:	08 95       	ret
     1da:	8f b5       	in	r24, 0x2f	; 47
     1dc:	8f 7d       	andi	r24, 0xDF	; 223
     1de:	fb cf       	rjmp	.-10     	; 0x1d6 <turnOffPWM+0x1e>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:99
    #endif
    
    // Timer2
    #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        TCCR2 &= ~_BV(COM21);
     1e0:	85 b5       	in	r24, 0x25	; 37
     1e2:	8f 7d       	andi	r24, 0xDF	; 223
     1e4:	85 bd       	out	0x25, r24	; 37
     1e6:	08 95       	ret
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:171
    #if defined(TCCR0) && defined(COM01)
      case TIMER0:
        TCCR0 &= ~_BV(COM01);
        break;
      case TIMER0A:
        TCCR0 &= ~_BV(COM01);
     1e8:	83 b7       	in	r24, 0x33	; 51
     1ea:	8f 7d       	andi	r24, 0xDF	; 223
     1ec:	83 bf       	out	0x33, r24	; 51
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:185
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
        break;
    #endif
  }
}
     1ee:	08 95       	ret

000001f0 <digitalRead>:
digitalRead():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
     1f4:	28 2f       	mov	r18, r24
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	f9 01       	movw	r30, r18
     1fa:	ec 5c       	subi	r30, 0xCC	; 204
     1fc:	fe 4f       	sbci	r31, 0xFE	; 254
     1fe:	84 91       	lpm	r24, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     200:	f9 01       	movw	r30, r18
     202:	ec 5e       	subi	r30, 0xEC	; 236
     204:	fe 4f       	sbci	r31, 0xFE	; 254
     206:	d4 91       	lpm	r29, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     208:	f9 01       	movw	r30, r18
     20a:	ec 50       	subi	r30, 0x0C	; 12
     20c:	ff 4f       	sbci	r31, 0xFF	; 255
     20e:	c4 91       	lpm	r28, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     210:	cc 23       	and	r28, r28
     212:	a1 f0       	breq	.+40     	; 0x23c <digitalRead+0x4c>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     214:	81 11       	cpse	r24, r1
     216:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <turnOffPWM>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     21a:	ec 2f       	mov	r30, r28
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	ee 0f       	add	r30, r30
     220:	ff 1f       	adc	r31, r31
     222:	e6 51       	subi	r30, 0x16	; 22
     224:	ff 4f       	sbci	r31, 0xFF	; 255
     226:	a5 91       	lpm	r26, Z+
     228:	b4 91       	lpm	r27, Z
     22a:	ec 91       	ld	r30, X
     22c:	ed 23       	and	r30, r29
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	09 f4       	brne	.+2      	; 0x236 <digitalRead+0x46>
     234:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
     236:	df 91       	pop	r29
     238:	cf 91       	pop	r28
     23a:	08 95       	ret
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	fa cf       	rjmp	.-12     	; 0x236 <digitalRead+0x46>

00000242 <digitalWrite>:
digitalWrite():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     242:	1f 93       	push	r17
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     248:	28 2f       	mov	r18, r24
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	f9 01       	movw	r30, r18
     24e:	ec 5c       	subi	r30, 0xCC	; 204
     250:	fe 4f       	sbci	r31, 0xFE	; 254
     252:	84 91       	lpm	r24, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     254:	f9 01       	movw	r30, r18
     256:	ec 5e       	subi	r30, 0xEC	; 236
     258:	fe 4f       	sbci	r31, 0xFE	; 254
     25a:	d4 91       	lpm	r29, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     25c:	f9 01       	movw	r30, r18
     25e:	ec 50       	subi	r30, 0x0C	; 12
     260:	ff 4f       	sbci	r31, 0xFF	; 255
     262:	c4 91       	lpm	r28, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     264:	cc 23       	and	r28, r28
     266:	a9 f0       	breq	.+42     	; 0x292 <digitalWrite+0x50>
     268:	16 2f       	mov	r17, r22
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     26a:	81 11       	cpse	r24, r1
     26c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <turnOffPWM>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     270:	ec 2f       	mov	r30, r28
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	ee 0f       	add	r30, r30
     276:	ff 1f       	adc	r31, r31
     278:	e0 52       	subi	r30, 0x20	; 32
     27a:	ff 4f       	sbci	r31, 0xFF	; 255
     27c:	a5 91       	lpm	r26, Z+
     27e:	b4 91       	lpm	r27, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     280:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     282:	f8 94       	cli
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     284:	ec 91       	ld	r30, X
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     286:	11 11       	cpse	r17, r1
     288:	08 c0       	rjmp	.+16     	; 0x29a <digitalWrite+0x58>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     28a:	d0 95       	com	r29
     28c:	de 23       	and	r29, r30
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     28e:	dc 93       	st	X, r29
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     290:	8f bf       	out	0x3f, r24	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:212
}
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	1f 91       	pop	r17
     298:	08 95       	ret
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     29a:	de 2b       	or	r29, r30
     29c:	f8 cf       	rjmp	.-16     	; 0x28e <digitalWrite+0x4c>

0000029e <HT1621::wrDATA(unsigned char, unsigned char) [clone .constprop.49]>:
wrDATA():
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:71
	_data_p=data_p;
	_backlight_en = false;
	config();
}

void HT1621::wrDATA(unsigned char data, unsigned char cnt) {
     29e:	1f 93       	push	r17
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	d8 2f       	mov	r29, r24
     2a6:	16 2f       	mov	r17, r22
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:73
	unsigned char i;
	for (i = 0; i < cnt; i++) {
     2a8:	c0 e0       	ldi	r28, 0x00	; 0
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:74
		digitalWrite(_wr_p, LOW);
     2aa:	60 e0       	ldi	r22, 0x00	; 0
     2ac:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <lcd+0x2>
     2b0:	0e 94 21 01 	call	0x242	; 0x242 <digitalWrite>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:75
		delayMicroseconds(4);
     2b4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <delayMicroseconds.constprop.50>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:77
		if (data & 0x80) {
			digitalWrite(_data_p, HIGH);
     2b8:	61 e0       	ldi	r22, 0x01	; 1
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:76
void HT1621::wrDATA(unsigned char data, unsigned char cnt) {
	unsigned char i;
	for (i = 0; i < cnt; i++) {
		digitalWrite(_wr_p, LOW);
		delayMicroseconds(4);
		if (data & 0x80) {
     2ba:	d7 ff       	sbrs	r29, 7
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:80
			digitalWrite(_data_p, HIGH);
		}
		else {
			digitalWrite(_data_p, LOW);
     2bc:	60 e0       	ldi	r22, 0x00	; 0
     2be:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <lcd+0x4>
     2c2:	0e 94 21 01 	call	0x242	; 0x242 <digitalWrite>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:82
		}
		digitalWrite(_wr_p, HIGH);
     2c6:	61 e0       	ldi	r22, 0x01	; 1
     2c8:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <lcd+0x2>
     2cc:	0e 94 21 01 	call	0x242	; 0x242 <digitalWrite>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:83
		delayMicroseconds(4);
     2d0:	0e 94 d5 00 	call	0x1aa	; 0x1aa <delayMicroseconds.constprop.50>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:84
		data <<= 1;
     2d4:	dd 0f       	add	r29, r29
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:73
	config();
}

void HT1621::wrDATA(unsigned char data, unsigned char cnt) {
	unsigned char i;
	for (i = 0; i < cnt; i++) {
     2d6:	cf 5f       	subi	r28, 0xFF	; 255
     2d8:	1c 13       	cpse	r17, r28
     2da:	e7 cf       	rjmp	.-50     	; 0x2aa <HT1621::wrDATA(unsigned char, unsigned char) [clone .constprop.49]+0xc>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:86
		}
		digitalWrite(_wr_p, HIGH);
		delayMicroseconds(4);
		data <<= 1;
	}
}
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	1f 91       	pop	r17
     2e2:	08 95       	ret

000002e4 <HT1621::wrclrdata(unsigned char, unsigned char) [clone .constprop.48]>:
wrclrdata():
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:87
void HT1621::wrclrdata(unsigned char addr, unsigned char sdata)
     2e4:	0f 93       	push	r16
     2e6:	1f 93       	push	r17
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	08 2f       	mov	r16, r24
     2ee:	16 2f       	mov	r17, r22
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:90
{
	addr <<= 2;
	digitalWrite(_cs_p, LOW);
     2f0:	cd e7       	ldi	r28, 0x7D	; 125
     2f2:	d2 e0       	ldi	r29, 0x02	; 2
     2f4:	60 e0       	ldi	r22, 0x00	; 0
     2f6:	88 81       	ld	r24, Y
     2f8:	0e 94 21 01 	call	0x242	; 0x242 <digitalWrite>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:91
	wrDATA(0xa0, 3);
     2fc:	63 e0       	ldi	r22, 0x03	; 3
     2fe:	80 ea       	ldi	r24, 0xA0	; 160
     300:	0e 94 4f 01 	call	0x29e	; 0x29e <HT1621::wrDATA(unsigned char, unsigned char) [clone .constprop.49]>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:92
	wrDATA(addr, 6);
     304:	66 e0       	ldi	r22, 0x06	; 6
     306:	80 2f       	mov	r24, r16
     308:	88 0f       	add	r24, r24
     30a:	88 0f       	add	r24, r24
     30c:	0e 94 4f 01 	call	0x29e	; 0x29e <HT1621::wrDATA(unsigned char, unsigned char) [clone .constprop.49]>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:93
	wrDATA(sdata, 8);
     310:	68 e0       	ldi	r22, 0x08	; 8
     312:	81 2f       	mov	r24, r17
     314:	0e 94 4f 01 	call	0x29e	; 0x29e <HT1621::wrDATA(unsigned char, unsigned char) [clone .constprop.49]>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:94
	digitalWrite(_cs_p, HIGH);
     318:	61 e0       	ldi	r22, 0x01	; 1
     31a:	88 81       	ld	r24, Y
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:95
}
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	1f 91       	pop	r17
     322:	0f 91       	pop	r16
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:94
	addr <<= 2;
	digitalWrite(_cs_p, LOW);
	wrDATA(0xa0, 3);
	wrDATA(addr, 6);
	wrDATA(sdata, 8);
	digitalWrite(_cs_p, HIGH);
     324:	0c 94 21 01 	jmp	0x242	; 0x242 <digitalWrite>

00000328 <HT1621::clear() [clone .constprop.46]>:
clear():
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:178
	}

	update();
}

void HT1621::clear(){
     328:	cf 93       	push	r28
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:149
	wrCMD(SYSEN);
	wrCMD(LCDON);
}

void HT1621::wrCLR(unsigned char len) {
	unsigned char addr = 0;
     32a:	c0 e0       	ldi	r28, 0x00	; 0
wrCLR():
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:152
	unsigned char i;
	for (i = 0; i < len; i++) {
		wrclrdata(addr, 0x00);
     32c:	60 e0       	ldi	r22, 0x00	; 0
     32e:	8c 2f       	mov	r24, r28
     330:	0e 94 72 01 	call	0x2e4	; 0x2e4 <HT1621::wrclrdata(unsigned char, unsigned char) [clone .constprop.48]>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:153
		addr = addr + 2;
     334:	ce 5f       	subi	r28, 0xFE	; 254
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:151
}

void HT1621::wrCLR(unsigned char len) {
	unsigned char addr = 0;
	unsigned char i;
	for (i = 0; i < len; i++) {
     336:	c0 32       	cpi	r28, 0x20	; 32
     338:	c9 f7       	brne	.-14     	; 0x32c <HT1621::clear() [clone .constprop.46]+0x4>
clear():
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:180
	update();
}

void HT1621::clear(){
	wrCLR(16);
}
     33a:	cf 91       	pop	r28
     33c:	08 95       	ret

0000033e <HT1621::update() [clone .constprop.40]>:
update():
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:183

// takes the buffer and puts it straight into the driver
void HT1621::update(){
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:185
	// the buffer is backwards with respect to the lcd. could be improved
	wrone(0, _buffer[5]);
     342:	cd e7       	ldi	r28, 0x7D	; 125
     344:	d2 e0       	ldi	r29, 0x02	; 2
     346:	6e 85       	ldd	r22, Y+14	; 0x0e
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <HT1621::wrclrdata(unsigned char, unsigned char) [clone .constprop.48]>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:186
	wrone(2, _buffer[4]);
     34e:	6d 85       	ldd	r22, Y+13	; 0x0d
     350:	82 e0       	ldi	r24, 0x02	; 2
     352:	0e 94 72 01 	call	0x2e4	; 0x2e4 <HT1621::wrclrdata(unsigned char, unsigned char) [clone .constprop.48]>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:187
	wrone(4, _buffer[3]);
     356:	6c 85       	ldd	r22, Y+12	; 0x0c
     358:	84 e0       	ldi	r24, 0x04	; 4
     35a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <HT1621::wrclrdata(unsigned char, unsigned char) [clone .constprop.48]>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:188
	wrone(6, _buffer[2]);
     35e:	6b 85       	ldd	r22, Y+11	; 0x0b
     360:	86 e0       	ldi	r24, 0x06	; 6
     362:	0e 94 72 01 	call	0x2e4	; 0x2e4 <HT1621::wrclrdata(unsigned char, unsigned char) [clone .constprop.48]>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:189
	wrone(8, _buffer[1]);
     366:	6a 85       	ldd	r22, Y+10	; 0x0a
     368:	88 e0       	ldi	r24, 0x08	; 8
     36a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <HT1621::wrclrdata(unsigned char, unsigned char) [clone .constprop.48]>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:190
	wrone(10,_buffer[0]);
     36e:	69 85       	ldd	r22, Y+9	; 0x09
     370:	8a e0       	ldi	r24, 0x0A	; 10
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:191
}
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:190
	wrone(0, _buffer[5]);
	wrone(2, _buffer[4]);
	wrone(4, _buffer[3]);
	wrone(6, _buffer[2]);
	wrone(8, _buffer[1]);
	wrone(10,_buffer[0]);
     376:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <HT1621::wrclrdata(unsigned char, unsigned char) [clone .constprop.48]>

0000037a <HT1621::wrCMD(unsigned char) [clone .constprop.45]>:
wrCMD():
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:131
	if(_backlight_en)
		digitalWrite(_backlight_p, LOW);
	delay(1);
}

void HT1621::wrCMD(unsigned char CMD) {  //100
     37a:	1f 93       	push	r17
     37c:	cf 93       	push	r28
     37e:	df 93       	push	r29
     380:	18 2f       	mov	r17, r24
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:132
	digitalWrite(_cs_p, LOW);
     382:	cd e7       	ldi	r28, 0x7D	; 125
     384:	d2 e0       	ldi	r29, 0x02	; 2
     386:	60 e0       	ldi	r22, 0x00	; 0
     388:	88 81       	ld	r24, Y
     38a:	0e 94 21 01 	call	0x242	; 0x242 <digitalWrite>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:133
	wrDATA(0x80, 4);
     38e:	64 e0       	ldi	r22, 0x04	; 4
     390:	80 e8       	ldi	r24, 0x80	; 128
     392:	0e 94 4f 01 	call	0x29e	; 0x29e <HT1621::wrDATA(unsigned char, unsigned char) [clone .constprop.49]>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:134
	wrDATA(CMD, 8);
     396:	68 e0       	ldi	r22, 0x08	; 8
     398:	81 2f       	mov	r24, r17
     39a:	0e 94 4f 01 	call	0x29e	; 0x29e <HT1621::wrDATA(unsigned char, unsigned char) [clone .constprop.49]>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:135
	digitalWrite(_cs_p, HIGH);
     39e:	61 e0       	ldi	r22, 0x01	; 1
     3a0:	88 81       	ld	r24, Y
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:136
}
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	1f 91       	pop	r17
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:135

void HT1621::wrCMD(unsigned char CMD) {  //100
	digitalWrite(_cs_p, LOW);
	wrDATA(0x80, 4);
	wrDATA(CMD, 8);
	digitalWrite(_cs_p, HIGH);
     3a8:	0c 94 21 01 	jmp	0x242	; 0x242 <digitalWrite>

000003ac <pinMode>:
pinMode():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	fc 01       	movw	r30, r24
     3b4:	ec 5e       	subi	r30, 0xEC	; 236
     3b6:	fe 4f       	sbci	r31, 0xFE	; 254
     3b8:	24 91       	lpm	r18, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     3ba:	8c 50       	subi	r24, 0x0C	; 12
     3bc:	9f 4f       	sbci	r25, 0xFF	; 255
     3be:	fc 01       	movw	r30, r24
     3c0:	84 91       	lpm	r24, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     3c2:	88 23       	and	r24, r24
     3c4:	d1 f0       	breq	.+52     	; 0x3fa <pinMode+0x4e>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	88 0f       	add	r24, r24
     3ca:	99 1f       	adc	r25, r25
     3cc:	fc 01       	movw	r30, r24
     3ce:	ea 52       	subi	r30, 0x2A	; 42
     3d0:	ff 4f       	sbci	r31, 0xFF	; 255
     3d2:	a5 91       	lpm	r26, Z+
     3d4:	b4 91       	lpm	r27, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     3d6:	fc 01       	movw	r30, r24
     3d8:	e0 52       	subi	r30, 0x20	; 32
     3da:	ff 4f       	sbci	r31, 0xFF	; 255
     3dc:	c5 91       	lpm	r28, Z+
     3de:	d4 91       	lpm	r29, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     3e0:	61 11       	cpse	r22, r1
     3e2:	0e c0       	rjmp	.+28     	; 0x400 <__LOCK_REGION_LENGTH__>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     3e4:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     3e6:	f8 94       	cli
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     3e8:	8c 91       	ld	r24, X
     3ea:	e2 2f       	mov	r30, r18
     3ec:	e0 95       	com	r30
     3ee:	8e 23       	and	r24, r30
     3f0:	8c 93       	st	X, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     3f2:	28 81       	ld	r18, Y
     3f4:	e2 23       	and	r30, r18
     3f6:	e8 83       	st	Y, r30
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:46
    SREG = oldSREG;
     3f8:	9f bf       	out	0x3f, r25	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	08 95       	ret
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     400:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     402:	f8 94       	cli
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     404:	ec 91       	ld	r30, X
     406:	e2 2b       	or	r30, r18
     408:	ec 93       	st	X, r30
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     40a:	8f bf       	out	0x3f, r24	; 63
     40c:	f6 cf       	rjmp	.-20     	; 0x3fa <pinMode+0x4e>

0000040e <micros>:
micros():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     40e:	3f b7       	in	r19, 0x3f	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     410:	f8 94       	cli
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     412:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <timer0_overflow_count>
     416:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <timer0_overflow_count+0x1>
     41a:	a0 91 d1 01 	lds	r26, 0x01D1	; 0x8001d1 <timer0_overflow_count+0x2>
     41e:	b0 91 d2 01 	lds	r27, 0x01D2	; 0x8001d2 <timer0_overflow_count+0x3>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     422:	22 b7       	in	r18, 0x32	; 50
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:268
    m++;
#else
    q = 1;
#endif
#else
  if ((TIFR & _BV(TOV0)) && (t < 255))
     424:	08 b6       	in	r0, 0x38	; 56
     426:	00 fe       	sbrs	r0, 0
     428:	05 c0       	rjmp	.+10     	; 0x434 <micros+0x26>
     42a:	2f 3f       	cpi	r18, 0xFF	; 255
     42c:	19 f0       	breq	.+6      	; 0x434 <micros+0x26>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:270
#ifndef CORRECT_EXACT_MICROS
    m++;
     42e:	01 96       	adiw	r24, 0x01	; 1
     430:	a1 1d       	adc	r26, r1
     432:	b1 1d       	adc	r27, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     434:	3f bf       	out	0x3f, r19	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     436:	ba 2f       	mov	r27, r26
     438:	a9 2f       	mov	r26, r25
     43a:	98 2f       	mov	r25, r24
     43c:	88 27       	eor	r24, r24
     43e:	bc 01       	movw	r22, r24
     440:	cd 01       	movw	r24, r26
     442:	62 0f       	add	r22, r18
     444:	71 1d       	adc	r23, r1
     446:	81 1d       	adc	r24, r1
     448:	91 1d       	adc	r25, r1
     44a:	43 e0       	ldi	r20, 0x03	; 3
     44c:	66 0f       	add	r22, r22
     44e:	77 1f       	adc	r23, r23
     450:	88 1f       	adc	r24, r24
     452:	99 1f       	adc	r25, r25
     454:	4a 95       	dec	r20
     456:	d1 f7       	brne	.-12     	; 0x44c <micros+0x3e>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     458:	08 95       	ret

0000045a <delay>:
delay():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
     45a:	8f 92       	push	r8
     45c:	9f 92       	push	r9
     45e:	af 92       	push	r10
     460:	bf 92       	push	r11
     462:	cf 92       	push	r12
     464:	df 92       	push	r13
     466:	ef 92       	push	r14
     468:	ff 92       	push	r15
     46a:	6b 01       	movw	r12, r22
     46c:	7c 01       	movw	r14, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
     46e:	0e 94 07 02 	call	0x40e	; 0x40e <micros>
     472:	4b 01       	movw	r8, r22
     474:	5c 01       	movw	r10, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     476:	c1 14       	cp	r12, r1
     478:	d1 04       	cpc	r13, r1
     47a:	e1 04       	cpc	r14, r1
     47c:	f1 04       	cpc	r15, r1
     47e:	b9 f0       	breq	.+46     	; 0x4ae <__stack+0x4f>
     480:	0e 94 07 02 	call	0x40e	; 0x40e <micros>
     484:	68 19       	sub	r22, r8
     486:	79 09       	sbc	r23, r9
     488:	8a 09       	sbc	r24, r10
     48a:	9b 09       	sbc	r25, r11
     48c:	68 3e       	cpi	r22, 0xE8	; 232
     48e:	73 40       	sbci	r23, 0x03	; 3
     490:	81 05       	cpc	r24, r1
     492:	91 05       	cpc	r25, r1
     494:	80 f3       	brcs	.-32     	; 0x476 <__stack+0x17>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:402
      ms--;
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	c2 1a       	sub	r12, r18
     49a:	d1 08       	sbc	r13, r1
     49c:	e1 08       	sbc	r14, r1
     49e:	f1 08       	sbc	r15, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     4a0:	88 ee       	ldi	r24, 0xE8	; 232
     4a2:	88 0e       	add	r8, r24
     4a4:	83 e0       	ldi	r24, 0x03	; 3
     4a6:	98 1e       	adc	r9, r24
     4a8:	a1 1c       	adc	r10, r1
     4aa:	b1 1c       	adc	r11, r1
     4ac:	e4 cf       	rjmp	.-56     	; 0x476 <__stack+0x17>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:406
    }
  }
}
     4ae:	ff 90       	pop	r15
     4b0:	ef 90       	pop	r14
     4b2:	df 90       	pop	r13
     4b4:	cf 90       	pop	r12
     4b6:	bf 90       	pop	r11
     4b8:	af 90       	pop	r10
     4ba:	9f 90       	pop	r9
     4bc:	8f 90       	pop	r8
     4be:	08 95       	ret

000004c0 <nothing>:
nothing():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/WInterrupts.c:36

#include "wiring_private.h"

static void nothing(void)
{
}
     4c0:	08 95       	ret

000004c2 <Print::write(unsigned char const*, unsigned int)>:
write():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     4c2:	af 92       	push	r10
     4c4:	bf 92       	push	r11
     4c6:	cf 92       	push	r12
     4c8:	df 92       	push	r13
     4ca:	ef 92       	push	r14
     4cc:	ff 92       	push	r15
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	6c 01       	movw	r12, r24
     4d8:	7b 01       	movw	r14, r22
     4da:	8b 01       	movw	r16, r22
     4dc:	04 0f       	add	r16, r20
     4de:	15 1f       	adc	r17, r21
     4e0:	eb 01       	movw	r28, r22
     4e2:	5e 01       	movw	r10, r28
     4e4:	ae 18       	sub	r10, r14
     4e6:	bf 08       	sbc	r11, r15
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     4e8:	c0 17       	cp	r28, r16
     4ea:	d1 07       	cpc	r29, r17
     4ec:	59 f0       	breq	.+22     	; 0x504 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     4ee:	69 91       	ld	r22, Y+
     4f0:	d6 01       	movw	r26, r12
     4f2:	ed 91       	ld	r30, X+
     4f4:	fc 91       	ld	r31, X
     4f6:	01 90       	ld	r0, Z+
     4f8:	f0 81       	ld	r31, Z
     4fa:	e0 2d       	mov	r30, r0
     4fc:	c6 01       	movw	r24, r12
     4fe:	09 95       	icall
     500:	89 2b       	or	r24, r25
     502:	79 f7       	brne	.-34     	; 0x4e2 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     504:	c5 01       	movw	r24, r10
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	ff 90       	pop	r15
     510:	ef 90       	pop	r14
     512:	df 90       	pop	r13
     514:	cf 90       	pop	r12
     516:	bf 90       	pop	r11
     518:	af 90       	pop	r10
     51a:	08 95       	ret

0000051c <HardwareSerial::availableForWrite()>:
availableForWrite():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     51c:	fc 01       	movw	r30, r24
     51e:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
     520:	44 8d       	ldd	r20, Z+28	; 0x1c
     522:	25 2f       	mov	r18, r21
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	84 2f       	mov	r24, r20
     528:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     52a:	82 1b       	sub	r24, r18
     52c:	93 0b       	sbc	r25, r19
     52e:	54 17       	cp	r21, r20
     530:	10 f0       	brcs	.+4      	; 0x536 <HardwareSerial::availableForWrite()+0x1a>
     532:	cf 96       	adiw	r24, 0x3f	; 63
     534:	08 95       	ret
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
     536:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
     538:	08 95       	ret

0000053a <HardwareSerial::read()>:
read():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:178
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     53a:	fc 01       	movw	r30, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     53c:	91 8d       	ldd	r25, Z+25	; 0x19
     53e:	82 8d       	ldd	r24, Z+26	; 0x1a
     540:	98 17       	cp	r25, r24
     542:	61 f0       	breq	.+24     	; 0x55c <HardwareSerial::read()+0x22>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     544:	a2 8d       	ldd	r26, Z+26	; 0x1a
     546:	ae 0f       	add	r26, r30
     548:	bf 2f       	mov	r27, r31
     54a:	b1 1d       	adc	r27, r1
     54c:	5d 96       	adiw	r26, 0x1d	; 29
     54e:	8c 91       	ld	r24, X
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     550:	92 8d       	ldd	r25, Z+26	; 0x1a
     552:	9f 5f       	subi	r25, 0xFF	; 255
     554:	9f 73       	andi	r25, 0x3F	; 63
     556:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	08 95       	ret
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     55c:	8f ef       	ldi	r24, 0xFF	; 255
     55e:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     560:	08 95       	ret

00000562 <HardwareSerial::peek()>:
peek():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:169
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     562:	fc 01       	movw	r30, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
     564:	91 8d       	ldd	r25, Z+25	; 0x19
     566:	82 8d       	ldd	r24, Z+26	; 0x1a
     568:	98 17       	cp	r25, r24
     56a:	31 f0       	breq	.+12     	; 0x578 <HardwareSerial::peek()+0x16>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     56c:	82 8d       	ldd	r24, Z+26	; 0x1a
     56e:	e8 0f       	add	r30, r24
     570:	f1 1d       	adc	r31, r1
     572:	85 8d       	ldd	r24, Z+29	; 0x1d
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	08 95       	ret
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     578:	8f ef       	ldi	r24, 0xFF	; 255
     57a:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     57c:	08 95       	ret

0000057e <HardwareSerial::available()>:
available():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     57e:	fc 01       	movw	r30, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     580:	91 8d       	ldd	r25, Z+25	; 0x19
     582:	22 8d       	ldd	r18, Z+26	; 0x1a
     584:	89 2f       	mov	r24, r25
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	80 5c       	subi	r24, 0xC0	; 192
     58a:	9f 4f       	sbci	r25, 0xFF	; 255
     58c:	82 1b       	sub	r24, r18
     58e:	91 09       	sbc	r25, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
     590:	8f 73       	andi	r24, 0x3F	; 63
     592:	99 27       	eor	r25, r25
     594:	08 95       	ret

00000596 <Serial0_available()>:
Serial0_available():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     596:	83 ed       	ldi	r24, 0xD3	; 211
     598:	91 e0       	ldi	r25, 0x01	; 1
     59a:	0e 94 bf 02 	call	0x57e	; 0x57e <HardwareSerial::available()>
     59e:	21 e0       	ldi	r18, 0x01	; 1
     5a0:	89 2b       	or	r24, r25
     5a2:	09 f4       	brne	.+2      	; 0x5a6 <Serial0_available()+0x10>
     5a4:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
     5a6:	82 2f       	mov	r24, r18
     5a8:	08 95       	ret

000005aa <serialEventRun()>:
serialEventRun():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	89 2b       	or	r24, r25
     5b0:	29 f0       	breq	.+10     	; 0x5bc <serialEventRun()+0x12>
     5b2:	0e 94 cb 02 	call	0x596	; 0x596 <Serial0_available()>
     5b6:	81 11       	cpse	r24, r1
     5b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     5bc:	08 95       	ret

000005be <HardwareSerial::_tx_udr_empty_irq()>:
_tx_udr_empty_irq():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     5be:	fc 01       	movw	r30, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     5c0:	a4 8d       	ldd	r26, Z+28	; 0x1c
     5c2:	a8 0f       	add	r26, r24
     5c4:	b9 2f       	mov	r27, r25
     5c6:	b1 1d       	adc	r27, r1
     5c8:	a3 5a       	subi	r26, 0xA3	; 163
     5ca:	bf 4f       	sbci	r27, 0xFF	; 255
     5cc:	2c 91       	ld	r18, X
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     5ce:	84 8d       	ldd	r24, Z+28	; 0x1c
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	01 96       	adiw	r24, 0x01	; 1
     5d4:	8f 73       	andi	r24, 0x3F	; 63
     5d6:	99 27       	eor	r25, r25
     5d8:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
     5da:	a6 89       	ldd	r26, Z+22	; 0x16
     5dc:	b7 89       	ldd	r27, Z+23	; 0x17
     5de:	2c 93       	st	X, r18
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:106
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
     5e0:	a0 89       	ldd	r26, Z+16	; 0x10
     5e2:	b1 89       	ldd	r27, Z+17	; 0x11
     5e4:	8c 91       	ld	r24, X
     5e6:	82 74       	andi	r24, 0x42	; 66
     5e8:	8c 93       	st	X, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     5ea:	93 8d       	ldd	r25, Z+27	; 0x1b
     5ec:	84 8d       	ldd	r24, Z+28	; 0x1c
     5ee:	98 13       	cpse	r25, r24
     5f0:	06 c0       	rjmp	.+12     	; 0x5fe <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     5f2:	02 88       	ldd	r0, Z+18	; 0x12
     5f4:	f3 89       	ldd	r31, Z+19	; 0x13
     5f6:	e0 2d       	mov	r30, r0
     5f8:	80 81       	ld	r24, Z
     5fa:	8f 7d       	andi	r24, 0xDF	; 223
     5fc:	80 83       	st	Z, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
     5fe:	08 95       	ret

00000600 <HardwareSerial::write(unsigned char)>:
write():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:223
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     600:	ef 92       	push	r14
     602:	ff 92       	push	r15
     604:	0f 93       	push	r16
     606:	1f 93       	push	r17
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	ec 01       	movw	r28, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     612:	9b 8d       	ldd	r25, Y+27	; 0x1b
     614:	8c 8d       	ldd	r24, Y+28	; 0x1c
     616:	98 13       	cpse	r25, r24
     618:	19 c0       	rjmp	.+50     	; 0x64c <HardwareSerial::write(unsigned char)+0x4c>
     61a:	e8 89       	ldd	r30, Y+16	; 0x10
     61c:	f9 89       	ldd	r31, Y+17	; 0x11
     61e:	80 81       	ld	r24, Z
     620:	85 ff       	sbrs	r24, 5
     622:	14 c0       	rjmp	.+40     	; 0x64c <HardwareSerial::write(unsigned char)+0x4c>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     624:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\hosein\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     626:	f8 94       	cli
write():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
     628:	ee 89       	ldd	r30, Y+22	; 0x16
     62a:	ff 89       	ldd	r31, Y+23	; 0x17
     62c:	60 83       	st	Z, r22
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:243
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
      #else
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
     62e:	e8 89       	ldd	r30, Y+16	; 0x10
     630:	f9 89       	ldd	r31, Y+17	; 0x11
     632:	80 81       	ld	r24, Z
     634:	82 74       	andi	r24, 0x42	; 66
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
     636:	80 83       	st	Z, r24
__iRestore():
c:\users\hosein\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     638:	9f bf       	out	0x3f, r25	; 63
write():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	ff 90       	pop	r15
     648:	ef 90       	pop	r14
     64a:	08 95       	ret
     64c:	f6 2e       	mov	r15, r22
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     64e:	0b 8d       	ldd	r16, Y+27	; 0x1b
     650:	10 e0       	ldi	r17, 0x00	; 0
     652:	0f 5f       	subi	r16, 0xFF	; 255
     654:	1f 4f       	sbci	r17, 0xFF	; 255
     656:	0f 73       	andi	r16, 0x3F	; 63
     658:	11 27       	eor	r17, r17
     65a:	e0 2e       	mov	r14, r16
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     65c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     65e:	8e 11       	cpse	r24, r14
     660:	0c c0       	rjmp	.+24     	; 0x67a <HardwareSerial::write(unsigned char)+0x7a>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
     662:	0f b6       	in	r0, 0x3f	; 63
     664:	07 fc       	sbrc	r0, 7
     666:	fa cf       	rjmp	.-12     	; 0x65c <HardwareSerial::write(unsigned char)+0x5c>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     668:	e8 89       	ldd	r30, Y+16	; 0x10
     66a:	f9 89       	ldd	r31, Y+17	; 0x11
     66c:	80 81       	ld	r24, Z
     66e:	85 ff       	sbrs	r24, 5
     670:	f5 cf       	rjmp	.-22     	; 0x65c <HardwareSerial::write(unsigned char)+0x5c>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
     672:	ce 01       	movw	r24, r28
     674:	0e 94 df 02 	call	0x5be	; 0x5be <HardwareSerial::_tx_udr_empty_irq()>
     678:	f1 cf       	rjmp	.-30     	; 0x65c <HardwareSerial::write(unsigned char)+0x5c>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     67a:	eb 8d       	ldd	r30, Y+27	; 0x1b
     67c:	ec 0f       	add	r30, r28
     67e:	fd 2f       	mov	r31, r29
     680:	f1 1d       	adc	r31, r1
     682:	e3 5a       	subi	r30, 0xA3	; 163
     684:	ff 4f       	sbci	r31, 0xFF	; 255
     686:	f0 82       	st	Z, r15
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     688:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\hosein\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     68a:	f8 94       	cli
write():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
     68c:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
     68e:	ea 89       	ldd	r30, Y+18	; 0x12
     690:	fb 89       	ldd	r31, Y+19	; 0x13
     692:	80 81       	ld	r24, Z
     694:	80 62       	ori	r24, 0x20	; 32
     696:	cf cf       	rjmp	.-98     	; 0x636 <HardwareSerial::write(unsigned char)+0x36>

00000698 <HardwareSerial::flush()>:
flush():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	ec 01       	movw	r28, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     69e:	88 8d       	ldd	r24, Y+24	; 0x18
     6a0:	88 23       	and	r24, r24
     6a2:	b9 f0       	breq	.+46     	; 0x6d2 <HardwareSerial::flush()+0x3a>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     6a4:	aa 89       	ldd	r26, Y+18	; 0x12
     6a6:	bb 89       	ldd	r27, Y+19	; 0x13
     6a8:	e8 89       	ldd	r30, Y+16	; 0x10
     6aa:	f9 89       	ldd	r31, Y+17	; 0x11
     6ac:	8c 91       	ld	r24, X
     6ae:	85 fd       	sbrc	r24, 5
     6b0:	03 c0       	rjmp	.+6      	; 0x6b8 <HardwareSerial::flush()+0x20>
     6b2:	80 81       	ld	r24, Z
     6b4:	86 fd       	sbrc	r24, 6
     6b6:	0d c0       	rjmp	.+26     	; 0x6d2 <HardwareSerial::flush()+0x3a>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	07 fc       	sbrc	r0, 7
     6bc:	f7 cf       	rjmp	.-18     	; 0x6ac <HardwareSerial::flush()+0x14>
     6be:	8c 91       	ld	r24, X
     6c0:	85 ff       	sbrs	r24, 5
     6c2:	f2 cf       	rjmp	.-28     	; 0x6a8 <HardwareSerial::flush()+0x10>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     6c4:	80 81       	ld	r24, Z
     6c6:	85 ff       	sbrs	r24, 5
     6c8:	ed cf       	rjmp	.-38     	; 0x6a4 <HardwareSerial::flush()+0xc>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
     6ca:	ce 01       	movw	r24, r28
     6cc:	0e 94 df 02 	call	0x5be	; 0x5be <HardwareSerial::_tx_udr_empty_irq()>
     6d0:	e9 cf       	rjmp	.-46     	; 0x6a4 <HardwareSerial::flush()+0xc>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     6d2:	df 91       	pop	r29
     6d4:	cf 91       	pop	r28
     6d6:	08 95       	ret

000006d8 <HX711::~HX711()>:
__base_dtor ():
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:76

HX711::HX711() {
}

HX711::~HX711() {
}
     6d8:	08 95       	ret

000006da <shiftIn.constprop.57>:
shiftIn():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_shift.c:25
  Boston, MA  02111-1307  USA
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
     6da:	ff 92       	push	r15
     6dc:	0f 93       	push	r16
     6de:	1f 93       	push	r17
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	f8 2e       	mov	r15, r24
     6e6:	06 2f       	mov	r16, r22
     6e8:	c7 e0       	ldi	r28, 0x07	; 7
     6ea:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_shift.c:26
  uint8_t value = 0;
     6ec:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_shift.c:30
  uint8_t i;

  for (i = 0; i < 8; ++i) {
    digitalWrite(clockPin, HIGH);
     6ee:	61 e0       	ldi	r22, 0x01	; 1
     6f0:	80 2f       	mov	r24, r16
     6f2:	0e 94 21 01 	call	0x242	; 0x242 <digitalWrite>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_shift.c:34
    if (bitOrder == LSBFIRST)
      value |= digitalRead(dataPin) << i;
    else
      value |= digitalRead(dataPin) << (7 - i);
     6f6:	8f 2d       	mov	r24, r15
     6f8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalRead>
     6fc:	0c 2e       	mov	r0, r28
     6fe:	01 c0       	rjmp	.+2      	; 0x702 <shiftIn.constprop.57+0x28>
     700:	88 0f       	add	r24, r24
     702:	0a 94       	dec	r0
     704:	ea f7       	brpl	.-6      	; 0x700 <shiftIn.constprop.57+0x26>
     706:	18 2b       	or	r17, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_shift.c:35
    digitalWrite(clockPin, LOW);
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	80 2f       	mov	r24, r16
     70c:	0e 94 21 01 	call	0x242	; 0x242 <digitalWrite>
     710:	21 97       	sbiw	r28, 0x01	; 1
     712:	68 f7       	brcc	.-38     	; 0x6ee <shiftIn.constprop.57+0x14>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_shift.c:38
  }
  return value;
}
     714:	81 2f       	mov	r24, r17
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	1f 91       	pop	r17
     71c:	0f 91       	pop	r16
     71e:	ff 90       	pop	r15
     720:	08 95       	ret

00000722 <HX711::read() [clone .constprop.54]>:
read():
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:107
			break;
	}

}

long HX711::read() {
     722:	ef 92       	push	r14
     724:	ff 92       	push	r15
     726:	0f 93       	push	r16
     728:	1f 93       	push	r17
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
is_ready():
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:89

	set_gain(gain);
}

bool HX711::is_ready() {
	return digitalRead(DOUT) == LOW;
     72e:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <scale+0x3>
     732:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalRead>
wait_ready():
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:196

void HX711::wait_ready(unsigned long delay_ms) {
	// Wait for the chip to become ready.
	// This is a blocking implementation and will
	// halt the sketch until a load cell is connected.
	while (!is_ready()) {
     736:	89 2b       	or	r24, r25
     738:	31 f0       	breq	.+12     	; 0x746 <HX711::read() [clone .constprop.54]+0x24>
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:199
		// Probably will do no harm on AVR but will feed the Watchdog Timer (WDT) on ESP.
		// https://github.com/bogde/HX711/issues/73
		delay(delay_ms);
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	cb 01       	movw	r24, r22
     740:	0e 94 2d 02 	call	0x45a	; 0x45a <delay>
     744:	f4 cf       	rjmp	.-24     	; 0x72e <HX711::read() [clone .constprop.54]+0xc>
read():
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:131
	// interrupts during the sequence and then restores the interrupt mask to its previous
	// state after the sequence completes, insuring that the entire read-and-gain-set
	// sequence is not interrupted.  The macro has a few minor advantages over bracketing
	// the sequence between `noInterrupts()` and `interrupts()` calls.
	#if HAS_ATOMIC_BLOCK
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     746:	df b7       	in	r29, 0x3f	; 63
__iCliRetVal():
c:\users\hosein\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
     748:	f8 94       	cli
read():
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:148
	// Disable interrupts.
	noInterrupts();
	#endif

	// Pulse the clock pin 24 times to read the data.
	data[2] = SHIFTIN_WITH_SPEED_SUPPORT(DOUT, PD_SCK, MSBFIRST);
     74a:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <scale+0x2>
     74e:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <scale+0x3>
     752:	0e 94 6d 03 	call	0x6da	; 0x6da <shiftIn.constprop.57>
     756:	08 2f       	mov	r16, r24
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:149
	data[1] = SHIFTIN_WITH_SPEED_SUPPORT(DOUT, PD_SCK, MSBFIRST);
     758:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <scale+0x2>
     75c:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <scale+0x3>
     760:	0e 94 6d 03 	call	0x6da	; 0x6da <shiftIn.constprop.57>
     764:	c8 2f       	mov	r28, r24
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:150
	data[0] = SHIFTIN_WITH_SPEED_SUPPORT(DOUT, PD_SCK, MSBFIRST);
     766:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <scale+0x2>
     76a:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <scale+0x3>
     76e:	0e 94 6d 03 	call	0x6da	; 0x6da <shiftIn.constprop.57>
     772:	18 2f       	mov	r17, r24
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:153

	// Set the channel and the gain factor for the next reading using the clock pin.
	for (unsigned int i = 0; i < GAIN; i++) {
     774:	f1 2c       	mov	r15, r1
     776:	e1 2c       	mov	r14, r1
     778:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <scale+0x4>
     77c:	8e 15       	cp	r24, r14
     77e:	1f 04       	cpc	r1, r15
     780:	79 f0       	breq	.+30     	; 0x7a0 <HX711::read() [clone .constprop.54]+0x7e>
     782:	70 f0       	brcs	.+28     	; 0x7a0 <HX711::read() [clone .constprop.54]+0x7e>
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:154
		digitalWrite(PD_SCK, HIGH);
     784:	61 e0       	ldi	r22, 0x01	; 1
     786:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <scale+0x2>
     78a:	0e 94 21 01 	call	0x242	; 0x242 <digitalWrite>
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:158
		#if ARCH_ESPRESSIF
		delayMicroseconds(1);
		#endif
		digitalWrite(PD_SCK, LOW);
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <scale+0x2>
     794:	0e 94 21 01 	call	0x242	; 0x242 <digitalWrite>
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:153
	data[2] = SHIFTIN_WITH_SPEED_SUPPORT(DOUT, PD_SCK, MSBFIRST);
	data[1] = SHIFTIN_WITH_SPEED_SUPPORT(DOUT, PD_SCK, MSBFIRST);
	data[0] = SHIFTIN_WITH_SPEED_SUPPORT(DOUT, PD_SCK, MSBFIRST);

	// Set the channel and the gain factor for the next reading using the clock pin.
	for (unsigned int i = 0; i < GAIN; i++) {
     798:	8f ef       	ldi	r24, 0xFF	; 255
     79a:	e8 1a       	sub	r14, r24
     79c:	f8 0a       	sbc	r15, r24
     79e:	ec cf       	rjmp	.-40     	; 0x778 <HX711::read() [clone .constprop.54]+0x56>
__iRestore():
c:\users\hosein\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     7a0:	df bf       	out	0x3f, r29	; 63
read():
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:186
	}

	// Construct a 32-bit signed integer
	value = ( static_cast<unsigned long>(filler) << 24
			| static_cast<unsigned long>(data[2]) << 16
			| static_cast<unsigned long>(data[1]) << 8
     7a2:	6c 2f       	mov	r22, r28
     7a4:	70 e0       	ldi	r23, 0x00	; 0
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	98 2f       	mov	r25, r24
     7ac:	87 2f       	mov	r24, r23
     7ae:	76 2f       	mov	r23, r22
     7b0:	66 27       	eor	r22, r22
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:184
	} else {
		filler = 0x00;
	}

	// Construct a 32-bit signed integer
	value = ( static_cast<unsigned long>(filler) << 24
     7b2:	80 2b       	or	r24, r16
     7b4:	61 2b       	or	r22, r17
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:177
	// Enable interrupts again.
	interrupts();
	#endif

	// Replicate the most significant bit to pad out a 32-bit signed integer
	if (data[2] & 0x80) {
     7b6:	00 0f       	add	r16, r16
     7b8:	00 0b       	sbc	r16, r16
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:184
	} else {
		filler = 0x00;
	}

	// Construct a 32-bit signed integer
	value = ( static_cast<unsigned long>(filler) << 24
     7ba:	10 e0       	ldi	r17, 0x00	; 0
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 2f       	mov	r19, r16
     7c2:	22 27       	eor	r18, r18
     7c4:	11 27       	eor	r17, r17
     7c6:	00 27       	eor	r16, r16
     7c8:	60 2b       	or	r22, r16
     7ca:	71 2b       	or	r23, r17
     7cc:	82 2b       	or	r24, r18
     7ce:	93 2b       	or	r25, r19
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:190
			| static_cast<unsigned long>(data[2]) << 16
			| static_cast<unsigned long>(data[1]) << 8
			| static_cast<unsigned long>(data[0]) );

	return static_cast<long>(value);
}
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	ff 90       	pop	r15
     7da:	ef 90       	pop	r14
     7dc:	08 95       	ret

000007de <HX711::read_average(unsigned char) [clone .constprop.53]>:
read_average():
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:231
		delay(delay_ms);
	}
	return false;
}

long HX711::read_average(byte times) {
     7de:	cf 92       	push	r12
     7e0:	df 92       	push	r13
     7e2:	ef 92       	push	r14
     7e4:	ff 92       	push	r15
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	c8 2f       	mov	r28, r24
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:232
	long sum = 0;
     7ec:	c1 2c       	mov	r12, r1
     7ee:	d1 2c       	mov	r13, r1
     7f0:	76 01       	movw	r14, r12
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:233
	for (byte i = 0; i < times; i++) {
     7f2:	d0 e0       	ldi	r29, 0x00	; 0
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:234
		sum += read();
     7f4:	0e 94 91 03 	call	0x722	; 0x722 <HX711::read() [clone .constprop.54]>
     7f8:	c6 0e       	add	r12, r22
     7fa:	d7 1e       	adc	r13, r23
     7fc:	e8 1e       	adc	r14, r24
     7fe:	f9 1e       	adc	r15, r25
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:237
		// Probably will do no harm on AVR but will feed the Watchdog Timer (WDT) on ESP.
		// https://github.com/bogde/HX711/issues/73
		delay(0);
     800:	60 e0       	ldi	r22, 0x00	; 0
     802:	70 e0       	ldi	r23, 0x00	; 0
     804:	cb 01       	movw	r24, r22
     806:	0e 94 2d 02 	call	0x45a	; 0x45a <delay>
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:233
	return false;
}

long HX711::read_average(byte times) {
	long sum = 0;
	for (byte i = 0; i < times; i++) {
     80a:	df 5f       	subi	r29, 0xFF	; 255
     80c:	cd 13       	cpse	r28, r29
     80e:	f2 cf       	rjmp	.-28     	; 0x7f4 <HX711::read_average(unsigned char) [clone .constprop.53]+0x16>
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:239
		sum += read();
		// Probably will do no harm on AVR but will feed the Watchdog Timer (WDT) on ESP.
		// https://github.com/bogde/HX711/issues/73
		delay(0);
	}
	return sum / times;
     810:	2c 2f       	mov	r18, r28
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	40 e0       	ldi	r20, 0x00	; 0
     818:	c7 01       	movw	r24, r14
     81a:	b6 01       	movw	r22, r12
     81c:	0e 94 1a 11 	call	0x2234	; 0x2234 <__divmodsi4>
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:240
}
     820:	ca 01       	movw	r24, r20
     822:	b9 01       	movw	r22, r18
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	ff 90       	pop	r15
     82a:	ef 90       	pop	r14
     82c:	df 90       	pop	r13
     82e:	cf 90       	pop	r12
     830:	08 95       	ret

00000832 <HX711::tare(unsigned char) [clone .constprop.52]>:
tare():
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:251
float HX711::get_units(byte times) {
	return get_value(times) / SCALE;
}

void HX711::tare(byte times) {
	double sum = read_average(times);
     832:	8a e0       	ldi	r24, 0x0A	; 10
     834:	0e 94 ef 03 	call	0x7de	; 0x7de <HX711::read_average(unsigned char) [clone .constprop.53]>
     838:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__floatsisf>
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:252
	set_offset(sum);
     83c:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__fixsfsi>
     840:	60 93 75 02 	sts	0x0275, r22	; 0x800275 <scale+0x5>
     844:	70 93 76 02 	sts	0x0276, r23	; 0x800276 <scale+0x6>
     848:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <scale+0x7>
     84c:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <scale+0x8>
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:253
}
     850:	08 95       	ret

00000852 <checkPowerKey()>:
disableSleep():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_extras.h:90
#define noSleep() disableSleep()
static inline void disableSleep() __attribute__((always_inline, unused));
static inline void disableSleep()
{
  #if defined sleep_disable
    sleep_disable();
     852:	85 b7       	in	r24, 0x35	; 53
     854:	8f 7b       	andi	r24, 0xBF	; 191
     856:	85 bf       	out	0x35, r24	; 53
display():
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:99
	digitalWrite(_cs_p, HIGH);
}

void HT1621::display()
{
	wrCMD(LCDON);
     858:	86 e0       	ldi	r24, 0x06	; 6
     85a:	0e 94 bd 01 	call	0x37a	; 0x37a <HT1621::wrCMD(unsigned char) [clone .constprop.45]>
checkPowerKey():
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:174

void checkPowerKey()
{
  noSleep();
  lcd.display();
  lcd.clear();
     85e:	0e 94 94 01 	call	0x328	; 0x328 <HT1621::clear() [clone .constprop.46]>
power_up():
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:277
	digitalWrite(PD_SCK, LOW);
	digitalWrite(PD_SCK, HIGH);
}

void HX711::power_up() {
	digitalWrite(PD_SCK, LOW);
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <scale+0x2>
     868:	0e 94 21 01 	call	0x242	; 0x242 <digitalWrite>
checkPowerKey():
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:176
  scale.power_up();
  scale.tare();
     86c:	0e 94 19 04 	call	0x832	; 0x832 <HX711::tare(unsigned char) [clone .constprop.52]>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:177
  delay(250);
     870:	6a ef       	ldi	r22, 0xFA	; 250
     872:	70 e0       	ldi	r23, 0x00	; 0
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	0c 94 2d 02 	jmp	0x45a	; 0x45a <delay>

0000087c <HX711::get_units(unsigned char) [clone .constprop.23]>:
get_units():
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:246

double HX711::get_value(byte times) {
	return read_average(times) - OFFSET;
}

float HX711::get_units(byte times) {
     87c:	0f 93       	push	r16
     87e:	1f 93       	push	r17
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
get_value():
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:243
	}
	return sum / times;
}

double HX711::get_value(byte times) {
	return read_average(times) - OFFSET;
     884:	0e 94 ef 03 	call	0x7de	; 0x7de <HX711::read_average(unsigned char) [clone .constprop.53]>
     888:	c0 e7       	ldi	r28, 0x70	; 112
     88a:	d2 e0       	ldi	r29, 0x02	; 2
     88c:	0d 81       	ldd	r16, Y+5	; 0x05
     88e:	1e 81       	ldd	r17, Y+6	; 0x06
     890:	2f 81       	ldd	r18, Y+7	; 0x07
     892:	38 85       	ldd	r19, Y+8	; 0x08
     894:	60 1b       	sub	r22, r16
     896:	71 0b       	sbc	r23, r17
     898:	82 0b       	sbc	r24, r18
     89a:	93 0b       	sbc	r25, r19
     89c:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__floatsisf>
get_units():
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:247
}

float HX711::get_units(byte times) {
	return get_value(times) / SCALE;
     8a0:	29 85       	ldd	r18, Y+9	; 0x09
     8a2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8a4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8a6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8a8:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__divsf3>
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:248
}
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	0f 91       	pop	r16
     8b4:	08 95       	ret

000008b6 <HT1621::print(long, char const*, int) [clone .constprop.38]>:
print():
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:193
	wrone(6, _buffer[2]);
	wrone(8, _buffer[1]);
	wrone(10,_buffer[0]);
}

void HT1621::print(long num, const char* flags, int precision){
     8b6:	4f 92       	push	r4
     8b8:	5f 92       	push	r5
     8ba:	6f 92       	push	r6
     8bc:	7f 92       	push	r7
     8be:	af 92       	push	r10
     8c0:	bf 92       	push	r11
     8c2:	cf 92       	push	r12
     8c4:	df 92       	push	r13
     8c6:	ef 92       	push	r14
     8c8:	ff 92       	push	r15
     8ca:	0f 93       	push	r16
     8cc:	1f 93       	push	r17
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	00 d0       	rcall	.+0      	; 0x8d4 <HT1621::print(long, char const*, int) [clone .constprop.38]+0x1e>
     8d4:	00 d0       	rcall	.+0      	; 0x8d6 <HT1621::print(long, char const*, int) [clone .constprop.38]+0x20>
     8d6:	00 d0       	rcall	.+0      	; 0x8d8 <HT1621::print(long, char const*, int) [clone .constprop.38]+0x22>
     8d8:	1f 92       	push	r1
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
     8de:	89 01       	movw	r16, r18
     8e0:	6b 01       	movw	r12, r22
     8e2:	7c 01       	movw	r14, r24
     8e4:	81 e6       	ldi	r24, 0x61	; 97
     8e6:	c8 16       	cp	r12, r24
     8e8:	89 e7       	ldi	r24, 0x79	; 121
     8ea:	d8 06       	cpc	r13, r24
     8ec:	8e ef       	ldi	r24, 0xFE	; 254
     8ee:	e8 06       	cpc	r14, r24
     8f0:	8f ef       	ldi	r24, 0xFF	; 255
     8f2:	f8 06       	cpc	r15, r24
     8f4:	44 f4       	brge	.+16     	; 0x906 <HT1621::print(long, char const*, int) [clone .constprop.38]+0x50>
     8f6:	91 e6       	ldi	r25, 0x61	; 97
     8f8:	c9 2e       	mov	r12, r25
     8fa:	99 e7       	ldi	r25, 0x79	; 121
     8fc:	d9 2e       	mov	r13, r25
     8fe:	9e ef       	ldi	r25, 0xFE	; 254
     900:	e9 2e       	mov	r14, r25
     902:	ff 24       	eor	r15, r15
     904:	fa 94       	dec	r15
     906:	90 e4       	ldi	r25, 0x40	; 64
     908:	c9 16       	cp	r12, r25
     90a:	92 e4       	ldi	r25, 0x42	; 66
     90c:	d9 06       	cpc	r13, r25
     90e:	9f e0       	ldi	r25, 0x0F	; 15
     910:	e9 06       	cpc	r14, r25
     912:	f1 04       	cpc	r15, r1
     914:	3c f0       	brlt	.+14     	; 0x924 <HT1621::print(long, char const*, int) [clone .constprop.38]+0x6e>
     916:	8f e3       	ldi	r24, 0x3F	; 63
     918:	c8 2e       	mov	r12, r24
     91a:	82 e4       	ldi	r24, 0x42	; 66
     91c:	d8 2e       	mov	r13, r24
     91e:	8f e0       	ldi	r24, 0x0F	; 15
     920:	e8 2e       	mov	r14, r24
     922:	f1 2c       	mov	r15, r1
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:200
		num = 999999; // clip into 999999
	if(num < -99999) // basic checks
		num = -99999; // clip into -99999

	char localbuffer[7]; //buffer to work within the function
	snprintf(localbuffer, 7, flags, num); // convert the decimal into string
     924:	ff 92       	push	r15
     926:	ef 92       	push	r14
     928:	df 92       	push	r13
     92a:	cf 92       	push	r12
     92c:	5f 93       	push	r21
     92e:	4f 93       	push	r20
     930:	1f 92       	push	r1
     932:	87 e0       	ldi	r24, 0x07	; 7
     934:	8f 93       	push	r24
     936:	fe 01       	movw	r30, r28
     938:	31 96       	adiw	r30, 0x01	; 1
     93a:	5f 01       	movw	r10, r30
     93c:	ff 93       	push	r31
     93e:	ef 93       	push	r30
     940:	0e 94 64 12 	call	0x24c8	; 0x24c8 <snprintf>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:208
		Serial.print(localbuffer);
		Serial.print("\t");
	#endif

	// horrible handling but should get us working. needs refactor in next major
	if (precision > 0 && (num) < pow(10, precision)) {
     944:	0f b6       	in	r0, 0x3f	; 63
     946:	f8 94       	cli
     948:	de bf       	out	0x3e, r29	; 62
     94a:	0f be       	out	0x3f, r0	; 63
     94c:	cd bf       	out	0x3d, r28	; 61
     94e:	10 16       	cp	r1, r16
     950:	11 06       	cpc	r1, r17
     952:	8c f5       	brge	.+98     	; 0x9b6 <HT1621::print(long, char const*, int) [clone .constprop.38]+0x100>
     954:	b8 01       	movw	r22, r16
     956:	01 2e       	mov	r0, r17
     958:	00 0c       	add	r0, r0
     95a:	88 0b       	sbc	r24, r24
     95c:	99 0b       	sbc	r25, r25
     95e:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__floatsisf>
     962:	9b 01       	movw	r18, r22
     964:	ac 01       	movw	r20, r24
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	80 e2       	ldi	r24, 0x20	; 32
     96c:	91 e4       	ldi	r25, 0x41	; 65
     96e:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <pow>
     972:	2b 01       	movw	r4, r22
     974:	3c 01       	movw	r6, r24
     976:	c7 01       	movw	r24, r14
     978:	b6 01       	movw	r22, r12
     97a:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__floatsisf>
     97e:	a3 01       	movw	r20, r6
     980:	92 01       	movw	r18, r4
     982:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__cmpsf2>
     986:	87 ff       	sbrs	r24, 7
     988:	16 c0       	rjmp	.+44     	; 0x9b6 <HT1621::print(long, char const*, int) [clone .constprop.38]+0x100>
     98a:	f5 01       	movw	r30, r10
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:210
		// we remove extra leading zeros
		for (int i = 0; i < (5 - precision); i++) {
     98c:	85 e0       	ldi	r24, 0x05	; 5
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	80 1b       	sub	r24, r16
     992:	91 0b       	sbc	r25, r17
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:215
			#ifdef _HTDEBUG
				Serial.print(localbuffer[1]);
			#endif // _HTDEBUG
			if(localbuffer[i+1] == '0' && localbuffer[i] != '-'){ // we remove only if there is another zero ahead AND if it's not a minus sign
				localbuffer[i] = ' ';
     994:	20 e2       	ldi	r18, 0x20	; 32
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:210
	#endif

	// horrible handling but should get us working. needs refactor in next major
	if (precision > 0 && (num) < pow(10, precision)) {
		// we remove extra leading zeros
		for (int i = 0; i < (5 - precision); i++) {
     996:	af 01       	movw	r20, r30
     998:	4a 19       	sub	r20, r10
     99a:	5b 09       	sbc	r21, r11
     99c:	48 17       	cp	r20, r24
     99e:	59 07       	cpc	r21, r25
     9a0:	54 f4       	brge	.+20     	; 0x9b6 <HT1621::print(long, char const*, int) [clone .constprop.38]+0x100>
     9a2:	df 01       	movw	r26, r30
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:214
			#ifdef _HTDEBUG
				Serial.print(localbuffer[1]);
			#endif // _HTDEBUG
			if(localbuffer[i+1] == '0' && localbuffer[i] != '-'){ // we remove only if there is another zero ahead AND if it's not a minus sign
     9a4:	31 81       	ldd	r19, Z+1	; 0x01
     9a6:	30 33       	cpi	r19, 0x30	; 48
     9a8:	31 f4       	brne	.+12     	; 0x9b6 <HT1621::print(long, char const*, int) [clone .constprop.38]+0x100>
     9aa:	31 96       	adiw	r30, 0x01	; 1
     9ac:	3c 91       	ld	r19, X
     9ae:	3d 32       	cpi	r19, 0x2D	; 45
     9b0:	11 f0       	breq	.+4      	; 0x9b6 <HT1621::print(long, char const*, int) [clone .constprop.38]+0x100>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:215
				localbuffer[i] = ' ';
     9b2:	2c 93       	st	X, r18
     9b4:	f0 cf       	rjmp	.-32     	; 0x996 <HT1621::print(long, char const*, int) [clone .constprop.38]+0xe0>
     9b6:	26 e8       	ldi	r18, 0x86	; 134
     9b8:	32 e0       	ldi	r19, 0x02	; 2
     9ba:	d5 01       	movw	r26, r10
     9bc:	ae 01       	movw	r20, r28
     9be:	49 5f       	subi	r20, 0xF9	; 249
     9c0:	5f 4f       	sbci	r21, 0xFF	; 255
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:228
	}
	}


	for(int i=0; i<6; i++){
		_buffer[i] &= 0x80; // mask the first bit, used by batter and decimal point
     9c2:	f9 01       	movw	r30, r18
     9c4:	81 91       	ld	r24, Z+
     9c6:	9f 01       	movw	r18, r30
     9c8:	80 78       	andi	r24, 0x80	; 128
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:229
		_buffer[i] |= charToSegBits(localbuffer[i]);
     9ca:	ed 91       	ld	r30, X+
     9cc:	ea 52       	subi	r30, 0x2A	; 42
charToSegBits():
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:320
	// the last three are for the decimal point
	_buffer[6-decimaldigits] |= 0x80;
}

char HT1621::charToSegBits(char character) {
	switch (character) {
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	e3 35       	cpi	r30, 0x53	; 83
     9d2:	20 f4       	brcc	.+8      	; 0x9dc <HT1621::print(long, char const*, int) [clone .constprop.38]+0x126>
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	e4 59       	subi	r30, 0x94	; 148
     9d8:	ff 4f       	sbci	r31, 0xFF	; 255
     9da:	90 81       	ld	r25, Z
print():
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:229
	}


	for(int i=0; i<6; i++){
		_buffer[i] &= 0x80; // mask the first bit, used by batter and decimal point
		_buffer[i] |= charToSegBits(localbuffer[i]);
     9dc:	f9 01       	movw	r30, r18
     9de:	31 97       	sbiw	r30, 0x01	; 1
     9e0:	89 2b       	or	r24, r25
     9e2:	80 83       	st	Z, r24
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:227
			#endif // _HTDEBUG
	}
	}


	for(int i=0; i<6; i++){
     9e4:	a4 17       	cp	r26, r20
     9e6:	b5 07       	cpc	r27, r21
     9e8:	61 f7       	brne	.-40     	; 0x9c2 <HT1621::print(long, char const*, int) [clone .constprop.38]+0x10c>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:231
		_buffer[i] &= 0x80; // mask the first bit, used by batter and decimal point
		_buffer[i] |= charToSegBits(localbuffer[i]);
	}
	update();
     9ea:	0e 94 9f 01 	call	0x33e	; 0x33e <HT1621::update() [clone .constprop.40]>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:232
}
     9ee:	27 96       	adiw	r28, 0x07	; 7
     9f0:	0f b6       	in	r0, 0x3f	; 63
     9f2:	f8 94       	cli
     9f4:	de bf       	out	0x3e, r29	; 62
     9f6:	0f be       	out	0x3f, r0	; 63
     9f8:	cd bf       	out	0x3d, r28	; 61
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
     9fe:	1f 91       	pop	r17
     a00:	0f 91       	pop	r16
     a02:	ff 90       	pop	r15
     a04:	ef 90       	pop	r14
     a06:	df 90       	pop	r13
     a08:	cf 90       	pop	r12
     a0a:	bf 90       	pop	r11
     a0c:	af 90       	pop	r10
     a0e:	7f 90       	pop	r7
     a10:	6f 90       	pop	r6
     a12:	5f 90       	pop	r5
     a14:	4f 90       	pop	r4
     a16:	08 95       	ret

00000a18 <Print::write(char const*) [clone .part.2] [clone .constprop.36]>:
_ZN5Print5writeEPKc.part.2():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     a18:	fc 01       	movw	r30, r24
     a1a:	01 90       	ld	r0, Z+
     a1c:	00 20       	and	r0, r0
     a1e:	e9 f7       	brne	.-6      	; 0xa1a <Print::write(char const*) [clone .part.2] [clone .constprop.36]+0x2>
     a20:	31 97       	sbiw	r30, 0x01	; 1
     a22:	af 01       	movw	r20, r30
     a24:	48 1b       	sub	r20, r24
     a26:	59 0b       	sbc	r21, r25
     a28:	bc 01       	movw	r22, r24
     a2a:	83 ed       	ldi	r24, 0xD3	; 211
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <Print::write(unsigned char const*, unsigned int)>

00000a32 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.31]>:
printNumber():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:232
  return vfprintf_P(&f, (const char *)format, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
     a32:	8f 92       	push	r8
     a34:	9f 92       	push	r9
     a36:	af 92       	push	r10
     a38:	bf 92       	push	r11
     a3a:	0f 93       	push	r16
     a3c:	1f 93       	push	r17
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
     a42:	cd b7       	in	r28, 0x3d	; 61
     a44:	de b7       	in	r29, 0x3e	; 62
     a46:	a1 97       	sbiw	r28, 0x21	; 33
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	f8 94       	cli
     a4c:	de bf       	out	0x3e, r29	; 62
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	cd bf       	out	0x3d, r28	; 61
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:237
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     a52:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     a54:	42 30       	cpi	r20, 0x02	; 2
     a56:	08 f4       	brcc	.+2      	; 0xa5a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.31]+0x28>
     a58:	4a e0       	ldi	r20, 0x0A	; 10
     a5a:	8e 01       	movw	r16, r28
     a5c:	0f 5d       	subi	r16, 0xDF	; 223
     a5e:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
     a60:	84 2e       	mov	r8, r20
     a62:	91 2c       	mov	r9, r1
     a64:	b1 2c       	mov	r11, r1
     a66:	a1 2c       	mov	r10, r1
     a68:	a5 01       	movw	r20, r10
     a6a:	94 01       	movw	r18, r8
     a6c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__udivmodsi4>
     a70:	e6 2f       	mov	r30, r22
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:244
    n /= base;
     a72:	b9 01       	movw	r22, r18
     a74:	ca 01       	movw	r24, r20
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     a76:	ea 30       	cpi	r30, 0x0A	; 10
     a78:	f4 f4       	brge	.+60     	; 0xab6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.31]+0x84>
     a7a:	e0 5d       	subi	r30, 0xD0	; 208
     a7c:	d8 01       	movw	r26, r16
     a7e:	ee 93       	st	-X, r30
     a80:	8d 01       	movw	r16, r26
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:247
  } while(n);
     a82:	23 2b       	or	r18, r19
     a84:	24 2b       	or	r18, r20
     a86:	25 2b       	or	r18, r21
     a88:	79 f7       	brne	.-34     	; 0xa68 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.31]+0x36>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	80 e0       	ldi	r24, 0x00	; 0
write():
     a8e:	10 97       	sbiw	r26, 0x00	; 0
     a90:	19 f0       	breq	.+6      	; 0xa98 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.31]+0x66>
     a92:	cd 01       	movw	r24, r26
     a94:	0e 94 0c 05 	call	0xa18	; 0xa18 <Print::write(char const*) [clone .part.2] [clone .constprop.36]>
printNumber():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:250

  return write(str);
}
     a98:	a1 96       	adiw	r28, 0x21	; 33
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	f8 94       	cli
     a9e:	de bf       	out	0x3e, r29	; 62
     aa0:	0f be       	out	0x3f, r0	; 63
     aa2:	cd bf       	out	0x3d, r28	; 61
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	1f 91       	pop	r17
     aaa:	0f 91       	pop	r16
     aac:	bf 90       	pop	r11
     aae:	af 90       	pop	r10
     ab0:	9f 90       	pop	r9
     ab2:	8f 90       	pop	r8
     ab4:	08 95       	ret
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     ab6:	e9 5c       	subi	r30, 0xC9	; 201
     ab8:	e1 cf       	rjmp	.-62     	; 0xa7c <Print::printNumber(unsigned long, unsigned char) [clone .constprop.31]+0x4a>

00000aba <Print::println(char const*) [clone .constprop.33]>:
println():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:138
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
write():
     abe:	0e 94 0c 05 	call	0xa18	; 0xa18 <Print::write(char const*) [clone .part.2] [clone .constprop.36]>
     ac2:	ec 01       	movw	r28, r24
     ac4:	89 ed       	ldi	r24, 0xD9	; 217
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	0e 94 0c 05 	call	0xa18	; 0xa18 <Print::write(char const*) [clone .part.2] [clone .constprop.36]>
println():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:143
{
  size_t n = print(c);
  n += println();
  return n;
}
     acc:	8c 0f       	add	r24, r28
     ace:	9d 1f       	adc	r25, r29
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	08 95       	ret

00000ad6 <Print::printFloat(double, unsigned char) [clone .constprop.26]>:
printFloat():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:252
  } while(n);

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
     ad6:	4f 92       	push	r4
     ad8:	5f 92       	push	r5
     ada:	6f 92       	push	r6
     adc:	7f 92       	push	r7
     ade:	8f 92       	push	r8
     ae0:	9f 92       	push	r9
     ae2:	af 92       	push	r10
     ae4:	bf 92       	push	r11
     ae6:	cf 92       	push	r12
     ae8:	df 92       	push	r13
     aea:	ef 92       	push	r14
     aec:	ff 92       	push	r15
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	6b 01       	movw	r12, r22
     af6:	7c 01       	movw	r14, r24
     af8:	74 2e       	mov	r7, r20
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:256
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
     afa:	ac 01       	movw	r20, r24
     afc:	9b 01       	movw	r18, r22
     afe:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <__unordsf2>
     b02:	88 23       	and	r24, r24
     b04:	99 f0       	breq	.+38     	; 0xb2c <Print::printFloat(double, unsigned char) [clone .constprop.26]+0x56>
write():
     b06:	8c ed       	ldi	r24, 0xDC	; 220
     b08:	90 e0       	ldi	r25, 0x00	; 0
printFloat():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:295
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
     b0a:	cf 91       	pop	r28
     b0c:	1f 91       	pop	r17
     b0e:	0f 91       	pop	r16
     b10:	ff 90       	pop	r15
     b12:	ef 90       	pop	r14
     b14:	df 90       	pop	r13
     b16:	cf 90       	pop	r12
     b18:	bf 90       	pop	r11
     b1a:	af 90       	pop	r10
     b1c:	9f 90       	pop	r9
     b1e:	8f 90       	pop	r8
     b20:	7f 90       	pop	r7
     b22:	6f 90       	pop	r6
     b24:	5f 90       	pop	r5
     b26:	4f 90       	pop	r4
write():
     b28:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <Print::write(char const*) [clone .part.2] [clone .constprop.36]>
printFloat():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:257
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
     b2c:	46 01       	movw	r8, r12
     b2e:	57 01       	movw	r10, r14
     b30:	e8 94       	clt
     b32:	b7 f8       	bld	r11, 7
     b34:	2f ef       	ldi	r18, 0xFF	; 255
     b36:	3f ef       	ldi	r19, 0xFF	; 255
     b38:	4f e7       	ldi	r20, 0x7F	; 127
     b3a:	5f e7       	ldi	r21, 0x7F	; 127
     b3c:	c5 01       	movw	r24, r10
     b3e:	b4 01       	movw	r22, r8
     b40:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <__unordsf2>
     b44:	81 11       	cpse	r24, r1
     b46:	0d c0       	rjmp	.+26     	; 0xb62 <Print::printFloat(double, unsigned char) [clone .constprop.26]+0x8c>
     b48:	2f ef       	ldi	r18, 0xFF	; 255
     b4a:	3f ef       	ldi	r19, 0xFF	; 255
     b4c:	4f e7       	ldi	r20, 0x7F	; 127
     b4e:	5f e7       	ldi	r21, 0x7F	; 127
     b50:	c5 01       	movw	r24, r10
     b52:	b4 01       	movw	r22, r8
     b54:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__cmpsf2>
     b58:	18 16       	cp	r1, r24
     b5a:	1c f4       	brge	.+6      	; 0xb62 <Print::printFloat(double, unsigned char) [clone .constprop.26]+0x8c>
write():
     b5c:	80 ee       	ldi	r24, 0xE0	; 224
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	d4 cf       	rjmp	.-88     	; 0xb0a <Print::printFloat(double, unsigned char) [clone .constprop.26]+0x34>
printFloat():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:258
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     b62:	2f ef       	ldi	r18, 0xFF	; 255
     b64:	3f ef       	ldi	r19, 0xFF	; 255
     b66:	4f e7       	ldi	r20, 0x7F	; 127
     b68:	5f e4       	ldi	r21, 0x4F	; 79
     b6a:	c7 01       	movw	r24, r14
     b6c:	b6 01       	movw	r22, r12
     b6e:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__gesf2>
     b72:	18 16       	cp	r1, r24
     b74:	1c f4       	brge	.+6      	; 0xb7c <Print::printFloat(double, unsigned char) [clone .constprop.26]+0xa6>
write():
     b76:	84 ee       	ldi	r24, 0xE4	; 228
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	c7 cf       	rjmp	.-114    	; 0xb0a <Print::printFloat(double, unsigned char) [clone .constprop.26]+0x34>
printFloat():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:259
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     b7c:	2f ef       	ldi	r18, 0xFF	; 255
     b7e:	3f ef       	ldi	r19, 0xFF	; 255
     b80:	4f e7       	ldi	r20, 0x7F	; 127
     b82:	5f ec       	ldi	r21, 0xCF	; 207
     b84:	c7 01       	movw	r24, r14
     b86:	b6 01       	movw	r22, r12
     b88:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__cmpsf2>
     b8c:	87 fd       	sbrc	r24, 7
     b8e:	f3 cf       	rjmp	.-26     	; 0xb76 <Print::printFloat(double, unsigned char) [clone .constprop.26]+0xa0>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:262
  
  // Handle negative numbers
  if (number < 0.0)
     b90:	20 e0       	ldi	r18, 0x00	; 0
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	a9 01       	movw	r20, r18
     b96:	c7 01       	movw	r24, r14
     b98:	b6 01       	movw	r22, r12
     b9a:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__cmpsf2>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:254
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
     b9e:	10 e0       	ldi	r17, 0x00	; 0
     ba0:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:262
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
     ba2:	87 ff       	sbrs	r24, 7
     ba4:	0a c0       	rjmp	.+20     	; 0xbba <Print::printFloat(double, unsigned char) [clone .constprop.26]+0xe4>
print():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     ba6:	6d e2       	ldi	r22, 0x2D	; 45
     ba8:	83 ed       	ldi	r24, 0xD3	; 211
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	0e 94 00 03 	call	0x600	; 0x600 <HardwareSerial::write(unsigned char)>
     bb0:	8c 01       	movw	r16, r24
printFloat():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:265
  
  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
     number = -number;
     bb2:	f7 fa       	bst	r15, 7
     bb4:	f0 94       	com	r15
     bb6:	f7 f8       	bld	r15, 7
     bb8:	f0 94       	com	r15
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:270
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     bba:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:269
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	9f e3       	ldi	r25, 0x3F	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:270
  for (uint8_t i=0; i<digits; ++i)
     bc4:	7c 16       	cp	r7, r28
     bc6:	41 f0       	breq	.+16     	; 0xbd8 <Print::printFloat(double, unsigned char) [clone .constprop.26]+0x102>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:271
    rounding /= 10.0;
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	40 e2       	ldi	r20, 0x20	; 32
     bce:	51 e4       	ldi	r21, 0x41	; 65
     bd0:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__divsf3>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:270
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     bd4:	cf 5f       	subi	r28, 0xFF	; 255
     bd6:	f6 cf       	rjmp	.-20     	; 0xbc4 <Print::printFloat(double, unsigned char) [clone .constprop.26]+0xee>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:273
    rounding /= 10.0;
  
  number += rounding;
     bd8:	a7 01       	movw	r20, r14
     bda:	96 01       	movw	r18, r12
     bdc:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__addsf3>
     be0:	2b 01       	movw	r4, r22
     be2:	3c 01       	movw	r6, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:276

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
     be4:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <__fixunssfsi>
     be8:	4b 01       	movw	r8, r22
     bea:	5c 01       	movw	r10, r24
print():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     bec:	4a e0       	ldi	r20, 0x0A	; 10
     bee:	0e 94 19 05 	call	0xa32	; 0xa32 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.31]>
printFloat():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:278
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     bf2:	7c 01       	movw	r14, r24
     bf4:	e0 0e       	add	r14, r16
     bf6:	f1 1e       	adc	r15, r17
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:281

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
     bf8:	cc 23       	and	r28, r28
     bfa:	c1 f1       	breq	.+112    	; 0xc6c <Print::printFloat(double, unsigned char) [clone .constprop.26]+0x196>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:277
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
     bfc:	c5 01       	movw	r24, r10
     bfe:	b4 01       	movw	r22, r8
     c00:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <__floatunsisf>
     c04:	9b 01       	movw	r18, r22
     c06:	ac 01       	movw	r20, r24
     c08:	c3 01       	movw	r24, r6
     c0a:	b2 01       	movw	r22, r4
     c0c:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__subsf3>
     c10:	4b 01       	movw	r8, r22
     c12:	5c 01       	movw	r10, r24
print():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     c14:	6e e2       	ldi	r22, 0x2E	; 46
     c16:	83 ed       	ldi	r24, 0xD3	; 211
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	0e 94 00 03 	call	0x600	; 0x600 <HardwareSerial::write(unsigned char)>
printFloat():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:282
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:286
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
     c22:	c1 50       	subi	r28, 0x01	; 1
     c24:	18 f1       	brcs	.+70     	; 0xc6c <Print::printFloat(double, unsigned char) [clone .constprop.26]+0x196>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:288
  {
    remainder *= 10.0;
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	40 e2       	ldi	r20, 0x20	; 32
     c2c:	51 e4       	ldi	r21, 0x41	; 65
     c2e:	c5 01       	movw	r24, r10
     c30:	b4 01       	movw	r22, r8
     c32:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__mulsf3>
     c36:	2b 01       	movw	r4, r22
     c38:	3c 01       	movw	r6, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:289
    unsigned int toPrint = (unsigned int)(remainder);
     c3a:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <__fixunssfsi>
print():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:84
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
     c3e:	4b 01       	movw	r8, r22
     c40:	b1 2c       	mov	r11, r1
     c42:	a1 2c       	mov	r10, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     c44:	4a e0       	ldi	r20, 0x0A	; 10
     c46:	c5 01       	movw	r24, r10
     c48:	b4 01       	movw	r22, r8
     c4a:	0e 94 19 05 	call	0xa32	; 0xa32 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.31]>
printFloat():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:290
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)(remainder);
    n += print(toPrint);
     c4e:	e8 0e       	add	r14, r24
     c50:	f9 1e       	adc	r15, r25
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:291
    remainder -= toPrint; 
     c52:	c5 01       	movw	r24, r10
     c54:	b4 01       	movw	r22, r8
     c56:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <__floatunsisf>
     c5a:	9b 01       	movw	r18, r22
     c5c:	ac 01       	movw	r20, r24
     c5e:	c3 01       	movw	r24, r6
     c60:	b2 01       	movw	r22, r4
     c62:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__subsf3>
     c66:	4b 01       	movw	r8, r22
     c68:	5c 01       	movw	r10, r24
     c6a:	db cf       	rjmp	.-74     	; 0xc22 <Print::printFloat(double, unsigned char) [clone .constprop.26]+0x14c>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:295
  } 
  
  return n;
}
     c6c:	c7 01       	movw	r24, r14
     c6e:	cf 91       	pop	r28
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	cf 90       	pop	r12
     c7c:	bf 90       	pop	r11
     c7e:	af 90       	pop	r10
     c80:	9f 90       	pop	r9
     c82:	8f 90       	pop	r8
     c84:	7f 90       	pop	r7
     c86:	6f 90       	pop	r6
     c88:	5f 90       	pop	r5
     c8a:	4f 90       	pop	r4
     c8c:	08 95       	ret

00000c8e <Print::println(double, int) [clone .constprop.25]>:
println():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:187
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
print():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:111
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
     c92:	0e 94 6b 05 	call	0xad6	; 0xad6 <Print::printFloat(double, unsigned char) [clone .constprop.26]>
     c96:	ec 01       	movw	r28, r24
write():
     c98:	89 ed       	ldi	r24, 0xD9	; 217
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	0e 94 0c 05 	call	0xa18	; 0xa18 <Print::write(char const*) [clone .part.2] [clone .constprop.36]>
println():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:192
size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  return n;
}
     ca0:	8c 0f       	add	r24, r28
     ca2:	9d 1f       	adc	r25, r29
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	08 95       	ret

00000caa <Print::print(char const*) [clone .constprop.22]>:
write():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:62
size_t Print::print(const String &s)
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
     caa:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <Print::write(char const*) [clone .part.2] [clone .constprop.36]>

00000cae <Print::println(long, int) [clone .constprop.19]>:
println():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:173
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(long num, int base)
     cae:	cf 92       	push	r12
     cb0:	df 92       	push	r13
     cb2:	ef 92       	push	r14
     cb4:	ff 92       	push	r15
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	6b 01       	movw	r12, r22
     cbc:	7c 01       	movw	r14, r24
print():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:92
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
     cbe:	f7 fe       	sbrs	r15, 7
     cc0:	1f c0       	rjmp	.+62     	; 0xd00 <Print::println(long, int) [clone .constprop.19]+0x52>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     cc2:	6d e2       	ldi	r22, 0x2D	; 45
     cc4:	83 ed       	ldi	r24, 0xD3	; 211
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	0e 94 00 03 	call	0x600	; 0x600 <HardwareSerial::write(unsigned char)>
     ccc:	ec 01       	movw	r28, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:94
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
     cce:	66 27       	eor	r22, r22
     cd0:	77 27       	eor	r23, r23
     cd2:	cb 01       	movw	r24, r22
     cd4:	6c 19       	sub	r22, r12
     cd6:	7d 09       	sbc	r23, r13
     cd8:	8e 09       	sbc	r24, r14
     cda:	9f 09       	sbc	r25, r15
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:95
      return printNumber(n, 10) + t;
     cdc:	4a e0       	ldi	r20, 0x0A	; 10
     cde:	0e 94 19 05 	call	0xa32	; 0xa32 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.31]>
     ce2:	c8 0f       	add	r28, r24
     ce4:	d9 1f       	adc	r29, r25
write():
     ce6:	89 ed       	ldi	r24, 0xD9	; 217
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	0e 94 0c 05 	call	0xa18	; 0xa18 <Print::write(char const*) [clone .part.2] [clone .constprop.36]>
println():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:178
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     cee:	8c 0f       	add	r24, r28
     cf0:	9d 1f       	adc	r25, r29
     cf2:	df 91       	pop	r29
     cf4:	cf 91       	pop	r28
     cf6:	ff 90       	pop	r15
     cf8:	ef 90       	pop	r14
     cfa:	df 90       	pop	r13
     cfc:	cf 90       	pop	r12
     cfe:	08 95       	ret
print():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:97
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     d00:	4a e0       	ldi	r20, 0x0A	; 10
     d02:	0e 94 19 05 	call	0xa32	; 0xa32 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.31]>
     d06:	ec 01       	movw	r28, r24
     d08:	ee cf       	rjmp	.-36     	; 0xce6 <Print::println(long, int) [clone .constprop.19]+0x38>

00000d0a <HT1621::print(char const*, bool) [clone .constprop.16]>:
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:287
		setdecimalseparator(0); // or clear the decimal separator

	update();
}

void HT1621::print(const char* str, bool leftPadded){
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	ec 01       	movw	r28, r24
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:288
	int chars = strlen(str);
     d10:	fc 01       	movw	r30, r24
     d12:	01 90       	ld	r0, Z+
     d14:	00 20       	and	r0, r0
     d16:	e9 f7       	brne	.-6      	; 0xd12 <HT1621::print(char const*, bool) [clone .constprop.16]+0x8>
     d18:	31 97       	sbiw	r30, 0x01	; 1
     d1a:	af 01       	movw	r20, r30
     d1c:	48 1b       	sub	r20, r24
     d1e:	59 0b       	sbc	r21, r25
     d20:	a6 e8       	ldi	r26, 0x86	; 134
     d22:	b2 e0       	ldi	r27, 0x02	; 2
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:291
	int padding = 6 - chars;

	for(int i = 0; i < 6; i++){
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	20 e0       	ldi	r18, 0x00	; 0
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:292
		_buffer[i] &= 0x80; // mask the first bit, used by batter and decimal point
     d28:	9c 91       	ld	r25, X
     d2a:	90 78       	andi	r25, 0x80	; 128
     d2c:	9d 93       	st	X+, r25
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:295
		char character = leftPadded
				 		 ? i < padding ? ' ' : str[i - padding]
				 		 : i >= chars ? ' ' : str[i];
     d2e:	e0 e2       	ldi	r30, 0x20	; 32
     d30:	24 17       	cp	r18, r20
     d32:	35 07       	cpc	r19, r21
     d34:	24 f4       	brge	.+8      	; 0xd3e <HT1621::print(char const*, bool) [clone .constprop.16]+0x34>
     d36:	fe 01       	movw	r30, r28
     d38:	e2 0f       	add	r30, r18
     d3a:	f3 1f       	adc	r31, r19
     d3c:	e0 81       	ld	r30, Z
     d3e:	ea 52       	subi	r30, 0x2A	; 42
charToSegBits():
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:320
	// the last three are for the decimal point
	_buffer[6-decimaldigits] |= 0x80;
}

char HT1621::charToSegBits(char character) {
	switch (character) {
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	e3 35       	cpi	r30, 0x53	; 83
     d44:	20 f4       	brcc	.+8      	; 0xd4e <HT1621::print(char const*, bool) [clone .constprop.16]+0x44>
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	e4 59       	subi	r30, 0x94	; 148
     d4a:	ff 4f       	sbci	r31, 0xFF	; 255
     d4c:	80 81       	ld	r24, Z
print():
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:296
	for(int i = 0; i < 6; i++){
		_buffer[i] &= 0x80; // mask the first bit, used by batter and decimal point
		char character = leftPadded
				 		 ? i < padding ? ' ' : str[i - padding]
				 		 : i >= chars ? ' ' : str[i];
		_buffer[i] |= charToSegBits(character);
     d4e:	fd 01       	movw	r30, r26
     d50:	31 97       	sbiw	r30, 0x01	; 1
     d52:	98 2b       	or	r25, r24
     d54:	90 83       	st	Z, r25
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:291

void HT1621::print(const char* str, bool leftPadded){
	int chars = strlen(str);
	int padding = 6 - chars;

	for(int i = 0; i < 6; i++){
     d56:	2f 5f       	subi	r18, 0xFF	; 255
     d58:	3f 4f       	sbci	r19, 0xFF	; 255
     d5a:	26 30       	cpi	r18, 0x06	; 6
     d5c:	31 05       	cpc	r19, r1
     d5e:	21 f7       	brne	.-56     	; 0xd28 <HT1621::print(char const*, bool) [clone .constprop.16]+0x1e>
setdecimalseparator():
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:305
	update();
}

void HT1621::setdecimalseparator(int decimaldigits) {
	// zero out the eight bit
	_buffer[3] &= 0x7F;
     d60:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <lcd+0xc>
     d64:	8f 77       	andi	r24, 0x7F	; 127
     d66:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <lcd+0xc>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:306
	_buffer[4] &= 0x7F;
     d6a:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <lcd+0xd>
     d6e:	8f 77       	andi	r24, 0x7F	; 127
     d70:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <lcd+0xd>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:307
	_buffer[5] &= 0x7F;
     d74:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <lcd+0xe>
     d78:	8f 77       	andi	r24, 0x7F	; 127
     d7a:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <lcd+0xe>
print():
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:301
		_buffer[i] |= charToSegBits(character);
	}

	setdecimalseparator(0); // Hide decimal point
	update();
}
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:300
				 		 : i >= chars ? ' ' : str[i];
		_buffer[i] |= charToSegBits(character);
	}

	setdecimalseparator(0); // Hide decimal point
	update();
     d82:	0c 94 9f 01 	jmp	0x33e	; 0x33e <HT1621::update() [clone .constprop.40]>

00000d86 <HX711::~HX711()>:
operator delete():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/new.cpp:88
void * operator new[](std::size_t size, void *place) noexcept {
  return operator new(size, place);
}

[[gnu::weak]] void operator delete(void * ptr) noexcept {
  free(ptr);
     d86:	0c 94 db 11 	jmp	0x23b6	; 0x23b6 <free>

00000d8a <__vector_9>:
__vector_9():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     d8a:	1f 92       	push	r1
     d8c:	0f 92       	push	r0
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	0f 92       	push	r0
     d92:	11 24       	eor	r1, r1
     d94:	2f 93       	push	r18
     d96:	3f 93       	push	r19
     d98:	8f 93       	push	r24
     d9a:	9f 93       	push	r25
     d9c:	af 93       	push	r26
     d9e:	bf 93       	push	r27
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
     da0:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <timer0_millis>
     da4:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <timer0_millis+0x1>
     da8:	a0 91 cd 01 	lds	r26, 0x01CD	; 0x8001cd <timer0_millis+0x2>
     dac:	b0 91 ce 01 	lds	r27, 0x01CE	; 0x8001ce <timer0_millis+0x3>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
     db0:	30 91 ca 01 	lds	r19, 0x01CA	; 0x8001ca <timer0_fract>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
     db4:	26 e0       	ldi	r18, 0x06	; 6
     db6:	23 0f       	add	r18, r19
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
     db8:	2d 37       	cpi	r18, 0x7D	; 125
     dba:	68 f1       	brcs	.+90     	; 0xe16 <__vector_9+0x8c>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
     dbc:	29 e8       	ldi	r18, 0x89	; 137
     dbe:	23 0f       	add	r18, r19
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
     dc0:	03 96       	adiw	r24, 0x03	; 3
     dc2:	a1 1d       	adc	r26, r1
     dc4:	b1 1d       	adc	r27, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
     dc6:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <timer0_fract>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
     dca:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <timer0_millis>
     dce:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <timer0_millis+0x1>
     dd2:	a0 93 cd 01 	sts	0x01CD, r26	; 0x8001cd <timer0_millis+0x2>
     dd6:	b0 93 ce 01 	sts	0x01CE, r27	; 0x8001ce <timer0_millis+0x3>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
     dda:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <timer0_overflow_count>
     dde:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <timer0_overflow_count+0x1>
     de2:	a0 91 d1 01 	lds	r26, 0x01D1	; 0x8001d1 <timer0_overflow_count+0x2>
     de6:	b0 91 d2 01 	lds	r27, 0x01D2	; 0x8001d2 <timer0_overflow_count+0x3>
     dea:	01 96       	adiw	r24, 0x01	; 1
     dec:	a1 1d       	adc	r26, r1
     dee:	b1 1d       	adc	r27, r1
     df0:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <timer0_overflow_count>
     df4:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <timer0_overflow_count+0x1>
     df8:	a0 93 d1 01 	sts	0x01D1, r26	; 0x8001d1 <timer0_overflow_count+0x2>
     dfc:	b0 93 d2 01 	sts	0x01D2, r27	; 0x8001d2 <timer0_overflow_count+0x3>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:213
#endif
}
     e00:	bf 91       	pop	r27
     e02:	af 91       	pop	r26
     e04:	9f 91       	pop	r25
     e06:	8f 91       	pop	r24
     e08:	3f 91       	pop	r19
     e0a:	2f 91       	pop	r18
     e0c:	0f 90       	pop	r0
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	0f 90       	pop	r0
     e12:	1f 90       	pop	r1
     e14:	18 95       	reti
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
     e16:	02 96       	adiw	r24, 0x02	; 2
     e18:	a1 1d       	adc	r26, r1
     e1a:	b1 1d       	adc	r27, r1
     e1c:	d4 cf       	rjmp	.-88     	; 0xdc6 <__vector_9+0x3c>

00000e1e <__vector_2>:
__vector_2():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/WInterrupts.c:462

// ATmega8, ATmega8515, ATmega8535, ATmega16, ATmega32, ATmega162
#elif defined(__AVR_ATmega8515__) || defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__) \
|| defined(__AVR_ATmega32__)      || defined(__AVR_ATmega162__)
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
  IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
     e1e:	1f 92       	push	r1
     e20:	0f 92       	push	r0
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	0f 92       	push	r0
     e26:	11 24       	eor	r1, r1
     e28:	2f 93       	push	r18
     e2a:	3f 93       	push	r19
     e2c:	4f 93       	push	r20
     e2e:	5f 93       	push	r21
     e30:	6f 93       	push	r22
     e32:	7f 93       	push	r23
     e34:	8f 93       	push	r24
     e36:	9f 93       	push	r25
     e38:	af 93       	push	r26
     e3a:	bf 93       	push	r27
     e3c:	ef 93       	push	r30
     e3e:	ff 93       	push	r31
     e40:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     e44:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     e48:	09 95       	icall
     e4a:	ff 91       	pop	r31
     e4c:	ef 91       	pop	r30
     e4e:	bf 91       	pop	r27
     e50:	af 91       	pop	r26
     e52:	9f 91       	pop	r25
     e54:	8f 91       	pop	r24
     e56:	7f 91       	pop	r23
     e58:	6f 91       	pop	r22
     e5a:	5f 91       	pop	r21
     e5c:	4f 91       	pop	r20
     e5e:	3f 91       	pop	r19
     e60:	2f 91       	pop	r18
     e62:	0f 90       	pop	r0
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	0f 90       	pop	r0
     e68:	1f 90       	pop	r1
     e6a:	18 95       	reti

00000e6c <__vector_1>:
__vector_1():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/WInterrupts.c:461
  IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

// ATmega8, ATmega8515, ATmega8535, ATmega16, ATmega32, ATmega162
#elif defined(__AVR_ATmega8515__) || defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__) \
|| defined(__AVR_ATmega32__)      || defined(__AVR_ATmega162__)
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
     e6c:	1f 92       	push	r1
     e6e:	0f 92       	push	r0
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	0f 92       	push	r0
     e74:	11 24       	eor	r1, r1
     e76:	2f 93       	push	r18
     e78:	3f 93       	push	r19
     e7a:	4f 93       	push	r20
     e7c:	5f 93       	push	r21
     e7e:	6f 93       	push	r22
     e80:	7f 93       	push	r23
     e82:	8f 93       	push	r24
     e84:	9f 93       	push	r25
     e86:	af 93       	push	r26
     e88:	bf 93       	push	r27
     e8a:	ef 93       	push	r30
     e8c:	ff 93       	push	r31
     e8e:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     e92:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     e96:	09 95       	icall
     e98:	ff 91       	pop	r31
     e9a:	ef 91       	pop	r30
     e9c:	bf 91       	pop	r27
     e9e:	af 91       	pop	r26
     ea0:	9f 91       	pop	r25
     ea2:	8f 91       	pop	r24
     ea4:	7f 91       	pop	r23
     ea6:	6f 91       	pop	r22
     ea8:	5f 91       	pop	r21
     eaa:	4f 91       	pop	r20
     eac:	3f 91       	pop	r19
     eae:	2f 91       	pop	r18
     eb0:	0f 90       	pop	r0
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	0f 90       	pop	r0
     eb6:	1f 90       	pop	r1
     eb8:	18 95       	reti

00000eba <__vector_12>:
__vector_12():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     eba:	1f 92       	push	r1
     ebc:	0f 92       	push	r0
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	0f 92       	push	r0
     ec2:	11 24       	eor	r1, r1
     ec4:	2f 93       	push	r18
     ec6:	3f 93       	push	r19
     ec8:	4f 93       	push	r20
     eca:	5f 93       	push	r21
     ecc:	6f 93       	push	r22
     ece:	7f 93       	push	r23
     ed0:	8f 93       	push	r24
     ed2:	9f 93       	push	r25
     ed4:	af 93       	push	r26
     ed6:	bf 93       	push	r27
     ed8:	ef 93       	push	r30
     eda:	ff 93       	push	r31
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
     edc:	83 ed       	ldi	r24, 0xD3	; 211
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	0e 94 df 02 	call	0x5be	; 0x5be <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
     ee4:	ff 91       	pop	r31
     ee6:	ef 91       	pop	r30
     ee8:	bf 91       	pop	r27
     eea:	af 91       	pop	r26
     eec:	9f 91       	pop	r25
     eee:	8f 91       	pop	r24
     ef0:	7f 91       	pop	r23
     ef2:	6f 91       	pop	r22
     ef4:	5f 91       	pop	r21
     ef6:	4f 91       	pop	r20
     ef8:	3f 91       	pop	r19
     efa:	2f 91       	pop	r18
     efc:	0f 90       	pop	r0
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	0f 90       	pop	r0
     f02:	1f 90       	pop	r1
     f04:	18 95       	reti

00000f06 <__vector_11>:
__vector_11():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     f06:	1f 92       	push	r1
     f08:	0f 92       	push	r0
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	0f 92       	push	r0
     f0e:	11 24       	eor	r1, r1
     f10:	2f 93       	push	r18
     f12:	8f 93       	push	r24
     f14:	9f 93       	push	r25
     f16:	ef 93       	push	r30
     f18:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     f1a:	e0 91 e3 01 	lds	r30, 0x01E3	; 0x8001e3 <Serial+0x10>
     f1e:	f0 91 e4 01 	lds	r31, 0x01E4	; 0x8001e4 <Serial+0x11>
     f22:	80 81       	ld	r24, Z
     f24:	e0 91 e9 01 	lds	r30, 0x01E9	; 0x8001e9 <Serial+0x16>
     f28:	f0 91 ea 01 	lds	r31, 0x01EA	; 0x8001ea <Serial+0x17>
     f2c:	82 fd       	sbrc	r24, 2
     f2e:	1b c0       	rjmp	.+54     	; 0xf66 <__vector_11+0x60>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     f30:	90 81       	ld	r25, Z
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     f32:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <Serial+0x19>
     f36:	8f 5f       	subi	r24, 0xFF	; 255
     f38:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     f3a:	20 91 ed 01 	lds	r18, 0x01ED	; 0x8001ed <Serial+0x1a>
     f3e:	82 17       	cp	r24, r18
     f40:	41 f0       	breq	.+16     	; 0xf52 <__vector_11+0x4c>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
     f42:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <Serial+0x19>
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	ed 52       	subi	r30, 0x2D	; 45
     f4a:	fe 4f       	sbci	r31, 0xFE	; 254
     f4c:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
     f4e:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <Serial+0x19>
__vector_11():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
     f52:	ff 91       	pop	r31
     f54:	ef 91       	pop	r30
     f56:	9f 91       	pop	r25
     f58:	8f 91       	pop	r24
     f5a:	2f 91       	pop	r18
     f5c:	0f 90       	pop	r0
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	0f 90       	pop	r0
     f62:	1f 90       	pop	r1
     f64:	18 95       	reti
_rx_complete_irq():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     f66:	80 81       	ld	r24, Z
     f68:	f4 cf       	rjmp	.-24     	; 0xf52 <__vector_11+0x4c>

00000f6a <global constructors keyed to 65535_0_LoadCellmain.ino.cpp.o.2052>:
_GLOBAL__I_65535_0_LoadCellmain.ino.cpp.o.2052():
     f6a:	e3 ed       	ldi	r30, 0xD3	; 211
     f6c:	f1 e0       	ldi	r31, 0x01	; 1
     f6e:	13 82       	std	Z+3, r1	; 0x03
     f70:	12 82       	std	Z+2, r1	; 0x02
     f72:	88 ee       	ldi	r24, 0xE8	; 232
     f74:	93 e0       	ldi	r25, 0x03	; 3
     f76:	a0 e0       	ldi	r26, 0x00	; 0
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	84 83       	std	Z+4, r24	; 0x04
     f7c:	95 83       	std	Z+5, r25	; 0x05
     f7e:	a6 83       	std	Z+6, r26	; 0x06
     f80:	b7 83       	std	Z+7, r27	; 0x07
     f82:	83 ec       	ldi	r24, 0xC3	; 195
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	91 83       	std	Z+1, r25	; 0x01
     f88:	80 83       	st	Z, r24
     f8a:	80 e4       	ldi	r24, 0x40	; 64
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	95 87       	std	Z+13, r25	; 0x0d
     f90:	84 87       	std	Z+12, r24	; 0x0c
     f92:	29 e2       	ldi	r18, 0x29	; 41
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	37 87       	std	Z+15, r19	; 0x0f
     f98:	26 87       	std	Z+14, r18	; 0x0e
     f9a:	2b e2       	ldi	r18, 0x2B	; 43
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	31 8b       	std	Z+17, r19	; 0x11
     fa0:	20 8b       	std	Z+16, r18	; 0x10
     fa2:	2a e2       	ldi	r18, 0x2A	; 42
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	33 8b       	std	Z+19, r19	; 0x13
     fa8:	22 8b       	std	Z+18, r18	; 0x12
     faa:	95 8b       	std	Z+21, r25	; 0x15
     fac:	84 8b       	std	Z+20, r24	; 0x14
     fae:	8c e2       	ldi	r24, 0x2C	; 44
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	97 8b       	std	Z+23, r25	; 0x17
     fb4:	86 8b       	std	Z+22, r24	; 0x16
     fb6:	11 8e       	std	Z+25, r1	; 0x19
     fb8:	12 8e       	std	Z+26, r1	; 0x1a
     fba:	13 8e       	std	Z+27, r1	; 0x1b
     fbc:	14 8e       	std	Z+28, r1	; 0x1c
     fbe:	ed e7       	ldi	r30, 0x7D	; 125
     fc0:	f2 e0       	ldi	r31, 0x02	; 2
     fc2:	11 86       	std	Z+9, r1	; 0x09
     fc4:	12 86       	std	Z+10, r1	; 0x0a
     fc6:	13 86       	std	Z+11, r1	; 0x0b
     fc8:	14 86       	std	Z+12, r1	; 0x0c
     fca:	15 86       	std	Z+13, r1	; 0x0d
     fcc:	16 86       	std	Z+14, r1	; 0x0e
     fce:	17 86       	std	Z+15, r1	; 0x0f
     fd0:	e0 e7       	ldi	r30, 0x70	; 112
     fd2:	f2 e0       	ldi	r31, 0x02	; 2
     fd4:	85 ed       	ldi	r24, 0xD5	; 213
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	91 83       	std	Z+1, r25	; 0x01
     fda:	80 83       	st	Z, r24
     fdc:	15 82       	std	Z+5, r1	; 0x05
     fde:	16 82       	std	Z+6, r1	; 0x06
     fe0:	17 82       	std	Z+7, r1	; 0x07
     fe2:	10 86       	std	Z+8, r1	; 0x08
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	a0 e8       	ldi	r26, 0x80	; 128
     fea:	bf e3       	ldi	r27, 0x3F	; 63
     fec:	81 87       	std	Z+9, r24	; 0x09
     fee:	92 87       	std	Z+10, r25	; 0x0a
     ff0:	a3 87       	std	Z+11, r26	; 0x0b
     ff2:	b4 87       	std	Z+12, r27	; 0x0c
     ff4:	08 95       	ret

00000ff6 <main>:
init():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
     ff6:	78 94       	sei
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:966
#if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  // CPU specific: different values for the ATmega64/128
  TCCR0 |= _BV(WGM01) | _BV(WGM00) | _BV(CS02);
#elif defined(TCCR0) && defined(CS01) && defined(CS00)
  // This combination is for the ATmega8535, ATmega8, ATmega16, ATmega32, ATmega8515, ATmega162
  TCCR0 |= _BV(CS01) | _BV(CS00);
     ff8:	83 b7       	in	r24, 0x33	; 51
     ffa:	83 60       	ori	r24, 0x03	; 3
     ffc:	83 bf       	out	0x33, r24	; 51
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:968
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
     ffe:	83 b7       	in	r24, 0x33	; 51
    1000:	88 64       	ori	r24, 0x48	; 72
    1002:	83 bf       	out	0x33, r24	; 51
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:982
  #error Timer 0 prescale factor 64 not set correctly
#endif

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
    1004:	89 b7       	in	r24, 0x39	; 57
    1006:	81 60       	ori	r24, 0x01	; 1
    1008:	89 bf       	out	0x39, r24	; 57
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    100a:	c2 e0       	ldi	r28, 0x02	; 2
    100c:	ce bd       	out	0x2e, r28	; 46
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    100e:	8e b5       	in	r24, 0x2e	; 46
    1010:	81 60       	ori	r24, 0x01	; 1
    1012:	8e bd       	out	0x2e, r24	; 46
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    1014:	8f b5       	in	r24, 0x2f	; 47
    1016:	81 60       	ori	r24, 0x01	; 1
    1018:	8f bd       	out	0x2f, r24	; 47
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1011
#endif

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
    101a:	85 b5       	in	r24, 0x25	; 37
    101c:	84 60       	ori	r24, 0x04	; 4
    101e:	85 bd       	out	0x25, r24	; 37
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1020
  TCCR2A |= _BV(CS22);
#endif

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
    1020:	85 b5       	in	r24, 0x25	; 37
    1022:	80 64       	ori	r24, 0x40	; 64
    1024:	85 bd       	out	0x25, r24	; 37
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    1026:	d6 e8       	ldi	r29, 0x86	; 134
    1028:	d6 b9       	out	0x06, r29	; 6
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1068

  // The bootloader connects pins 0 and 1 to the USART; disconnect them
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
    102a:	1a b8       	out	0x0a, r1	; 10
setup():
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:48
//Buzzer
constexpr auto BuzzerPin = 9;
void setup() {

//Pins
pinMode(UnitPin,INPUT);
    102c:	60 e0       	ldi	r22, 0x00	; 0
    102e:	85 e0       	ldi	r24, 0x05	; 5
    1030:	0e 94 d6 01 	call	0x3ac	; 0x3ac <pinMode>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:49
pinMode(Power_and_TarePin,INPUT);
    1034:	60 e0       	ldi	r22, 0x00	; 0
    1036:	8b e0       	ldi	r24, 0x0B	; 11
    1038:	0e 94 d6 01 	call	0x3ac	; 0x3ac <pinMode>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:51

pinMode(BuzzerPin,OUTPUT);
    103c:	61 e0       	ldi	r22, 0x01	; 1
    103e:	89 e0       	ldi	r24, 0x09	; 9
    1040:	0e 94 d6 01 	call	0x3ac	; 0x3ac <pinMode>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:53

digitalWrite(BuzzerPin,HIGH);
    1044:	61 e0       	ldi	r22, 0x01	; 1
    1046:	89 e0       	ldi	r24, 0x09	; 9
    1048:	0e 94 21 01 	call	0x242	; 0x242 <digitalWrite>
attachInterrupt():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/WInterrupts.c:66

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode)
{
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS)
  {
    intFunc[interruptNum] = userFunc;
    104c:	89 e2       	ldi	r24, 0x29	; 41
    104e:	94 e0       	ldi	r25, 0x04	; 4
    1050:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    1054:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/WInterrupts.c:193
        case 0:
          MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
          GICR |= (1 << INT0);
          break;
        case 1:
          MCUCR = (MCUCR & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    1058:	85 b7       	in	r24, 0x35	; 53
    105a:	83 7f       	andi	r24, 0xF3	; 243
    105c:	84 60       	ori	r24, 0x04	; 4
    105e:	85 bf       	out	0x35, r24	; 53
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/WInterrupts.c:194
          GICR |= (1 << INT1);
    1060:	8b b7       	in	r24, 0x3b	; 59
    1062:	80 68       	ori	r24, 0x80	; 128
    1064:	8b bf       	out	0x3b, r24	; 59
begin():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1066:	e0 91 e3 01 	lds	r30, 0x01E3	; 0x8001e3 <Serial+0x10>
    106a:	f0 91 e4 01 	lds	r31, 0x01E4	; 0x8001e4 <Serial+0x11>
    106e:	c0 83       	st	Z, r28
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1070:	e0 91 df 01 	lds	r30, 0x01DF	; 0x8001df <Serial+0xc>
    1074:	f0 91 e0 01 	lds	r31, 0x01E0	; 0x8001e0 <Serial+0xd>
    1078:	10 82       	st	Z, r1
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    107a:	e0 91 e1 01 	lds	r30, 0x01E1	; 0x8001e1 <Serial+0xe>
    107e:	f0 91 e2 01 	lds	r31, 0x01E2	; 0x8001e2 <Serial+0xf>
    1082:	87 e6       	ldi	r24, 0x67	; 103
    1084:	80 83       	st	Z, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    1086:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <Serial+0x18>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    108a:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <Serial+0x14>
    108e:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <Serial+0x15>
    1092:	d0 83       	st	Z, r29
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    1094:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <Serial+0x12>
    1098:	f0 91 e6 01 	lds	r31, 0x01E6	; 0x8001e6 <Serial+0x13>
    109c:	80 81       	ld	r24, Z
    109e:	88 69       	ori	r24, 0x98	; 152
    10a0:	80 83       	st	Z, r24
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    10a2:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <Serial+0x12>
    10a6:	f0 91 e6 01 	lds	r31, 0x01E6	; 0x8001e6 <Serial+0x13>
    10aa:	80 81       	ld	r24, Z
    10ac:	8f 7d       	andi	r24, 0xDF	; 223
    10ae:	80 83       	st	Z, r24
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:61
	config();
}

void HT1621::begin(int cs_p, int wr_p, int data_p)
{
	pinMode(cs_p, OUTPUT);
    10b0:	61 e0       	ldi	r22, 0x01	; 1
    10b2:	83 e0       	ldi	r24, 0x03	; 3
    10b4:	0e 94 d6 01 	call	0x3ac	; 0x3ac <pinMode>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:62
	pinMode(wr_p, OUTPUT);
    10b8:	61 e0       	ldi	r22, 0x01	; 1
    10ba:	82 e0       	ldi	r24, 0x02	; 2
    10bc:	0e 94 d6 01 	call	0x3ac	; 0x3ac <pinMode>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:63
	pinMode(data_p, OUTPUT);
    10c0:	61 e0       	ldi	r22, 0x01	; 1
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	0e 94 d6 01 	call	0x3ac	; 0x3ac <pinMode>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:64
	_cs_p=cs_p;
    10c8:	83 e0       	ldi	r24, 0x03	; 3
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <lcd+0x1>
    10d0:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <lcd>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:65
	_wr_p=wr_p;
    10d4:	82 e0       	ldi	r24, 0x02	; 2
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <lcd+0x3>
    10dc:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <lcd+0x2>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:66
	_data_p=data_p;
    10e0:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <lcd+0x5>
    10e4:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <lcd+0x4>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:67
	_backlight_en = false;
    10e8:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <lcd+0x8>
config():
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:140
	digitalWrite(_cs_p, HIGH);
}

void HT1621::config()
{
	wrCMD(BIAS);
    10ec:	82 e5       	ldi	r24, 0x52	; 82
    10ee:	0e 94 bd 01 	call	0x37a	; 0x37a <HT1621::wrCMD(unsigned char) [clone .constprop.45]>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:141
	wrCMD(RC256);
    10f2:	80 e3       	ldi	r24, 0x30	; 48
    10f4:	0e 94 bd 01 	call	0x37a	; 0x37a <HT1621::wrCMD(unsigned char) [clone .constprop.45]>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:142
	wrCMD(SYSDIS);
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	0e 94 bd 01 	call	0x37a	; 0x37a <HT1621::wrCMD(unsigned char) [clone .constprop.45]>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:143
	wrCMD(WDTDIS1);
    10fe:	8a e0       	ldi	r24, 0x0A	; 10
    1100:	0e 94 bd 01 	call	0x37a	; 0x37a <HT1621::wrCMD(unsigned char) [clone .constprop.45]>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:144
	wrCMD(SYSEN);
    1104:	82 e0       	ldi	r24, 0x02	; 2
    1106:	0e 94 bd 01 	call	0x37a	; 0x37a <HT1621::wrCMD(unsigned char) [clone .constprop.45]>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:145
	wrCMD(LCDON);
    110a:	86 e0       	ldi	r24, 0x06	; 6
    110c:	0e 94 bd 01 	call	0x37a	; 0x37a <HT1621::wrCMD(unsigned char) [clone .constprop.45]>
setup():
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:60
//ISRs
attachInterrupt(digitalPinToInterrupt(Power_and_TarePin), checkPowerKey, CHANGE);

  Serial.begin(9600);
 lcd.begin(LCD_CS_PIN, LCD_WR_PIN, LCD_DATA_PIN);
 lcd.clear();
    1110:	0e 94 94 01 	call	0x328	; 0x328 <HT1621::clear() [clone .constprop.46]>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:61
 lcd.print("hpi");
    1114:	88 ee       	ldi	r24, 0xE8	; 232
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 85 06 	call	0xd0a	; 0xd0a <HT1621::print(char const*, bool) [clone .constprop.16]>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:62
 delay(250);
    111c:	6a ef       	ldi	r22, 0xFA	; 250
    111e:	70 e0       	ldi	r23, 0x00	; 0
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	0e 94 2d 02 	call	0x45a	; 0x45a <delay>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:63
 lcd.clear();
    1128:	0e 94 94 01 	call	0x328	; 0x328 <HT1621::clear() [clone .constprop.46]>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:64
 lcd.print("v 1.0.0");
    112c:	8c ee       	ldi	r24, 0xEC	; 236
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 85 06 	call	0xd0a	; 0xd0a <HT1621::print(char const*, bool) [clone .constprop.16]>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:65
delay(250);
    1134:	6a ef       	ldi	r22, 0xFA	; 250
    1136:	70 e0       	ldi	r23, 0x00	; 0
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	0e 94 2d 02 	call	0x45a	; 0x45a <delay>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:66
 lcd.clear();
    1140:	0e 94 94 01 	call	0x328	; 0x328 <HT1621::clear() [clone .constprop.46]>
begin():
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:79

HX711::~HX711() {
}

void HX711::begin(byte dout, byte pd_sck, byte gain) {
	PD_SCK = pd_sck;
    1144:	83 e0       	ldi	r24, 0x03	; 3
    1146:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <scale+0x2>
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:80
	DOUT = dout;
    114a:	c0 93 73 02 	sts	0x0273, r28	; 0x800273 <scale+0x3>
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:82

	pinMode(PD_SCK, OUTPUT);
    114e:	61 e0       	ldi	r22, 0x01	; 1
    1150:	0e 94 d6 01 	call	0x3ac	; 0x3ac <pinMode>
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:83
	pinMode(DOUT, DOUT_MODE);
    1154:	60 e0       	ldi	r22, 0x00	; 0
    1156:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <scale+0x3>
    115a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <pinMode>
set_gain():
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:95
}

void HX711::set_gain(byte gain) {
	switch (gain) {
		case 128:		// channel A, gain factor 128
			GAIN = 1;
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <scale+0x4>
setup():
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:70
  scale.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN); 

//#ifdef DEBUG
  Serial.println("HX711 Demo");
    1164:	84 ef       	ldi	r24, 0xF4	; 244
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	0e 94 5d 05 	call	0xaba	; 0xaba <Print::println(char const*) [clone .constprop.33]>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:71
  Serial.println("Initializing the scale");
    116c:	8f ef       	ldi	r24, 0xFF	; 255
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0e 94 5d 05 	call	0xaba	; 0xaba <Print::println(char const*) [clone .constprop.33]>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:73

  Serial.println("Before setting up the scale:");
    1174:	86 e1       	ldi	r24, 0x16	; 22
    1176:	91 e0       	ldi	r25, 0x01	; 1
    1178:	0e 94 5d 05 	call	0xaba	; 0xaba <Print::println(char const*) [clone .constprop.33]>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:74
  Serial.print("read: \t\t");
    117c:	83 e3       	ldi	r24, 0x33	; 51
    117e:	91 e0       	ldi	r25, 0x01	; 1
    1180:	0e 94 55 06 	call	0xcaa	; 0xcaa <Print::print(char const*) [clone .constprop.22]>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:75
  Serial.println(scale.read());      // print a raw reading from the ADC
    1184:	0e 94 91 03 	call	0x722	; 0x722 <HX711::read() [clone .constprop.54]>
    1188:	0e 94 57 06 	call	0xcae	; 0xcae <Print::println(long, int) [clone .constprop.19]>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:77

  Serial.print("read average: \t\t");
    118c:	8c e3       	ldi	r24, 0x3C	; 60
    118e:	91 e0       	ldi	r25, 0x01	; 1
    1190:	0e 94 55 06 	call	0xcaa	; 0xcaa <Print::print(char const*) [clone .constprop.22]>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:78
  Serial.println(scale.read_average(20));   // print the average of 20 readings from the ADC
    1194:	84 e1       	ldi	r24, 0x14	; 20
    1196:	0e 94 ef 03 	call	0x7de	; 0x7de <HX711::read_average(unsigned char) [clone .constprop.53]>
    119a:	0e 94 57 06 	call	0xcae	; 0xcae <Print::println(long, int) [clone .constprop.19]>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:80

  Serial.print("get value: \t\t");
    119e:	8d e4       	ldi	r24, 0x4D	; 77
    11a0:	91 e0       	ldi	r25, 0x01	; 1
    11a2:	0e 94 55 06 	call	0xcaa	; 0xcaa <Print::print(char const*) [clone .constprop.22]>
get_value():
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:243
	}
	return sum / times;
}

double HX711::get_value(byte times) {
	return read_average(times) - OFFSET;
    11a6:	85 e0       	ldi	r24, 0x05	; 5
    11a8:	0e 94 ef 03 	call	0x7de	; 0x7de <HX711::read_average(unsigned char) [clone .constprop.53]>
    11ac:	00 91 75 02 	lds	r16, 0x0275	; 0x800275 <scale+0x5>
    11b0:	10 91 76 02 	lds	r17, 0x0276	; 0x800276 <scale+0x6>
    11b4:	20 91 77 02 	lds	r18, 0x0277	; 0x800277 <scale+0x7>
    11b8:	30 91 78 02 	lds	r19, 0x0278	; 0x800278 <scale+0x8>
    11bc:	60 1b       	sub	r22, r16
    11be:	71 0b       	sbc	r23, r17
    11c0:	82 0b       	sbc	r24, r18
    11c2:	93 0b       	sbc	r25, r19
    11c4:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__floatsisf>
setup():
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:81
  Serial.println(scale.get_value(5));   // print the average of 5 readings from the ADC minus the tare weight (not set yet)
    11c8:	42 e0       	ldi	r20, 0x02	; 2
    11ca:	50 e0       	ldi	r21, 0x00	; 0
    11cc:	0e 94 47 06 	call	0xc8e	; 0xc8e <Print::println(double, int) [clone .constprop.25]>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:83

  Serial.print("get units: \t\t");
    11d0:	8b e5       	ldi	r24, 0x5B	; 91
    11d2:	91 e0       	ldi	r25, 0x01	; 1
    11d4:	0e 94 55 06 	call	0xcaa	; 0xcaa <Print::print(char const*) [clone .constprop.22]>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:84
  Serial.println(scale.get_units(5), 1);  // print the average of 5 readings from the ADC minus tare weight (not set) divided
    11d8:	85 e0       	ldi	r24, 0x05	; 5
    11da:	0e 94 3e 04 	call	0x87c	; 0x87c <HX711::get_units(unsigned char) [clone .constprop.23]>
    11de:	41 e0       	ldi	r20, 0x01	; 1
    11e0:	50 e0       	ldi	r21, 0x00	; 0
    11e2:	0e 94 47 06 	call	0xc8e	; 0xc8e <Print::println(double, int) [clone .constprop.25]>
set_scale():
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:256
	double sum = read_average(times);
	set_offset(sum);
}

void HX711::set_scale(float scale) {
	SCALE = scale;
    11e6:	8d ec       	ldi	r24, 0xCD	; 205
    11e8:	c8 2e       	mov	r12, r24
    11ea:	8c ed       	ldi	r24, 0xDC	; 220
    11ec:	d8 2e       	mov	r13, r24
    11ee:	8f e4       	ldi	r24, 0x4F	; 79
    11f0:	e8 2e       	mov	r14, r24
    11f2:	85 e4       	ldi	r24, 0x45	; 69
    11f4:	f8 2e       	mov	r15, r24
    11f6:	c0 92 79 02 	sts	0x0279, r12	; 0x800279 <scale+0x9>
    11fa:	d0 92 7a 02 	sts	0x027A, r13	; 0x80027a <scale+0xa>
    11fe:	e0 92 7b 02 	sts	0x027B, r14	; 0x80027b <scale+0xb>
    1202:	f0 92 7c 02 	sts	0x027C, r15	; 0x80027c <scale+0xc>
setup():
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:89
            // by the SCALE parameter (not set yet)
            
  scale.set_scale(3325.8);
  //scale.set_scale(-471.497);                      // this value is obtained by calibrating the scale with known weights; see the README for details
  scale.tare();               // reset the scale to 0
    1206:	0e 94 19 04 	call	0x832	; 0x832 <HX711::tare(unsigned char) [clone .constprop.52]>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:91

  Serial.println("After setting up the scale:");
    120a:	89 e6       	ldi	r24, 0x69	; 105
    120c:	91 e0       	ldi	r25, 0x01	; 1
    120e:	0e 94 5d 05 	call	0xaba	; 0xaba <Print::println(char const*) [clone .constprop.33]>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:93

  Serial.print("read: \t\t");
    1212:	83 e3       	ldi	r24, 0x33	; 51
    1214:	91 e0       	ldi	r25, 0x01	; 1
    1216:	0e 94 55 06 	call	0xcaa	; 0xcaa <Print::print(char const*) [clone .constprop.22]>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:94
  Serial.println(scale.read());                 // print a raw reading from the ADC
    121a:	0e 94 91 03 	call	0x722	; 0x722 <HX711::read() [clone .constprop.54]>
    121e:	0e 94 57 06 	call	0xcae	; 0xcae <Print::println(long, int) [clone .constprop.19]>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:96

  Serial.print("read average: \t\t");
    1222:	8c e3       	ldi	r24, 0x3C	; 60
    1224:	91 e0       	ldi	r25, 0x01	; 1
    1226:	0e 94 55 06 	call	0xcaa	; 0xcaa <Print::print(char const*) [clone .constprop.22]>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:97
  Serial.println(scale.read_average(20));       // print the average of 20 readings from the ADC
    122a:	84 e1       	ldi	r24, 0x14	; 20
    122c:	0e 94 ef 03 	call	0x7de	; 0x7de <HX711::read_average(unsigned char) [clone .constprop.53]>
    1230:	0e 94 57 06 	call	0xcae	; 0xcae <Print::println(long, int) [clone .constprop.19]>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:99

  Serial.print("get value: \t\t");
    1234:	8d e4       	ldi	r24, 0x4D	; 77
    1236:	91 e0       	ldi	r25, 0x01	; 1
    1238:	0e 94 55 06 	call	0xcaa	; 0xcaa <Print::print(char const*) [clone .constprop.22]>
get_value():
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:243
	}
	return sum / times;
}

double HX711::get_value(byte times) {
	return read_average(times) - OFFSET;
    123c:	85 e0       	ldi	r24, 0x05	; 5
    123e:	0e 94 ef 03 	call	0x7de	; 0x7de <HX711::read_average(unsigned char) [clone .constprop.53]>
    1242:	00 91 75 02 	lds	r16, 0x0275	; 0x800275 <scale+0x5>
    1246:	10 91 76 02 	lds	r17, 0x0276	; 0x800276 <scale+0x6>
    124a:	20 91 77 02 	lds	r18, 0x0277	; 0x800277 <scale+0x7>
    124e:	30 91 78 02 	lds	r19, 0x0278	; 0x800278 <scale+0x8>
    1252:	60 1b       	sub	r22, r16
    1254:	71 0b       	sbc	r23, r17
    1256:	82 0b       	sbc	r24, r18
    1258:	93 0b       	sbc	r25, r19
    125a:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__floatsisf>
setup():
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:100
  Serial.println(scale.get_value(5));   // print the average of 5 readings from the ADC minus the tare weight, set with tare()
    125e:	42 e0       	ldi	r20, 0x02	; 2
    1260:	50 e0       	ldi	r21, 0x00	; 0
    1262:	0e 94 47 06 	call	0xc8e	; 0xc8e <Print::println(double, int) [clone .constprop.25]>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:102

  Serial.print("get units: \t\t");
    1266:	8b e5       	ldi	r24, 0x5B	; 91
    1268:	91 e0       	ldi	r25, 0x01	; 1
    126a:	0e 94 55 06 	call	0xcaa	; 0xcaa <Print::print(char const*) [clone .constprop.22]>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:103
  Serial.println(scale.get_units(5), 1);        // print the average of 5 readings from the ADC minus tare weight, divided
    126e:	85 e0       	ldi	r24, 0x05	; 5
    1270:	0e 94 3e 04 	call	0x87c	; 0x87c <HX711::get_units(unsigned char) [clone .constprop.23]>
    1274:	41 e0       	ldi	r20, 0x01	; 1
    1276:	50 e0       	ldi	r21, 0x00	; 0
    1278:	0e 94 47 06 	call	0xc8e	; 0xc8e <Print::println(double, int) [clone .constprop.25]>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:104
   Serial.println("Readings:");           // by the SCALE parameter set with set_scale
    127c:	85 e8       	ldi	r24, 0x85	; 133
    127e:	91 e0       	ldi	r25, 0x01	; 1
    1280:	0e 94 5d 05 	call	0xaba	; 0xaba <Print::println(char const*) [clone .constprop.33]>
print():
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:252
	const char* flags = (precision > 0 && abs(num) < 1) ? "%06li" : "%6li";

	long integerpart;
	integerpart = ((long)(num*pow(10,precision)));

	print(integerpart, flags, precision); // draw the integerized number
    1284:	23 e0       	ldi	r18, 0x03	; 3
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	4f e8       	ldi	r20, 0x8F	; 143
    128a:	51 e0       	ldi	r21, 0x01	; 1
    128c:	60 e0       	ldi	r22, 0x00	; 0
    128e:	70 e0       	ldi	r23, 0x00	; 0
    1290:	cb 01       	movw	r24, r22
    1292:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <HT1621::print(long, char const*, int) [clone .constprop.38]>
setdecimalseparator():
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:305
	update();
}

void HT1621::setdecimalseparator(int decimaldigits) {
	// zero out the eight bit
	_buffer[3] &= 0x7F;
    1296:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <lcd+0xc>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:306
	_buffer[4] &= 0x7F;
    129a:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <lcd+0xd>
    129e:	9f 77       	andi	r25, 0x7F	; 127
    12a0:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <lcd+0xd>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:307
	_buffer[5] &= 0x7F;
    12a4:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <lcd+0xe>
    12a8:	9f 77       	andi	r25, 0x7F	; 127
    12aa:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <lcd+0xe>
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:316
	}

	// 3 is the digit offset
	// the first three eights bits in the buffer are for the battery signs
	// the last three are for the decimal point
	_buffer[6-decimaldigits] |= 0x80;
    12ae:	80 68       	ori	r24, 0x80	; 128
    12b0:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <lcd+0xc>
print():
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:255
	integerpart = ((long)(num*pow(10,precision)));

	print(integerpart, flags, precision); // draw the integerized number
	setdecimalseparator(precision); // draw the decimal point

	update();
    12b4:	0e 94 9f 01 	call	0x33e	; 0x33e <HT1621::update() [clone .constprop.40]>
set_scale():
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:256
	double sum = read_average(times);
	set_offset(sum);
}

void HX711::set_scale(float scale) {
	SCALE = scale;
    12b8:	c0 92 79 02 	sts	0x0279, r12	; 0x800279 <scale+0x9>
    12bc:	d0 92 7a 02 	sts	0x027A, r13	; 0x80027a <scale+0xa>
    12c0:	e0 92 7b 02 	sts	0x027B, r14	; 0x80027b <scale+0xb>
    12c4:	f0 92 7c 02 	sts	0x027C, r15	; 0x80027c <scale+0xc>
setup():
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:109
// #else
  lcd.print(0000.0f);
  scale.set_scale(3325.8);
  //scale.set_scale(-471.497);                      // this value is obtained by calibrating the scale with known weights; see the README for details
  scale.tare(); 
    12c8:	0e 94 19 04 	call	0x832	; 0x832 <HX711::tare(unsigned char) [clone .constprop.52]>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:111

  digitalWrite(BuzzerPin,LOW);
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	89 e0       	ldi	r24, 0x09	; 9
    12d0:	0e 94 21 01 	call	0x242	; 0x242 <digitalWrite>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:113
   
  delay(2000);
    12d4:	60 ed       	ldi	r22, 0xD0	; 208
    12d6:	77 e0       	ldi	r23, 0x07	; 7
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	0e 94 2d 02 	call	0x45a	; 0x45a <delay>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:114
  lcd.clear();
    12e0:	0e 94 94 01 	call	0x328	; 0x328 <HT1621::clear() [clone .constprop.46]>
serialEventRun():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    12e4:	c0 e0       	ldi	r28, 0x00	; 0
    12e6:	d0 e0       	ldi	r29, 0x00	; 0
millis():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    12e8:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    12ea:	f8 94       	cli
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    12ec:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <timer0_millis>
    12f0:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <timer0_millis+0x1>
    12f4:	a0 91 cd 01 	lds	r26, 0x01CD	; 0x8001cd <timer0_millis+0x2>
    12f8:	b0 91 ce 01 	lds	r27, 0x01CE	; 0x8001ce <timer0_millis+0x3>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    12fc:	2f bf       	out	0x3f, r18	; 63
loop():
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:121


}

void loop() {
  currentMillis = millis();
    12fe:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <currentMillis>
    1302:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <currentMillis+0x1>
    1306:	a0 93 c8 01 	sts	0x01C8, r26	; 0x8001c8 <currentMillis+0x2>
    130a:	b0 93 c9 01 	sts	0x01C9, r27	; 0x8001c9 <currentMillis+0x3>
millis():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    130e:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    1310:	f8 94       	cli
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    1312:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <timer0_millis>
    1316:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <timer0_millis+0x1>
    131a:	a0 91 cd 01 	lds	r26, 0x01CD	; 0x8001cd <timer0_millis+0x2>
    131e:	b0 91 ce 01 	lds	r27, 0x01CE	; 0x8001ce <timer0_millis+0x3>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    1322:	2f bf       	out	0x3f, r18	; 63
loop():
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:122
  TurnOffTimer  = millis();
    1324:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <TurnOffTimer>
    1328:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <TurnOffTimer+0x1>
    132c:	a0 93 c4 01 	sts	0x01C4, r26	; 0x8001c4 <TurnOffTimer+0x2>
    1330:	b0 93 c5 01 	sts	0x01C5, r27	; 0x8001c5 <TurnOffTimer+0x3>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:124
 // #ifdef DEBUG
  Serial.print("one reading:\t");
    1334:	85 e9       	ldi	r24, 0x95	; 149
    1336:	91 e0       	ldi	r25, 0x01	; 1
    1338:	0e 94 55 06 	call	0xcaa	; 0xcaa <Print::print(char const*) [clone .constprop.22]>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:125
  Serial.print(scale.get_units(), 1);
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	0e 94 3e 04 	call	0x87c	; 0x87c <HX711::get_units(unsigned char) [clone .constprop.23]>
print():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:111
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1342:	41 e0       	ldi	r20, 0x01	; 1
    1344:	0e 94 6b 05 	call	0xad6	; 0xad6 <Print::printFloat(double, unsigned char) [clone .constprop.26]>
loop():
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:126
  Serial.print("\t| average:\t");
    1348:	83 ea       	ldi	r24, 0xA3	; 163
    134a:	91 e0       	ldi	r25, 0x01	; 1
    134c:	0e 94 55 06 	call	0xcaa	; 0xcaa <Print::print(char const*) [clone .constprop.22]>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:127
  Serial.println(scale.get_units(10), 5);
    1350:	8a e0       	ldi	r24, 0x0A	; 10
    1352:	0e 94 3e 04 	call	0x87c	; 0x87c <HX711::get_units(unsigned char) [clone .constprop.23]>
    1356:	45 e0       	ldi	r20, 0x05	; 5
    1358:	50 e0       	ldi	r21, 0x00	; 0
    135a:	0e 94 47 06 	call	0xc8e	; 0xc8e <Print::println(double, int) [clone .constprop.25]>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:128
  delay(5000);
    135e:	68 e8       	ldi	r22, 0x88	; 136
    1360:	73 e1       	ldi	r23, 0x13	; 19
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	0e 94 2d 02 	call	0x45a	; 0x45a <delay>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:131
 // #else
  //Timer
  if(currentMillis - prevMillis > interval)
    136a:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <currentMillis>
    136e:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <currentMillis+0x1>
    1372:	a0 91 c8 01 	lds	r26, 0x01C8	; 0x8001c8 <currentMillis+0x2>
    1376:	b0 91 c9 01 	lds	r27, 0x01C9	; 0x8001c9 <currentMillis+0x3>
    137a:	40 91 be 01 	lds	r20, 0x01BE	; 0x8001be <prevMillis>
    137e:	50 91 bf 01 	lds	r21, 0x01BF	; 0x8001bf <prevMillis+0x1>
    1382:	60 91 c0 01 	lds	r22, 0x01C0	; 0x8001c0 <prevMillis+0x2>
    1386:	70 91 c1 01 	lds	r23, 0x01C1	; 0x8001c1 <prevMillis+0x3>
    138a:	8c 01       	movw	r16, r24
    138c:	9d 01       	movw	r18, r26
    138e:	04 1b       	sub	r16, r20
    1390:	15 0b       	sbc	r17, r21
    1392:	26 0b       	sbc	r18, r22
    1394:	37 0b       	sbc	r19, r23
    1396:	b9 01       	movw	r22, r18
    1398:	a8 01       	movw	r20, r16
    139a:	41 3d       	cpi	r20, 0xD1	; 209
    139c:	57 40       	sbci	r21, 0x07	; 7
    139e:	61 05       	cpc	r22, r1
    13a0:	71 05       	cpc	r23, r1
    13a2:	08 f4       	brcc	.+2      	; 0x13a6 <main+0x3b0>
    13a4:	9d c0       	rjmp	.+314    	; 0x14e0 <main+0x4ea>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:133
  {
    prevMillis = currentMillis;
    13a6:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <prevMillis>
    13aa:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <prevMillis+0x1>
    13ae:	a0 93 c0 01 	sts	0x01C0, r26	; 0x8001c0 <prevMillis+0x2>
    13b2:	b0 93 c1 01 	sts	0x01C1, r27	; 0x8001c1 <prevMillis+0x3>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:134
    lcd.clear();
    13b6:	0e 94 94 01 	call	0x328	; 0x328 <HT1621::clear() [clone .constprop.46]>
millis():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    13ba:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    13bc:	f8 94       	cli
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    13be:	c0 90 cb 01 	lds	r12, 0x01CB	; 0x8001cb <timer0_millis>
    13c2:	d0 90 cc 01 	lds	r13, 0x01CC	; 0x8001cc <timer0_millis+0x1>
    13c6:	e0 90 cd 01 	lds	r14, 0x01CD	; 0x8001cd <timer0_millis+0x2>
    13ca:	f0 90 ce 01 	lds	r15, 0x01CE	; 0x8001ce <timer0_millis+0x3>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    13ce:	8f bf       	out	0x3f, r24	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    13d0:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    13d2:	f8 94       	cli
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    13d4:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <timer0_millis>
    13d8:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <timer0_millis+0x1>
    13dc:	a0 91 cd 01 	lds	r26, 0x01CD	; 0x8001cd <timer0_millis+0x2>
    13e0:	b0 91 ce 01 	lds	r27, 0x01CE	; 0x8001ce <timer0_millis+0x3>
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    13e4:	2f bf       	out	0x3f, r18	; 63
wait_ready_timeout():
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:222

bool HX711::wait_ready_timeout(unsigned long timeout, unsigned long delay_ms) {
	// Wait for the chip to become ready until timeout.
	// https://github.com/bogde/HX711/pull/96
	unsigned long millisStarted = millis();
	while (millis() - millisStarted < timeout) {
    13e6:	8c 19       	sub	r24, r12
    13e8:	9d 09       	sbc	r25, r13
    13ea:	ae 09       	sbc	r26, r14
    13ec:	bf 09       	sbc	r27, r15
    13ee:	88 3c       	cpi	r24, 0xC8	; 200
    13f0:	91 05       	cpc	r25, r1
    13f2:	a1 05       	cpc	r26, r1
    13f4:	b1 05       	cpc	r27, r1
    13f6:	08 f0       	brcs	.+2      	; 0x13fa <main+0x404>
    13f8:	4c c0       	rjmp	.+152    	; 0x1492 <main+0x49c>
is_ready():
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:89

	set_gain(gain);
}

bool HX711::is_ready() {
	return digitalRead(DOUT) == LOW;
    13fa:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <scale+0x3>
    13fe:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <digitalRead>
wait_ready_timeout():
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:223
bool HX711::wait_ready_timeout(unsigned long timeout, unsigned long delay_ms) {
	// Wait for the chip to become ready until timeout.
	// https://github.com/bogde/HX711/pull/96
	unsigned long millisStarted = millis();
	while (millis() - millisStarted < timeout) {
		if (is_ready()) {
    1402:	89 2b       	or	r24, r25
    1404:	31 f0       	breq	.+12     	; 0x1412 <main+0x41c>
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:226
			return true;
		}
		delay(delay_ms);
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	cb 01       	movw	r24, r22
    140c:	0e 94 2d 02 	call	0x45a	; 0x45a <delay>
    1410:	df cf       	rjmp	.-66     	; 0x13d0 <main+0x3da>
loop():
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:139

   if (scale.wait_ready_timeout(200)) 
   {
     // reading = round(scale.get_units());
     reading = scale.get_units();
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	0e 94 3e 04 	call	0x87c	; 0x87c <HX711::get_units(unsigned char) [clone .constprop.23]>
    1418:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__fixsfsi>
    141c:	60 93 ba 01 	sts	0x01BA, r22	; 0x8001ba <reading>
    1420:	70 93 bb 01 	sts	0x01BB, r23	; 0x8001bb <reading+0x1>
    1424:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <reading+0x2>
    1428:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <reading+0x3>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:142
     // Serial.print("Weight: ");
     //Serial.println(reading);
     if (reading != lastReading)
    142c:	c0 90 b6 01 	lds	r12, 0x01B6	; 0x8001b6 <__data_end>
    1430:	d0 90 b7 01 	lds	r13, 0x01B7	; 0x8001b7 <__data_end+0x1>
    1434:	e0 90 b8 01 	lds	r14, 0x01B8	; 0x8001b8 <__data_end+0x2>
    1438:	f0 90 b9 01 	lds	r15, 0x01B9	; 0x8001b9 <__data_end+0x3>
    143c:	6c 15       	cp	r22, r12
    143e:	7d 05       	cpc	r23, r13
    1440:	8e 05       	cpc	r24, r14
    1442:	9f 05       	cpc	r25, r15
    1444:	b1 f0       	breq	.+44     	; 0x1472 <main+0x47c>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:144
     {
       lcd.print(reading);
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	40 eb       	ldi	r20, 0xB0	; 176
    144c:	51 e0       	ldi	r21, 0x01	; 1
    144e:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <HT1621::print(long, char const*, int) [clone .constprop.38]>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:146
       //Reset Timer
       TurnOffTimer = currentMillis;
    1452:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <currentMillis>
    1456:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <currentMillis+0x1>
    145a:	a0 91 c8 01 	lds	r26, 0x01C8	; 0x8001c8 <currentMillis+0x2>
    145e:	b0 91 c9 01 	lds	r27, 0x01C9	; 0x8001c9 <currentMillis+0x3>
    1462:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <TurnOffTimer>
    1466:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <TurnOffTimer+0x1>
    146a:	a0 93 c4 01 	sts	0x01C4, r26	; 0x8001c4 <TurnOffTimer+0x2>
    146e:	b0 93 c5 01 	sts	0x01C5, r27	; 0x8001c5 <TurnOffTimer+0x3>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:148
     }
      lastReading = reading;
    1472:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <reading>
    1476:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <reading+0x1>
    147a:	a0 91 bc 01 	lds	r26, 0x01BC	; 0x8001bc <reading+0x2>
    147e:	b0 91 bd 01 	lds	r27, 0x01BD	; 0x8001bd <reading+0x3>
    1482:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <__data_end>
    1486:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <__data_end+0x1>
    148a:	a0 93 b8 01 	sts	0x01B8, r26	; 0x8001b8 <__data_end+0x2>
    148e:	b0 93 b9 01 	sts	0x01B9, r27	; 0x8001b9 <__data_end+0x3>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:151
   }

   if(TurnOffTimer >= TurnOffTimeOut )
    1492:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <TurnOffTimer>
    1496:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <TurnOffTimer+0x1>
    149a:	a0 91 c4 01 	lds	r26, 0x01C4	; 0x8001c4 <TurnOffTimer+0x2>
    149e:	b0 91 c5 01 	lds	r27, 0x01C5	; 0x8001c5 <TurnOffTimer+0x3>
    14a2:	80 32       	cpi	r24, 0x20	; 32
    14a4:	9e 44       	sbci	r25, 0x4E	; 78
    14a6:	a1 05       	cpc	r26, r1
    14a8:	b1 05       	cpc	r27, r1
    14aa:	d0 f0       	brcs	.+52     	; 0x14e0 <main+0x4ea>
H:\Arduino\projects\LoadCellmain/LoadCellmain.ino:153
   {
    lcd.clear();
    14ac:	0e 94 94 01 	call	0x328	; 0x328 <HT1621::clear() [clone .constprop.46]>
noDisplay():
c:\Users\Hosein\Documents\Arduino\libraries\HT1621\src/HT1621.cpp:104
	wrCMD(LCDON);
}

void HT1621::noDisplay()
{
	wrCMD(LCDOFF);
    14b0:	84 e0       	ldi	r24, 0x04	; 4
    14b2:	0e 94 bd 01 	call	0x37a	; 0x37a <HT1621::wrCMD(unsigned char) [clone .constprop.45]>
power_down():
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:272
long HX711::get_offset() {
	return OFFSET;
}

void HX711::power_down() {
	digitalWrite(PD_SCK, LOW);
    14b6:	60 e0       	ldi	r22, 0x00	; 0
    14b8:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <scale+0x2>
    14bc:	0e 94 21 01 	call	0x242	; 0x242 <digitalWrite>
c:\Users\Hosein\Documents\Arduino\libraries\HX711_Arduino_Library\src/HX711.cpp:273
	digitalWrite(PD_SCK, HIGH);
    14c0:	61 e0       	ldi	r22, 0x01	; 1
    14c2:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <scale+0x2>
    14c6:	0e 94 21 01 	call	0x242	; 0x242 <digitalWrite>
sleepMode():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_extras.h:112
        set_sleep_mode(SLEEP_MODE_ADC);
      #endif
      break;
    case SLEEP_POWER_DOWN:
      #if defined SLEEP_MODE_PWR_DOWN
        set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    14ca:	85 b7       	in	r24, 0x35	; 53
    14cc:	8f 74       	andi	r24, 0x4F	; 79
    14ce:	80 62       	ori	r24, 0x20	; 32
    14d0:	85 bf       	out	0x35, r24	; 53
sleep():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_extras.h:148

static inline void sleep() __attribute__((always_inline, unused));
static inline void sleep()
{
  #if defined sleep_mode
    sleep_mode();
    14d2:	85 b7       	in	r24, 0x35	; 53
    14d4:	80 64       	ori	r24, 0x40	; 64
    14d6:	85 bf       	out	0x35, r24	; 53
    14d8:	88 95       	sleep
    14da:	85 b7       	in	r24, 0x35	; 53
    14dc:	8f 7b       	andi	r24, 0xBF	; 191
    14de:	85 bf       	out	0x35, r24	; 53
serialEventRun():
C:\Users\Hosein\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67
    14e0:	20 97       	sbiw	r28, 0x00	; 0
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <main+0x4f0>
    14e4:	01 cf       	rjmp	.-510    	; 0x12e8 <main+0x2f2>
    14e6:	0e 94 cb 02 	call	0x596	; 0x596 <Serial0_available()>
    14ea:	88 23       	and	r24, r24
    14ec:	09 f4       	brne	.+2      	; 0x14f0 <main+0x4fa>
    14ee:	fc ce       	rjmp	.-520    	; 0x12e8 <main+0x2f2>
    14f0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    14f4:	f9 ce       	rjmp	.-526    	; 0x12e8 <main+0x2f2>

000014f6 <vfprintf>:
vfprintf():
    14f6:	ab e0       	ldi	r26, 0x0B	; 11
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e1 e8       	ldi	r30, 0x81	; 129
    14fc:	fa e0       	ldi	r31, 0x0A	; 10
    14fe:	0c 94 f9 0c 	jmp	0x19f2	; 0x19f2 <__prologue_saves__>
    1502:	7c 01       	movw	r14, r24
    1504:	3b 01       	movw	r6, r22
    1506:	8a 01       	movw	r16, r20
    1508:	fc 01       	movw	r30, r24
    150a:	17 82       	std	Z+7, r1	; 0x07
    150c:	16 82       	std	Z+6, r1	; 0x06
    150e:	83 81       	ldd	r24, Z+3	; 0x03
    1510:	81 ff       	sbrs	r24, 1
    1512:	c8 c1       	rjmp	.+912    	; 0x18a4 <vfprintf+0x3ae>
    1514:	ce 01       	movw	r24, r28
    1516:	01 96       	adiw	r24, 0x01	; 1
    1518:	5c 01       	movw	r10, r24
    151a:	f7 01       	movw	r30, r14
    151c:	93 81       	ldd	r25, Z+3	; 0x03
    151e:	f3 01       	movw	r30, r6
    1520:	93 fd       	sbrc	r25, 3
    1522:	85 91       	lpm	r24, Z+
    1524:	93 ff       	sbrs	r25, 3
    1526:	81 91       	ld	r24, Z+
    1528:	3f 01       	movw	r6, r30
    152a:	88 23       	and	r24, r24
    152c:	09 f4       	brne	.+2      	; 0x1530 <vfprintf+0x3a>
    152e:	53 c1       	rjmp	.+678    	; 0x17d6 <vfprintf+0x2e0>
    1530:	85 32       	cpi	r24, 0x25	; 37
    1532:	39 f4       	brne	.+14     	; 0x1542 <vfprintf+0x4c>
    1534:	93 fd       	sbrc	r25, 3
    1536:	85 91       	lpm	r24, Z+
    1538:	93 ff       	sbrs	r25, 3
    153a:	81 91       	ld	r24, Z+
    153c:	3f 01       	movw	r6, r30
    153e:	85 32       	cpi	r24, 0x25	; 37
    1540:	29 f4       	brne	.+10     	; 0x154c <vfprintf+0x56>
    1542:	b7 01       	movw	r22, r14
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <fputc>
    154a:	e7 cf       	rjmp	.-50     	; 0x151a <vfprintf+0x24>
    154c:	91 2c       	mov	r9, r1
    154e:	21 2c       	mov	r2, r1
    1550:	31 2c       	mov	r3, r1
    1552:	ff e1       	ldi	r31, 0x1F	; 31
    1554:	f3 15       	cp	r31, r3
    1556:	38 f0       	brcs	.+14     	; 0x1566 <vfprintf+0x70>
    1558:	8b 32       	cpi	r24, 0x2B	; 43
    155a:	11 f1       	breq	.+68     	; 0x15a0 <vfprintf+0xaa>
    155c:	90 f4       	brcc	.+36     	; 0x1582 <vfprintf+0x8c>
    155e:	80 32       	cpi	r24, 0x20	; 32
    1560:	09 f1       	breq	.+66     	; 0x15a4 <vfprintf+0xae>
    1562:	83 32       	cpi	r24, 0x23	; 35
    1564:	29 f1       	breq	.+74     	; 0x15b0 <vfprintf+0xba>
    1566:	37 fc       	sbrc	r3, 7
    1568:	3c c0       	rjmp	.+120    	; 0x15e2 <vfprintf+0xec>
    156a:	20 ed       	ldi	r18, 0xD0	; 208
    156c:	28 0f       	add	r18, r24
    156e:	2a 30       	cpi	r18, 0x0A	; 10
    1570:	50 f5       	brcc	.+84     	; 0x15c6 <vfprintf+0xd0>
    1572:	36 fe       	sbrs	r3, 6
    1574:	20 c0       	rjmp	.+64     	; 0x15b6 <vfprintf+0xc0>
    1576:	8a e0       	ldi	r24, 0x0A	; 10
    1578:	98 9e       	mul	r9, r24
    157a:	20 0d       	add	r18, r0
    157c:	11 24       	eor	r1, r1
    157e:	92 2e       	mov	r9, r18
    1580:	06 c0       	rjmp	.+12     	; 0x158e <vfprintf+0x98>
    1582:	8d 32       	cpi	r24, 0x2D	; 45
    1584:	91 f0       	breq	.+36     	; 0x15aa <vfprintf+0xb4>
    1586:	80 33       	cpi	r24, 0x30	; 48
    1588:	71 f7       	brne	.-36     	; 0x1566 <vfprintf+0x70>
    158a:	68 94       	set
    158c:	30 f8       	bld	r3, 0
    158e:	f3 01       	movw	r30, r6
    1590:	93 fd       	sbrc	r25, 3
    1592:	85 91       	lpm	r24, Z+
    1594:	93 ff       	sbrs	r25, 3
    1596:	81 91       	ld	r24, Z+
    1598:	3f 01       	movw	r6, r30
    159a:	81 11       	cpse	r24, r1
    159c:	da cf       	rjmp	.-76     	; 0x1552 <vfprintf+0x5c>
    159e:	21 c0       	rjmp	.+66     	; 0x15e2 <vfprintf+0xec>
    15a0:	68 94       	set
    15a2:	31 f8       	bld	r3, 1
    15a4:	68 94       	set
    15a6:	32 f8       	bld	r3, 2
    15a8:	f2 cf       	rjmp	.-28     	; 0x158e <vfprintf+0x98>
    15aa:	68 94       	set
    15ac:	33 f8       	bld	r3, 3
    15ae:	ef cf       	rjmp	.-34     	; 0x158e <vfprintf+0x98>
    15b0:	68 94       	set
    15b2:	34 f8       	bld	r3, 4
    15b4:	ec cf       	rjmp	.-40     	; 0x158e <vfprintf+0x98>
    15b6:	ea e0       	ldi	r30, 0x0A	; 10
    15b8:	2e 9e       	mul	r2, r30
    15ba:	20 0d       	add	r18, r0
    15bc:	11 24       	eor	r1, r1
    15be:	22 2e       	mov	r2, r18
    15c0:	68 94       	set
    15c2:	35 f8       	bld	r3, 5
    15c4:	e4 cf       	rjmp	.-56     	; 0x158e <vfprintf+0x98>
    15c6:	8e 32       	cpi	r24, 0x2E	; 46
    15c8:	29 f4       	brne	.+10     	; 0x15d4 <vfprintf+0xde>
    15ca:	36 fc       	sbrc	r3, 6
    15cc:	04 c1       	rjmp	.+520    	; 0x17d6 <vfprintf+0x2e0>
    15ce:	68 94       	set
    15d0:	36 f8       	bld	r3, 6
    15d2:	dd cf       	rjmp	.-70     	; 0x158e <vfprintf+0x98>
    15d4:	8c 36       	cpi	r24, 0x6C	; 108
    15d6:	19 f4       	brne	.+6      	; 0x15de <vfprintf+0xe8>
    15d8:	68 94       	set
    15da:	37 f8       	bld	r3, 7
    15dc:	d8 cf       	rjmp	.-80     	; 0x158e <vfprintf+0x98>
    15de:	88 36       	cpi	r24, 0x68	; 104
    15e0:	b1 f2       	breq	.-84     	; 0x158e <vfprintf+0x98>
    15e2:	98 2f       	mov	r25, r24
    15e4:	9f 7d       	andi	r25, 0xDF	; 223
    15e6:	95 54       	subi	r25, 0x45	; 69
    15e8:	93 30       	cpi	r25, 0x03	; 3
    15ea:	e0 f0       	brcs	.+56     	; 0x1624 <vfprintf+0x12e>
    15ec:	83 36       	cpi	r24, 0x63	; 99
    15ee:	a1 f1       	breq	.+104    	; 0x1658 <vfprintf+0x162>
    15f0:	83 37       	cpi	r24, 0x73	; 115
    15f2:	c1 f1       	breq	.+112    	; 0x1664 <vfprintf+0x16e>
    15f4:	83 35       	cpi	r24, 0x53	; 83
    15f6:	09 f0       	breq	.+2      	; 0x15fa <vfprintf+0x104>
    15f8:	63 c0       	rjmp	.+198    	; 0x16c0 <vfprintf+0x1ca>
    15fa:	28 01       	movw	r4, r16
    15fc:	f2 e0       	ldi	r31, 0x02	; 2
    15fe:	4f 0e       	add	r4, r31
    1600:	51 1c       	adc	r5, r1
    1602:	f8 01       	movw	r30, r16
    1604:	c0 80       	ld	r12, Z
    1606:	d1 80       	ldd	r13, Z+1	; 0x01
    1608:	69 2d       	mov	r22, r9
    160a:	70 e0       	ldi	r23, 0x00	; 0
    160c:	36 fc       	sbrc	r3, 6
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <vfprintf+0x11e>
    1610:	6f ef       	ldi	r22, 0xFF	; 255
    1612:	7f ef       	ldi	r23, 0xFF	; 255
    1614:	c6 01       	movw	r24, r12
    1616:	0e 94 55 0c 	call	0x18aa	; 0x18aa <strnlen_P>
    161a:	4c 01       	movw	r8, r24
    161c:	68 94       	set
    161e:	37 f8       	bld	r3, 7
    1620:	82 01       	movw	r16, r4
    1622:	0a c0       	rjmp	.+20     	; 0x1638 <vfprintf+0x142>
    1624:	0c 5f       	subi	r16, 0xFC	; 252
    1626:	1f 4f       	sbci	r17, 0xFF	; 255
    1628:	ff e3       	ldi	r31, 0x3F	; 63
    162a:	f9 83       	std	Y+1, r31	; 0x01
    162c:	88 24       	eor	r8, r8
    162e:	83 94       	inc	r8
    1630:	91 2c       	mov	r9, r1
    1632:	65 01       	movw	r12, r10
    1634:	e8 94       	clt
    1636:	37 f8       	bld	r3, 7
    1638:	33 fe       	sbrs	r3, 3
    163a:	2d c0       	rjmp	.+90     	; 0x1696 <vfprintf+0x1a0>
    163c:	52 2c       	mov	r5, r2
    163e:	81 14       	cp	r8, r1
    1640:	91 04       	cpc	r9, r1
    1642:	71 f5       	brne	.+92     	; 0x16a0 <vfprintf+0x1aa>
    1644:	55 20       	and	r5, r5
    1646:	09 f4       	brne	.+2      	; 0x164a <vfprintf+0x154>
    1648:	68 cf       	rjmp	.-304    	; 0x151a <vfprintf+0x24>
    164a:	b7 01       	movw	r22, r14
    164c:	80 e2       	ldi	r24, 0x20	; 32
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <fputc>
    1654:	5a 94       	dec	r5
    1656:	f6 cf       	rjmp	.-20     	; 0x1644 <vfprintf+0x14e>
    1658:	f8 01       	movw	r30, r16
    165a:	80 81       	ld	r24, Z
    165c:	89 83       	std	Y+1, r24	; 0x01
    165e:	0e 5f       	subi	r16, 0xFE	; 254
    1660:	1f 4f       	sbci	r17, 0xFF	; 255
    1662:	e4 cf       	rjmp	.-56     	; 0x162c <vfprintf+0x136>
    1664:	28 01       	movw	r4, r16
    1666:	f2 e0       	ldi	r31, 0x02	; 2
    1668:	4f 0e       	add	r4, r31
    166a:	51 1c       	adc	r5, r1
    166c:	f8 01       	movw	r30, r16
    166e:	c0 80       	ld	r12, Z
    1670:	d1 80       	ldd	r13, Z+1	; 0x01
    1672:	69 2d       	mov	r22, r9
    1674:	70 e0       	ldi	r23, 0x00	; 0
    1676:	36 fc       	sbrc	r3, 6
    1678:	02 c0       	rjmp	.+4      	; 0x167e <vfprintf+0x188>
    167a:	6f ef       	ldi	r22, 0xFF	; 255
    167c:	7f ef       	ldi	r23, 0xFF	; 255
    167e:	c6 01       	movw	r24, r12
    1680:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <strnlen>
    1684:	4c 01       	movw	r8, r24
    1686:	82 01       	movw	r16, r4
    1688:	d5 cf       	rjmp	.-86     	; 0x1634 <vfprintf+0x13e>
    168a:	b7 01       	movw	r22, r14
    168c:	80 e2       	ldi	r24, 0x20	; 32
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <fputc>
    1694:	2a 94       	dec	r2
    1696:	28 14       	cp	r2, r8
    1698:	19 04       	cpc	r1, r9
    169a:	09 f0       	breq	.+2      	; 0x169e <vfprintf+0x1a8>
    169c:	b0 f7       	brcc	.-20     	; 0x168a <vfprintf+0x194>
    169e:	ce cf       	rjmp	.-100    	; 0x163c <vfprintf+0x146>
    16a0:	f6 01       	movw	r30, r12
    16a2:	37 fc       	sbrc	r3, 7
    16a4:	85 91       	lpm	r24, Z+
    16a6:	37 fe       	sbrs	r3, 7
    16a8:	81 91       	ld	r24, Z+
    16aa:	6f 01       	movw	r12, r30
    16ac:	b7 01       	movw	r22, r14
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <fputc>
    16b4:	51 10       	cpse	r5, r1
    16b6:	5a 94       	dec	r5
    16b8:	f1 e0       	ldi	r31, 0x01	; 1
    16ba:	8f 1a       	sub	r8, r31
    16bc:	91 08       	sbc	r9, r1
    16be:	bf cf       	rjmp	.-130    	; 0x163e <vfprintf+0x148>
    16c0:	84 36       	cpi	r24, 0x64	; 100
    16c2:	19 f0       	breq	.+6      	; 0x16ca <vfprintf+0x1d4>
    16c4:	89 36       	cpi	r24, 0x69	; 105
    16c6:	09 f0       	breq	.+2      	; 0x16ca <vfprintf+0x1d4>
    16c8:	77 c0       	rjmp	.+238    	; 0x17b8 <vfprintf+0x2c2>
    16ca:	f8 01       	movw	r30, r16
    16cc:	37 fe       	sbrs	r3, 7
    16ce:	6b c0       	rjmp	.+214    	; 0x17a6 <vfprintf+0x2b0>
    16d0:	60 81       	ld	r22, Z
    16d2:	71 81       	ldd	r23, Z+1	; 0x01
    16d4:	82 81       	ldd	r24, Z+2	; 0x02
    16d6:	93 81       	ldd	r25, Z+3	; 0x03
    16d8:	0c 5f       	subi	r16, 0xFC	; 252
    16da:	1f 4f       	sbci	r17, 0xFF	; 255
    16dc:	f3 2d       	mov	r31, r3
    16de:	ff 76       	andi	r31, 0x6F	; 111
    16e0:	3f 2e       	mov	r3, r31
    16e2:	97 ff       	sbrs	r25, 7
    16e4:	09 c0       	rjmp	.+18     	; 0x16f8 <vfprintf+0x202>
    16e6:	90 95       	com	r25
    16e8:	80 95       	com	r24
    16ea:	70 95       	com	r23
    16ec:	61 95       	neg	r22
    16ee:	7f 4f       	sbci	r23, 0xFF	; 255
    16f0:	8f 4f       	sbci	r24, 0xFF	; 255
    16f2:	9f 4f       	sbci	r25, 0xFF	; 255
    16f4:	68 94       	set
    16f6:	37 f8       	bld	r3, 7
    16f8:	2a e0       	ldi	r18, 0x0A	; 10
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	a5 01       	movw	r20, r10
    16fe:	0e 94 9b 0c 	call	0x1936	; 0x1936 <__ultoa_invert>
    1702:	c8 2e       	mov	r12, r24
    1704:	ca 18       	sub	r12, r10
    1706:	8c 2c       	mov	r8, r12
    1708:	43 2c       	mov	r4, r3
    170a:	36 fe       	sbrs	r3, 6
    170c:	0c c0       	rjmp	.+24     	; 0x1726 <vfprintf+0x230>
    170e:	e8 94       	clt
    1710:	40 f8       	bld	r4, 0
    1712:	c9 14       	cp	r12, r9
    1714:	40 f4       	brcc	.+16     	; 0x1726 <vfprintf+0x230>
    1716:	34 fe       	sbrs	r3, 4
    1718:	05 c0       	rjmp	.+10     	; 0x1724 <vfprintf+0x22e>
    171a:	32 fc       	sbrc	r3, 2
    171c:	03 c0       	rjmp	.+6      	; 0x1724 <vfprintf+0x22e>
    171e:	f3 2d       	mov	r31, r3
    1720:	fe 7e       	andi	r31, 0xEE	; 238
    1722:	4f 2e       	mov	r4, r31
    1724:	89 2c       	mov	r8, r9
    1726:	44 fe       	sbrs	r4, 4
    1728:	95 c0       	rjmp	.+298    	; 0x1854 <vfprintf+0x35e>
    172a:	fe 01       	movw	r30, r28
    172c:	ec 0d       	add	r30, r12
    172e:	f1 1d       	adc	r31, r1
    1730:	80 81       	ld	r24, Z
    1732:	80 33       	cpi	r24, 0x30	; 48
    1734:	09 f0       	breq	.+2      	; 0x1738 <vfprintf+0x242>
    1736:	87 c0       	rjmp	.+270    	; 0x1846 <vfprintf+0x350>
    1738:	24 2d       	mov	r18, r4
    173a:	29 7e       	andi	r18, 0xE9	; 233
    173c:	42 2e       	mov	r4, r18
    173e:	84 2d       	mov	r24, r4
    1740:	88 70       	andi	r24, 0x08	; 8
    1742:	58 2e       	mov	r5, r24
    1744:	43 fc       	sbrc	r4, 3
    1746:	95 c0       	rjmp	.+298    	; 0x1872 <vfprintf+0x37c>
    1748:	40 fe       	sbrs	r4, 0
    174a:	8f c0       	rjmp	.+286    	; 0x186a <vfprintf+0x374>
    174c:	9c 2c       	mov	r9, r12
    174e:	82 14       	cp	r8, r2
    1750:	18 f4       	brcc	.+6      	; 0x1758 <vfprintf+0x262>
    1752:	2c 0c       	add	r2, r12
    1754:	92 2c       	mov	r9, r2
    1756:	98 18       	sub	r9, r8
    1758:	44 fe       	sbrs	r4, 4
    175a:	91 c0       	rjmp	.+290    	; 0x187e <vfprintf+0x388>
    175c:	b7 01       	movw	r22, r14
    175e:	80 e3       	ldi	r24, 0x30	; 48
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <fputc>
    1766:	42 fe       	sbrs	r4, 2
    1768:	09 c0       	rjmp	.+18     	; 0x177c <vfprintf+0x286>
    176a:	88 e7       	ldi	r24, 0x78	; 120
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	41 fe       	sbrs	r4, 1
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <vfprintf+0x280>
    1772:	88 e5       	ldi	r24, 0x58	; 88
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	b7 01       	movw	r22, r14
    1778:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <fputc>
    177c:	c9 14       	cp	r12, r9
    177e:	08 f4       	brcc	.+2      	; 0x1782 <vfprintf+0x28c>
    1780:	8a c0       	rjmp	.+276    	; 0x1896 <vfprintf+0x3a0>
    1782:	ca 94       	dec	r12
    1784:	d1 2c       	mov	r13, r1
    1786:	9f ef       	ldi	r25, 0xFF	; 255
    1788:	c9 1a       	sub	r12, r25
    178a:	d9 0a       	sbc	r13, r25
    178c:	ca 0c       	add	r12, r10
    178e:	db 1c       	adc	r13, r11
    1790:	f6 01       	movw	r30, r12
    1792:	82 91       	ld	r24, -Z
    1794:	6f 01       	movw	r12, r30
    1796:	b7 01       	movw	r22, r14
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <fputc>
    179e:	ac 14       	cp	r10, r12
    17a0:	bd 04       	cpc	r11, r13
    17a2:	b1 f7       	brne	.-20     	; 0x1790 <vfprintf+0x29a>
    17a4:	4f cf       	rjmp	.-354    	; 0x1644 <vfprintf+0x14e>
    17a6:	60 81       	ld	r22, Z
    17a8:	71 81       	ldd	r23, Z+1	; 0x01
    17aa:	07 2e       	mov	r0, r23
    17ac:	00 0c       	add	r0, r0
    17ae:	88 0b       	sbc	r24, r24
    17b0:	99 0b       	sbc	r25, r25
    17b2:	0e 5f       	subi	r16, 0xFE	; 254
    17b4:	1f 4f       	sbci	r17, 0xFF	; 255
    17b6:	92 cf       	rjmp	.-220    	; 0x16dc <vfprintf+0x1e6>
    17b8:	d3 2c       	mov	r13, r3
    17ba:	e8 94       	clt
    17bc:	d4 f8       	bld	r13, 4
    17be:	2a e0       	ldi	r18, 0x0A	; 10
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	85 37       	cpi	r24, 0x75	; 117
    17c4:	39 f1       	breq	.+78     	; 0x1814 <vfprintf+0x31e>
    17c6:	23 2d       	mov	r18, r3
    17c8:	29 7f       	andi	r18, 0xF9	; 249
    17ca:	d2 2e       	mov	r13, r18
    17cc:	8f 36       	cpi	r24, 0x6F	; 111
    17ce:	01 f1       	breq	.+64     	; 0x1810 <vfprintf+0x31a>
    17d0:	48 f4       	brcc	.+18     	; 0x17e4 <vfprintf+0x2ee>
    17d2:	88 35       	cpi	r24, 0x58	; 88
    17d4:	a9 f0       	breq	.+42     	; 0x1800 <vfprintf+0x30a>
    17d6:	f7 01       	movw	r30, r14
    17d8:	86 81       	ldd	r24, Z+6	; 0x06
    17da:	97 81       	ldd	r25, Z+7	; 0x07
    17dc:	2b 96       	adiw	r28, 0x0b	; 11
    17de:	e2 e1       	ldi	r30, 0x12	; 18
    17e0:	0c 94 15 0d 	jmp	0x1a2a	; 0x1a2a <__epilogue_restores__>
    17e4:	80 37       	cpi	r24, 0x70	; 112
    17e6:	49 f0       	breq	.+18     	; 0x17fa <vfprintf+0x304>
    17e8:	88 37       	cpi	r24, 0x78	; 120
    17ea:	a9 f7       	brne	.-22     	; 0x17d6 <vfprintf+0x2e0>
    17ec:	d4 fe       	sbrs	r13, 4
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <vfprintf+0x2fe>
    17f0:	68 94       	set
    17f2:	d2 f8       	bld	r13, 2
    17f4:	20 e1       	ldi	r18, 0x10	; 16
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	0d c0       	rjmp	.+26     	; 0x1814 <vfprintf+0x31e>
    17fa:	68 94       	set
    17fc:	d4 f8       	bld	r13, 4
    17fe:	f6 cf       	rjmp	.-20     	; 0x17ec <vfprintf+0x2f6>
    1800:	34 fe       	sbrs	r3, 4
    1802:	03 c0       	rjmp	.+6      	; 0x180a <vfprintf+0x314>
    1804:	82 2f       	mov	r24, r18
    1806:	86 60       	ori	r24, 0x06	; 6
    1808:	d8 2e       	mov	r13, r24
    180a:	20 e1       	ldi	r18, 0x10	; 16
    180c:	32 e0       	ldi	r19, 0x02	; 2
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <vfprintf+0x31e>
    1810:	28 e0       	ldi	r18, 0x08	; 8
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	f8 01       	movw	r30, r16
    1816:	d7 fe       	sbrs	r13, 7
    1818:	0f c0       	rjmp	.+30     	; 0x1838 <vfprintf+0x342>
    181a:	60 81       	ld	r22, Z
    181c:	71 81       	ldd	r23, Z+1	; 0x01
    181e:	82 81       	ldd	r24, Z+2	; 0x02
    1820:	93 81       	ldd	r25, Z+3	; 0x03
    1822:	0c 5f       	subi	r16, 0xFC	; 252
    1824:	1f 4f       	sbci	r17, 0xFF	; 255
    1826:	a5 01       	movw	r20, r10
    1828:	0e 94 9b 0c 	call	0x1936	; 0x1936 <__ultoa_invert>
    182c:	c8 2e       	mov	r12, r24
    182e:	ca 18       	sub	r12, r10
    1830:	3d 2c       	mov	r3, r13
    1832:	e8 94       	clt
    1834:	37 f8       	bld	r3, 7
    1836:	67 cf       	rjmp	.-306    	; 0x1706 <vfprintf+0x210>
    1838:	60 81       	ld	r22, Z
    183a:	71 81       	ldd	r23, Z+1	; 0x01
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	0e 5f       	subi	r16, 0xFE	; 254
    1842:	1f 4f       	sbci	r17, 0xFF	; 255
    1844:	f0 cf       	rjmp	.-32     	; 0x1826 <vfprintf+0x330>
    1846:	42 fc       	sbrc	r4, 2
    1848:	02 c0       	rjmp	.+4      	; 0x184e <vfprintf+0x358>
    184a:	83 94       	inc	r8
    184c:	78 cf       	rjmp	.-272    	; 0x173e <vfprintf+0x248>
    184e:	83 94       	inc	r8
    1850:	83 94       	inc	r8
    1852:	75 cf       	rjmp	.-278    	; 0x173e <vfprintf+0x248>
    1854:	84 2d       	mov	r24, r4
    1856:	86 78       	andi	r24, 0x86	; 134
    1858:	09 f4       	brne	.+2      	; 0x185c <vfprintf+0x366>
    185a:	71 cf       	rjmp	.-286    	; 0x173e <vfprintf+0x248>
    185c:	f6 cf       	rjmp	.-20     	; 0x184a <vfprintf+0x354>
    185e:	b7 01       	movw	r22, r14
    1860:	80 e2       	ldi	r24, 0x20	; 32
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <fputc>
    1868:	83 94       	inc	r8
    186a:	82 14       	cp	r8, r2
    186c:	c0 f3       	brcs	.-16     	; 0x185e <vfprintf+0x368>
    186e:	51 2c       	mov	r5, r1
    1870:	73 cf       	rjmp	.-282    	; 0x1758 <vfprintf+0x262>
    1872:	52 2c       	mov	r5, r2
    1874:	58 18       	sub	r5, r8
    1876:	82 14       	cp	r8, r2
    1878:	08 f4       	brcc	.+2      	; 0x187c <vfprintf+0x386>
    187a:	6e cf       	rjmp	.-292    	; 0x1758 <vfprintf+0x262>
    187c:	f8 cf       	rjmp	.-16     	; 0x186e <vfprintf+0x378>
    187e:	84 2d       	mov	r24, r4
    1880:	86 78       	andi	r24, 0x86	; 134
    1882:	09 f4       	brne	.+2      	; 0x1886 <vfprintf+0x390>
    1884:	7b cf       	rjmp	.-266    	; 0x177c <vfprintf+0x286>
    1886:	8b e2       	ldi	r24, 0x2B	; 43
    1888:	41 fe       	sbrs	r4, 1
    188a:	80 e2       	ldi	r24, 0x20	; 32
    188c:	47 fc       	sbrc	r4, 7
    188e:	8d e2       	ldi	r24, 0x2D	; 45
    1890:	b7 01       	movw	r22, r14
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	71 cf       	rjmp	.-286    	; 0x1778 <vfprintf+0x282>
    1896:	b7 01       	movw	r22, r14
    1898:	80 e3       	ldi	r24, 0x30	; 48
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <fputc>
    18a0:	9a 94       	dec	r9
    18a2:	6c cf       	rjmp	.-296    	; 0x177c <vfprintf+0x286>
    18a4:	8f ef       	ldi	r24, 0xFF	; 255
    18a6:	9f ef       	ldi	r25, 0xFF	; 255
    18a8:	99 cf       	rjmp	.-206    	; 0x17dc <vfprintf+0x2e6>

000018aa <strnlen_P>:
strnlen_P():
    18aa:	fc 01       	movw	r30, r24
    18ac:	05 90       	lpm	r0, Z+
    18ae:	61 50       	subi	r22, 0x01	; 1
    18b0:	70 40       	sbci	r23, 0x00	; 0
    18b2:	01 10       	cpse	r0, r1
    18b4:	d8 f7       	brcc	.-10     	; 0x18ac <strnlen_P+0x2>
    18b6:	80 95       	com	r24
    18b8:	90 95       	com	r25
    18ba:	8e 0f       	add	r24, r30
    18bc:	9f 1f       	adc	r25, r31
    18be:	08 95       	ret

000018c0 <strnlen>:
strnlen():
    18c0:	fc 01       	movw	r30, r24
    18c2:	61 50       	subi	r22, 0x01	; 1
    18c4:	70 40       	sbci	r23, 0x00	; 0
    18c6:	01 90       	ld	r0, Z+
    18c8:	01 10       	cpse	r0, r1
    18ca:	d8 f7       	brcc	.-10     	; 0x18c2 <strnlen+0x2>
    18cc:	80 95       	com	r24
    18ce:	90 95       	com	r25
    18d0:	8e 0f       	add	r24, r30
    18d2:	9f 1f       	adc	r25, r31
    18d4:	08 95       	ret

000018d6 <fputc>:
fputc():
    18d6:	0f 93       	push	r16
    18d8:	1f 93       	push	r17
    18da:	cf 93       	push	r28
    18dc:	df 93       	push	r29
    18de:	18 2f       	mov	r17, r24
    18e0:	09 2f       	mov	r16, r25
    18e2:	eb 01       	movw	r28, r22
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	81 fd       	sbrc	r24, 1
    18e8:	09 c0       	rjmp	.+18     	; 0x18fc <fputc+0x26>
    18ea:	1f ef       	ldi	r17, 0xFF	; 255
    18ec:	0f ef       	ldi	r16, 0xFF	; 255
    18ee:	81 2f       	mov	r24, r17
    18f0:	90 2f       	mov	r25, r16
    18f2:	df 91       	pop	r29
    18f4:	cf 91       	pop	r28
    18f6:	1f 91       	pop	r17
    18f8:	0f 91       	pop	r16
    18fa:	08 95       	ret
    18fc:	82 ff       	sbrs	r24, 2
    18fe:	14 c0       	rjmp	.+40     	; 0x1928 <fputc+0x52>
    1900:	2e 81       	ldd	r18, Y+6	; 0x06
    1902:	3f 81       	ldd	r19, Y+7	; 0x07
    1904:	8c 81       	ldd	r24, Y+4	; 0x04
    1906:	9d 81       	ldd	r25, Y+5	; 0x05
    1908:	28 17       	cp	r18, r24
    190a:	39 07       	cpc	r19, r25
    190c:	3c f4       	brge	.+14     	; 0x191c <fputc+0x46>
    190e:	e8 81       	ld	r30, Y
    1910:	f9 81       	ldd	r31, Y+1	; 0x01
    1912:	cf 01       	movw	r24, r30
    1914:	01 96       	adiw	r24, 0x01	; 1
    1916:	99 83       	std	Y+1, r25	; 0x01
    1918:	88 83       	st	Y, r24
    191a:	10 83       	st	Z, r17
    191c:	8e 81       	ldd	r24, Y+6	; 0x06
    191e:	9f 81       	ldd	r25, Y+7	; 0x07
    1920:	01 96       	adiw	r24, 0x01	; 1
    1922:	9f 83       	std	Y+7, r25	; 0x07
    1924:	8e 83       	std	Y+6, r24	; 0x06
    1926:	e3 cf       	rjmp	.-58     	; 0x18ee <fputc+0x18>
    1928:	e8 85       	ldd	r30, Y+8	; 0x08
    192a:	f9 85       	ldd	r31, Y+9	; 0x09
    192c:	81 2f       	mov	r24, r17
    192e:	09 95       	icall
    1930:	89 2b       	or	r24, r25
    1932:	a1 f3       	breq	.-24     	; 0x191c <fputc+0x46>
    1934:	da cf       	rjmp	.-76     	; 0x18ea <fputc+0x14>

00001936 <__ultoa_invert>:
__ultoa_invert():
    1936:	fa 01       	movw	r30, r20
    1938:	aa 27       	eor	r26, r26
    193a:	28 30       	cpi	r18, 0x08	; 8
    193c:	51 f1       	breq	.+84     	; 0x1992 <__ultoa_invert+0x5c>
    193e:	20 31       	cpi	r18, 0x10	; 16
    1940:	81 f1       	breq	.+96     	; 0x19a2 <__ultoa_invert+0x6c>
    1942:	e8 94       	clt
    1944:	6f 93       	push	r22
    1946:	6e 7f       	andi	r22, 0xFE	; 254
    1948:	6e 5f       	subi	r22, 0xFE	; 254
    194a:	7f 4f       	sbci	r23, 0xFF	; 255
    194c:	8f 4f       	sbci	r24, 0xFF	; 255
    194e:	9f 4f       	sbci	r25, 0xFF	; 255
    1950:	af 4f       	sbci	r26, 0xFF	; 255
    1952:	b1 e0       	ldi	r27, 0x01	; 1
    1954:	3e d0       	rcall	.+124    	; 0x19d2 <__ultoa_invert+0x9c>
    1956:	b4 e0       	ldi	r27, 0x04	; 4
    1958:	3c d0       	rcall	.+120    	; 0x19d2 <__ultoa_invert+0x9c>
    195a:	67 0f       	add	r22, r23
    195c:	78 1f       	adc	r23, r24
    195e:	89 1f       	adc	r24, r25
    1960:	9a 1f       	adc	r25, r26
    1962:	a1 1d       	adc	r26, r1
    1964:	68 0f       	add	r22, r24
    1966:	79 1f       	adc	r23, r25
    1968:	8a 1f       	adc	r24, r26
    196a:	91 1d       	adc	r25, r1
    196c:	a1 1d       	adc	r26, r1
    196e:	6a 0f       	add	r22, r26
    1970:	71 1d       	adc	r23, r1
    1972:	81 1d       	adc	r24, r1
    1974:	91 1d       	adc	r25, r1
    1976:	a1 1d       	adc	r26, r1
    1978:	20 d0       	rcall	.+64     	; 0x19ba <__ultoa_invert+0x84>
    197a:	09 f4       	brne	.+2      	; 0x197e <__ultoa_invert+0x48>
    197c:	68 94       	set
    197e:	3f 91       	pop	r19
    1980:	2a e0       	ldi	r18, 0x0A	; 10
    1982:	26 9f       	mul	r18, r22
    1984:	11 24       	eor	r1, r1
    1986:	30 19       	sub	r19, r0
    1988:	30 5d       	subi	r19, 0xD0	; 208
    198a:	31 93       	st	Z+, r19
    198c:	de f6       	brtc	.-74     	; 0x1944 <__ultoa_invert+0xe>
    198e:	cf 01       	movw	r24, r30
    1990:	08 95       	ret
    1992:	46 2f       	mov	r20, r22
    1994:	47 70       	andi	r20, 0x07	; 7
    1996:	40 5d       	subi	r20, 0xD0	; 208
    1998:	41 93       	st	Z+, r20
    199a:	b3 e0       	ldi	r27, 0x03	; 3
    199c:	0f d0       	rcall	.+30     	; 0x19bc <__ultoa_invert+0x86>
    199e:	c9 f7       	brne	.-14     	; 0x1992 <__ultoa_invert+0x5c>
    19a0:	f6 cf       	rjmp	.-20     	; 0x198e <__ultoa_invert+0x58>
    19a2:	46 2f       	mov	r20, r22
    19a4:	4f 70       	andi	r20, 0x0F	; 15
    19a6:	40 5d       	subi	r20, 0xD0	; 208
    19a8:	4a 33       	cpi	r20, 0x3A	; 58
    19aa:	18 f0       	brcs	.+6      	; 0x19b2 <__ultoa_invert+0x7c>
    19ac:	49 5d       	subi	r20, 0xD9	; 217
    19ae:	31 fd       	sbrc	r19, 1
    19b0:	40 52       	subi	r20, 0x20	; 32
    19b2:	41 93       	st	Z+, r20
    19b4:	02 d0       	rcall	.+4      	; 0x19ba <__ultoa_invert+0x84>
    19b6:	a9 f7       	brne	.-22     	; 0x19a2 <__ultoa_invert+0x6c>
    19b8:	ea cf       	rjmp	.-44     	; 0x198e <__ultoa_invert+0x58>
    19ba:	b4 e0       	ldi	r27, 0x04	; 4
    19bc:	a6 95       	lsr	r26
    19be:	97 95       	ror	r25
    19c0:	87 95       	ror	r24
    19c2:	77 95       	ror	r23
    19c4:	67 95       	ror	r22
    19c6:	ba 95       	dec	r27
    19c8:	c9 f7       	brne	.-14     	; 0x19bc <__ultoa_invert+0x86>
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	61 05       	cpc	r22, r1
    19ce:	71 05       	cpc	r23, r1
    19d0:	08 95       	ret
    19d2:	9b 01       	movw	r18, r22
    19d4:	ac 01       	movw	r20, r24
    19d6:	0a 2e       	mov	r0, r26
    19d8:	06 94       	lsr	r0
    19da:	57 95       	ror	r21
    19dc:	47 95       	ror	r20
    19de:	37 95       	ror	r19
    19e0:	27 95       	ror	r18
    19e2:	ba 95       	dec	r27
    19e4:	c9 f7       	brne	.-14     	; 0x19d8 <__ultoa_invert+0xa2>
    19e6:	62 0f       	add	r22, r18
    19e8:	73 1f       	adc	r23, r19
    19ea:	84 1f       	adc	r24, r20
    19ec:	95 1f       	adc	r25, r21
    19ee:	a0 1d       	adc	r26, r0
    19f0:	08 95       	ret

000019f2 <__prologue_saves__>:
__prologue_saves__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    19f2:	2f 92       	push	r2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    19f4:	3f 92       	push	r3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    19f6:	4f 92       	push	r4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    19f8:	5f 92       	push	r5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    19fa:	6f 92       	push	r6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    19fc:	7f 92       	push	r7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    19fe:	8f 92       	push	r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    1a00:	9f 92       	push	r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    1a02:	af 92       	push	r10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    1a04:	bf 92       	push	r11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    1a06:	cf 92       	push	r12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    1a08:	df 92       	push	r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    1a0a:	ef 92       	push	r14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    1a0c:	ff 92       	push	r15
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    1a0e:	0f 93       	push	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    1a10:	1f 93       	push	r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    1a12:	cf 93       	push	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    1a14:	df 93       	push	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    1a16:	cd b7       	in	r28, 0x3d	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    1a18:	de b7       	in	r29, 0x3e	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    1a1a:	ca 1b       	sub	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    1a1c:	db 0b       	sbc	r29, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    1a1e:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    1a20:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    1a22:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    1a24:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    1a26:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    1a28:	09 94       	ijmp

00001a2a <__epilogue_restores__>:
__epilogue_restores__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    1a2a:	2a 88       	ldd	r2, Y+18	; 0x12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    1a2c:	39 88       	ldd	r3, Y+17	; 0x11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    1a2e:	48 88       	ldd	r4, Y+16	; 0x10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    1a30:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    1a32:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    1a34:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    1a36:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    1a38:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    1a3a:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    1a3c:	b9 84       	ldd	r11, Y+9	; 0x09
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    1a3e:	c8 84       	ldd	r12, Y+8	; 0x08
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    1a40:	df 80       	ldd	r13, Y+7	; 0x07
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    1a42:	ee 80       	ldd	r14, Y+6	; 0x06
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    1a44:	fd 80       	ldd	r15, Y+5	; 0x05
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    1a46:	0c 81       	ldd	r16, Y+4	; 0x04
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    1a48:	1b 81       	ldd	r17, Y+3	; 0x03
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    1a4a:	aa 81       	ldd	r26, Y+2	; 0x02
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    1a4c:	b9 81       	ldd	r27, Y+1	; 0x01
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    1a4e:	ce 0f       	add	r28, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    1a50:	d1 1d       	adc	r29, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    1a52:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    1a54:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    1a56:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    1a58:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    1a5a:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    1a5c:	ed 01       	movw	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    1a5e:	08 95       	ret

00001a60 <__subsf3>:
__subsf3():
    1a60:	50 58       	subi	r21, 0x80	; 128

00001a62 <__addsf3>:
    1a62:	bb 27       	eor	r27, r27
    1a64:	aa 27       	eor	r26, r26
    1a66:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__addsf3x>
    1a6a:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__fp_round>
__addsf3():
    1a6e:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__fp_pscA>
    1a72:	38 f0       	brcs	.+14     	; 0x1a82 <__addsf3+0x20>
    1a74:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__fp_pscB>
    1a78:	20 f0       	brcs	.+8      	; 0x1a82 <__addsf3+0x20>
    1a7a:	39 f4       	brne	.+14     	; 0x1a8a <__addsf3+0x28>
    1a7c:	9f 3f       	cpi	r25, 0xFF	; 255
    1a7e:	19 f4       	brne	.+6      	; 0x1a86 <__addsf3+0x24>
    1a80:	26 f4       	brtc	.+8      	; 0x1a8a <__addsf3+0x28>
    1a82:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__fp_nan>
    1a86:	0e f4       	brtc	.+2      	; 0x1a8a <__addsf3+0x28>
    1a88:	e0 95       	com	r30
    1a8a:	e7 fb       	bst	r30, 7
    1a8c:	0c 94 ab 0e 	jmp	0x1d56	; 0x1d56 <__fp_inf>

00001a90 <__addsf3x>:
__addsf3x():
    1a90:	e9 2f       	mov	r30, r25
    1a92:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__fp_split3>
    1a96:	58 f3       	brcs	.-42     	; 0x1a6e <__addsf3+0xc>
    1a98:	ba 17       	cp	r27, r26
    1a9a:	62 07       	cpc	r22, r18
    1a9c:	73 07       	cpc	r23, r19
    1a9e:	84 07       	cpc	r24, r20
    1aa0:	95 07       	cpc	r25, r21
    1aa2:	20 f0       	brcs	.+8      	; 0x1aac <__addsf3x+0x1c>
    1aa4:	79 f4       	brne	.+30     	; 0x1ac4 <__addsf3x+0x34>
    1aa6:	a6 f5       	brtc	.+104    	; 0x1b10 <__addsf3x+0x80>
    1aa8:	0c 94 f5 0e 	jmp	0x1dea	; 0x1dea <__fp_zero>
    1aac:	0e f4       	brtc	.+2      	; 0x1ab0 <__addsf3x+0x20>
    1aae:	e0 95       	com	r30
    1ab0:	0b 2e       	mov	r0, r27
    1ab2:	ba 2f       	mov	r27, r26
    1ab4:	a0 2d       	mov	r26, r0
    1ab6:	0b 01       	movw	r0, r22
    1ab8:	b9 01       	movw	r22, r18
    1aba:	90 01       	movw	r18, r0
    1abc:	0c 01       	movw	r0, r24
    1abe:	ca 01       	movw	r24, r20
    1ac0:	a0 01       	movw	r20, r0
    1ac2:	11 24       	eor	r1, r1
    1ac4:	ff 27       	eor	r31, r31
    1ac6:	59 1b       	sub	r21, r25
    1ac8:	99 f0       	breq	.+38     	; 0x1af0 <__addsf3x+0x60>
    1aca:	59 3f       	cpi	r21, 0xF9	; 249
    1acc:	50 f4       	brcc	.+20     	; 0x1ae2 <__addsf3x+0x52>
    1ace:	50 3e       	cpi	r21, 0xE0	; 224
    1ad0:	68 f1       	brcs	.+90     	; 0x1b2c <__addsf3x+0x9c>
    1ad2:	1a 16       	cp	r1, r26
    1ad4:	f0 40       	sbci	r31, 0x00	; 0
    1ad6:	a2 2f       	mov	r26, r18
    1ad8:	23 2f       	mov	r18, r19
    1ada:	34 2f       	mov	r19, r20
    1adc:	44 27       	eor	r20, r20
    1ade:	58 5f       	subi	r21, 0xF8	; 248
    1ae0:	f3 cf       	rjmp	.-26     	; 0x1ac8 <__addsf3x+0x38>
    1ae2:	46 95       	lsr	r20
    1ae4:	37 95       	ror	r19
    1ae6:	27 95       	ror	r18
    1ae8:	a7 95       	ror	r26
    1aea:	f0 40       	sbci	r31, 0x00	; 0
    1aec:	53 95       	inc	r21
    1aee:	c9 f7       	brne	.-14     	; 0x1ae2 <__addsf3x+0x52>
    1af0:	7e f4       	brtc	.+30     	; 0x1b10 <__addsf3x+0x80>
    1af2:	1f 16       	cp	r1, r31
    1af4:	ba 0b       	sbc	r27, r26
    1af6:	62 0b       	sbc	r22, r18
    1af8:	73 0b       	sbc	r23, r19
    1afa:	84 0b       	sbc	r24, r20
    1afc:	ba f0       	brmi	.+46     	; 0x1b2c <__addsf3x+0x9c>
    1afe:	91 50       	subi	r25, 0x01	; 1
    1b00:	a1 f0       	breq	.+40     	; 0x1b2a <__addsf3x+0x9a>
    1b02:	ff 0f       	add	r31, r31
    1b04:	bb 1f       	adc	r27, r27
    1b06:	66 1f       	adc	r22, r22
    1b08:	77 1f       	adc	r23, r23
    1b0a:	88 1f       	adc	r24, r24
    1b0c:	c2 f7       	brpl	.-16     	; 0x1afe <__addsf3x+0x6e>
    1b0e:	0e c0       	rjmp	.+28     	; 0x1b2c <__addsf3x+0x9c>
    1b10:	ba 0f       	add	r27, r26
    1b12:	62 1f       	adc	r22, r18
    1b14:	73 1f       	adc	r23, r19
    1b16:	84 1f       	adc	r24, r20
    1b18:	48 f4       	brcc	.+18     	; 0x1b2c <__addsf3x+0x9c>
    1b1a:	87 95       	ror	r24
    1b1c:	77 95       	ror	r23
    1b1e:	67 95       	ror	r22
    1b20:	b7 95       	ror	r27
    1b22:	f7 95       	ror	r31
    1b24:	9e 3f       	cpi	r25, 0xFE	; 254
    1b26:	08 f0       	brcs	.+2      	; 0x1b2a <__addsf3x+0x9a>
    1b28:	b0 cf       	rjmp	.-160    	; 0x1a8a <__addsf3+0x28>
    1b2a:	93 95       	inc	r25
    1b2c:	88 0f       	add	r24, r24
    1b2e:	08 f0       	brcs	.+2      	; 0x1b32 <__addsf3x+0xa2>
    1b30:	99 27       	eor	r25, r25
    1b32:	ee 0f       	add	r30, r30
    1b34:	97 95       	ror	r25
    1b36:	87 95       	ror	r24
    1b38:	08 95       	ret

00001b3a <__cmpsf2>:
    1b3a:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__fp_cmp>
    1b3e:	08 f4       	brcc	.+2      	; 0x1b42 <__cmpsf2+0x8>
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	08 95       	ret

00001b44 <__divsf3>:
    1b44:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__divsf3x>
    1b48:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__fp_round>
    1b4c:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__fp_pscB>
    1b50:	58 f0       	brcs	.+22     	; 0x1b68 <__divsf3+0x24>
    1b52:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__fp_pscA>
    1b56:	40 f0       	brcs	.+16     	; 0x1b68 <__divsf3+0x24>
    1b58:	29 f4       	brne	.+10     	; 0x1b64 <__divsf3+0x20>
    1b5a:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
    1b5c:	29 f0       	breq	.+10     	; 0x1b68 <__divsf3+0x24>
    1b5e:	0c 94 ab 0e 	jmp	0x1d56	; 0x1d56 <__fp_inf>
    1b62:	51 11       	cpse	r21, r1
    1b64:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <__fp_szero>
    1b68:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__fp_nan>

00001b6c <__divsf3x>:
__divsf3x():
    1b6c:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__fp_split3>
    1b70:	68 f3       	brcs	.-38     	; 0x1b4c <__divsf3+0x8>

00001b72 <__divsf3_pse>:
    1b72:	99 23       	and	r25, r25
    1b74:	b1 f3       	breq	.-20     	; 0x1b62 <__divsf3+0x1e>
    1b76:	55 23       	and	r21, r21
    1b78:	91 f3       	breq	.-28     	; 0x1b5e <__divsf3+0x1a>
    1b7a:	95 1b       	sub	r25, r21
    1b7c:	55 0b       	sbc	r21, r21
    1b7e:	bb 27       	eor	r27, r27
    1b80:	aa 27       	eor	r26, r26
    1b82:	62 17       	cp	r22, r18
    1b84:	73 07       	cpc	r23, r19
    1b86:	84 07       	cpc	r24, r20
    1b88:	38 f0       	brcs	.+14     	; 0x1b98 <__divsf3_pse+0x26>
    1b8a:	9f 5f       	subi	r25, 0xFF	; 255
    1b8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b8e:	22 0f       	add	r18, r18
    1b90:	33 1f       	adc	r19, r19
    1b92:	44 1f       	adc	r20, r20
    1b94:	aa 1f       	adc	r26, r26
    1b96:	a9 f3       	breq	.-22     	; 0x1b82 <__divsf3_pse+0x10>
    1b98:	35 d0       	rcall	.+106    	; 0x1c04 <__divsf3_pse+0x92>
    1b9a:	0e 2e       	mov	r0, r30
    1b9c:	3a f0       	brmi	.+14     	; 0x1bac <__divsf3_pse+0x3a>
    1b9e:	e0 e8       	ldi	r30, 0x80	; 128
    1ba0:	32 d0       	rcall	.+100    	; 0x1c06 <__divsf3_pse+0x94>
    1ba2:	91 50       	subi	r25, 0x01	; 1
    1ba4:	50 40       	sbci	r21, 0x00	; 0
    1ba6:	e6 95       	lsr	r30
    1ba8:	00 1c       	adc	r0, r0
    1baa:	ca f7       	brpl	.-14     	; 0x1b9e <__divsf3_pse+0x2c>
    1bac:	2b d0       	rcall	.+86     	; 0x1c04 <__divsf3_pse+0x92>
    1bae:	fe 2f       	mov	r31, r30
    1bb0:	29 d0       	rcall	.+82     	; 0x1c04 <__divsf3_pse+0x92>
    1bb2:	66 0f       	add	r22, r22
    1bb4:	77 1f       	adc	r23, r23
    1bb6:	88 1f       	adc	r24, r24
    1bb8:	bb 1f       	adc	r27, r27
    1bba:	26 17       	cp	r18, r22
    1bbc:	37 07       	cpc	r19, r23
    1bbe:	48 07       	cpc	r20, r24
    1bc0:	ab 07       	cpc	r26, r27
    1bc2:	b0 e8       	ldi	r27, 0x80	; 128
    1bc4:	09 f0       	breq	.+2      	; 0x1bc8 <__divsf3_pse+0x56>
    1bc6:	bb 0b       	sbc	r27, r27
    1bc8:	80 2d       	mov	r24, r0
    1bca:	bf 01       	movw	r22, r30
    1bcc:	ff 27       	eor	r31, r31
    1bce:	93 58       	subi	r25, 0x83	; 131
    1bd0:	5f 4f       	sbci	r21, 0xFF	; 255
    1bd2:	3a f0       	brmi	.+14     	; 0x1be2 <__divsf3_pse+0x70>
    1bd4:	9e 3f       	cpi	r25, 0xFE	; 254
    1bd6:	51 05       	cpc	r21, r1
    1bd8:	78 f0       	brcs	.+30     	; 0x1bf8 <__divsf3_pse+0x86>
    1bda:	0c 94 ab 0e 	jmp	0x1d56	; 0x1d56 <__fp_inf>
    1bde:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <__fp_szero>
    1be2:	5f 3f       	cpi	r21, 0xFF	; 255
    1be4:	e4 f3       	brlt	.-8      	; 0x1bde <__divsf3_pse+0x6c>
    1be6:	98 3e       	cpi	r25, 0xE8	; 232
    1be8:	d4 f3       	brlt	.-12     	; 0x1bde <__divsf3_pse+0x6c>
    1bea:	86 95       	lsr	r24
    1bec:	77 95       	ror	r23
    1bee:	67 95       	ror	r22
    1bf0:	b7 95       	ror	r27
    1bf2:	f7 95       	ror	r31
    1bf4:	9f 5f       	subi	r25, 0xFF	; 255
    1bf6:	c9 f7       	brne	.-14     	; 0x1bea <__divsf3_pse+0x78>
    1bf8:	88 0f       	add	r24, r24
    1bfa:	91 1d       	adc	r25, r1
    1bfc:	96 95       	lsr	r25
    1bfe:	87 95       	ror	r24
    1c00:	97 f9       	bld	r25, 7
    1c02:	08 95       	ret
    1c04:	e1 e0       	ldi	r30, 0x01	; 1
    1c06:	66 0f       	add	r22, r22
    1c08:	77 1f       	adc	r23, r23
    1c0a:	88 1f       	adc	r24, r24
    1c0c:	bb 1f       	adc	r27, r27
    1c0e:	62 17       	cp	r22, r18
    1c10:	73 07       	cpc	r23, r19
    1c12:	84 07       	cpc	r24, r20
    1c14:	ba 07       	cpc	r27, r26
    1c16:	20 f0       	brcs	.+8      	; 0x1c20 <__divsf3_pse+0xae>
    1c18:	62 1b       	sub	r22, r18
    1c1a:	73 0b       	sbc	r23, r19
    1c1c:	84 0b       	sbc	r24, r20
    1c1e:	ba 0b       	sbc	r27, r26
    1c20:	ee 1f       	adc	r30, r30
    1c22:	88 f7       	brcc	.-30     	; 0x1c06 <__divsf3_pse+0x94>
    1c24:	e0 95       	com	r30
    1c26:	08 95       	ret

00001c28 <__fixsfsi>:
    1c28:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <__fixunssfsi>
    1c2c:	68 94       	set
    1c2e:	b1 11       	cpse	r27, r1
    1c30:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <__fp_szero>
    1c34:	08 95       	ret

00001c36 <__fixunssfsi>:
    1c36:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <__fp_splitA>
    1c3a:	88 f0       	brcs	.+34     	; 0x1c5e <__fixunssfsi+0x28>
    1c3c:	9f 57       	subi	r25, 0x7F	; 127
    1c3e:	98 f0       	brcs	.+38     	; 0x1c66 <__fixunssfsi+0x30>
    1c40:	b9 2f       	mov	r27, r25
    1c42:	99 27       	eor	r25, r25
    1c44:	b7 51       	subi	r27, 0x17	; 23
    1c46:	b0 f0       	brcs	.+44     	; 0x1c74 <__fixunssfsi+0x3e>
__fixunssfsi():
    1c48:	e1 f0       	breq	.+56     	; 0x1c82 <__fixunssfsi+0x4c>
    1c4a:	66 0f       	add	r22, r22
    1c4c:	77 1f       	adc	r23, r23
    1c4e:	88 1f       	adc	r24, r24
    1c50:	99 1f       	adc	r25, r25
    1c52:	1a f0       	brmi	.+6      	; 0x1c5a <__fixunssfsi+0x24>
    1c54:	ba 95       	dec	r27
    1c56:	c9 f7       	brne	.-14     	; 0x1c4a <__fixunssfsi+0x14>
    1c58:	14 c0       	rjmp	.+40     	; 0x1c82 <__fixunssfsi+0x4c>
    1c5a:	b1 30       	cpi	r27, 0x01	; 1
    1c5c:	91 f0       	breq	.+36     	; 0x1c82 <__fixunssfsi+0x4c>
    1c5e:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__fp_zero>
    1c62:	b1 e0       	ldi	r27, 0x01	; 1
    1c64:	08 95       	ret
    1c66:	0c 94 f5 0e 	jmp	0x1dea	; 0x1dea <__fp_zero>
    1c6a:	67 2f       	mov	r22, r23
    1c6c:	78 2f       	mov	r23, r24
    1c6e:	88 27       	eor	r24, r24
    1c70:	b8 5f       	subi	r27, 0xF8	; 248
    1c72:	39 f0       	breq	.+14     	; 0x1c82 <__fixunssfsi+0x4c>
    1c74:	b9 3f       	cpi	r27, 0xF9	; 249
    1c76:	cc f3       	brlt	.-14     	; 0x1c6a <__fixunssfsi+0x34>
    1c78:	86 95       	lsr	r24
    1c7a:	77 95       	ror	r23
    1c7c:	67 95       	ror	r22
    1c7e:	b3 95       	inc	r27
    1c80:	d9 f7       	brne	.-10     	; 0x1c78 <__fixunssfsi+0x42>
    1c82:	3e f4       	brtc	.+14     	; 0x1c92 <__fixunssfsi+0x5c>
    1c84:	90 95       	com	r25
    1c86:	80 95       	com	r24
    1c88:	70 95       	com	r23
    1c8a:	61 95       	neg	r22
    1c8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c8e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c90:	9f 4f       	sbci	r25, 0xFF	; 255
    1c92:	08 95       	ret

00001c94 <__floatunsisf>:
__floatunsisf():
    1c94:	e8 94       	clt
    1c96:	09 c0       	rjmp	.+18     	; 0x1caa <__floatsisf+0x12>

00001c98 <__floatsisf>:
    1c98:	97 fb       	bst	r25, 7
    1c9a:	3e f4       	brtc	.+14     	; 0x1caa <__floatsisf+0x12>
    1c9c:	90 95       	com	r25
    1c9e:	80 95       	com	r24
    1ca0:	70 95       	com	r23
    1ca2:	61 95       	neg	r22
    1ca4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    1caa:	99 23       	and	r25, r25
    1cac:	a9 f0       	breq	.+42     	; 0x1cd8 <__floatsisf+0x40>
    1cae:	f9 2f       	mov	r31, r25
    1cb0:	96 e9       	ldi	r25, 0x96	; 150
    1cb2:	bb 27       	eor	r27, r27
    1cb4:	93 95       	inc	r25
    1cb6:	f6 95       	lsr	r31
    1cb8:	87 95       	ror	r24
    1cba:	77 95       	ror	r23
    1cbc:	67 95       	ror	r22
    1cbe:	b7 95       	ror	r27
    1cc0:	f1 11       	cpse	r31, r1
    1cc2:	f8 cf       	rjmp	.-16     	; 0x1cb4 <__floatsisf+0x1c>
    1cc4:	fa f4       	brpl	.+62     	; 0x1d04 <__floatsisf+0x6c>
    1cc6:	bb 0f       	add	r27, r27
    1cc8:	11 f4       	brne	.+4      	; 0x1cce <__floatsisf+0x36>
    1cca:	60 ff       	sbrs	r22, 0
    1ccc:	1b c0       	rjmp	.+54     	; 0x1d04 <__floatsisf+0x6c>
    1cce:	6f 5f       	subi	r22, 0xFF	; 255
    1cd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd2:	8f 4f       	sbci	r24, 0xFF	; 255
    1cd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd6:	16 c0       	rjmp	.+44     	; 0x1d04 <__floatsisf+0x6c>
    1cd8:	88 23       	and	r24, r24
    1cda:	11 f0       	breq	.+4      	; 0x1ce0 <__floatsisf+0x48>
    1cdc:	96 e9       	ldi	r25, 0x96	; 150
    1cde:	11 c0       	rjmp	.+34     	; 0x1d02 <__floatsisf+0x6a>
    1ce0:	77 23       	and	r23, r23
    1ce2:	21 f0       	breq	.+8      	; 0x1cec <__floatsisf+0x54>
    1ce4:	9e e8       	ldi	r25, 0x8E	; 142
    1ce6:	87 2f       	mov	r24, r23
    1ce8:	76 2f       	mov	r23, r22
    1cea:	05 c0       	rjmp	.+10     	; 0x1cf6 <__floatsisf+0x5e>
    1cec:	66 23       	and	r22, r22
    1cee:	71 f0       	breq	.+28     	; 0x1d0c <__floatsisf+0x74>
    1cf0:	96 e8       	ldi	r25, 0x86	; 134
    1cf2:	86 2f       	mov	r24, r22
    1cf4:	70 e0       	ldi	r23, 0x00	; 0
    1cf6:	60 e0       	ldi	r22, 0x00	; 0
    1cf8:	2a f0       	brmi	.+10     	; 0x1d04 <__floatsisf+0x6c>
    1cfa:	9a 95       	dec	r25
    1cfc:	66 0f       	add	r22, r22
    1cfe:	77 1f       	adc	r23, r23
    1d00:	88 1f       	adc	r24, r24
    1d02:	da f7       	brpl	.-10     	; 0x1cfa <__floatsisf+0x62>
    1d04:	88 0f       	add	r24, r24
    1d06:	96 95       	lsr	r25
    1d08:	87 95       	ror	r24
    1d0a:	97 f9       	bld	r25, 7
    1d0c:	08 95       	ret

00001d0e <__fp_cmp>:
__fp_cmp():
    1d0e:	99 0f       	add	r25, r25
    1d10:	00 08       	sbc	r0, r0
    1d12:	55 0f       	add	r21, r21
    1d14:	aa 0b       	sbc	r26, r26
    1d16:	e0 e8       	ldi	r30, 0x80	; 128
    1d18:	fe ef       	ldi	r31, 0xFE	; 254
    1d1a:	16 16       	cp	r1, r22
    1d1c:	17 06       	cpc	r1, r23
    1d1e:	e8 07       	cpc	r30, r24
    1d20:	f9 07       	cpc	r31, r25
    1d22:	c0 f0       	brcs	.+48     	; 0x1d54 <__fp_cmp+0x46>
    1d24:	12 16       	cp	r1, r18
    1d26:	13 06       	cpc	r1, r19
    1d28:	e4 07       	cpc	r30, r20
    1d2a:	f5 07       	cpc	r31, r21
    1d2c:	98 f0       	brcs	.+38     	; 0x1d54 <__fp_cmp+0x46>
    1d2e:	62 1b       	sub	r22, r18
    1d30:	73 0b       	sbc	r23, r19
    1d32:	84 0b       	sbc	r24, r20
    1d34:	95 0b       	sbc	r25, r21
    1d36:	39 f4       	brne	.+14     	; 0x1d46 <__fp_cmp+0x38>
    1d38:	0a 26       	eor	r0, r26
    1d3a:	61 f0       	breq	.+24     	; 0x1d54 <__fp_cmp+0x46>
    1d3c:	23 2b       	or	r18, r19
    1d3e:	24 2b       	or	r18, r20
    1d40:	25 2b       	or	r18, r21
    1d42:	21 f4       	brne	.+8      	; 0x1d4c <__fp_cmp+0x3e>
    1d44:	08 95       	ret
    1d46:	0a 26       	eor	r0, r26
    1d48:	09 f4       	brne	.+2      	; 0x1d4c <__fp_cmp+0x3e>
    1d4a:	a1 40       	sbci	r26, 0x01	; 1
    1d4c:	a6 95       	lsr	r26
    1d4e:	8f ef       	ldi	r24, 0xFF	; 255
    1d50:	81 1d       	adc	r24, r1
    1d52:	81 1d       	adc	r24, r1
    1d54:	08 95       	ret

00001d56 <__fp_inf>:
__fp_inf():
    1d56:	97 f9       	bld	r25, 7
    1d58:	9f 67       	ori	r25, 0x7F	; 127
    1d5a:	80 e8       	ldi	r24, 0x80	; 128
    1d5c:	70 e0       	ldi	r23, 0x00	; 0
    1d5e:	60 e0       	ldi	r22, 0x00	; 0
    1d60:	08 95       	ret

00001d62 <__fp_nan>:
__fp_nan():
    1d62:	9f ef       	ldi	r25, 0xFF	; 255
    1d64:	80 ec       	ldi	r24, 0xC0	; 192
    1d66:	08 95       	ret

00001d68 <__fp_pscA>:
__fp_pscA():
    1d68:	00 24       	eor	r0, r0
    1d6a:	0a 94       	dec	r0
    1d6c:	16 16       	cp	r1, r22
    1d6e:	17 06       	cpc	r1, r23
    1d70:	18 06       	cpc	r1, r24
    1d72:	09 06       	cpc	r0, r25
    1d74:	08 95       	ret

00001d76 <__fp_pscB>:
__fp_pscB():
    1d76:	00 24       	eor	r0, r0
    1d78:	0a 94       	dec	r0
    1d7a:	12 16       	cp	r1, r18
    1d7c:	13 06       	cpc	r1, r19
    1d7e:	14 06       	cpc	r1, r20
    1d80:	05 06       	cpc	r0, r21
    1d82:	08 95       	ret

00001d84 <__fp_round>:
__fp_round():
    1d84:	09 2e       	mov	r0, r25
    1d86:	03 94       	inc	r0
    1d88:	00 0c       	add	r0, r0
    1d8a:	11 f4       	brne	.+4      	; 0x1d90 <__fp_round+0xc>
    1d8c:	88 23       	and	r24, r24
    1d8e:	52 f0       	brmi	.+20     	; 0x1da4 <__fp_round+0x20>
    1d90:	bb 0f       	add	r27, r27
    1d92:	40 f4       	brcc	.+16     	; 0x1da4 <__fp_round+0x20>
    1d94:	bf 2b       	or	r27, r31
    1d96:	11 f4       	brne	.+4      	; 0x1d9c <__fp_round+0x18>
    1d98:	60 ff       	sbrs	r22, 0
    1d9a:	04 c0       	rjmp	.+8      	; 0x1da4 <__fp_round+0x20>
    1d9c:	6f 5f       	subi	r22, 0xFF	; 255
    1d9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1da0:	8f 4f       	sbci	r24, 0xFF	; 255
    1da2:	9f 4f       	sbci	r25, 0xFF	; 255
    1da4:	08 95       	ret

00001da6 <__fp_split3>:
__fp_split3():
    1da6:	57 fd       	sbrc	r21, 7
    1da8:	90 58       	subi	r25, 0x80	; 128
    1daa:	44 0f       	add	r20, r20
    1dac:	55 1f       	adc	r21, r21
    1dae:	59 f0       	breq	.+22     	; 0x1dc6 <__fp_splitA+0x10>
    1db0:	5f 3f       	cpi	r21, 0xFF	; 255
    1db2:	71 f0       	breq	.+28     	; 0x1dd0 <__fp_splitA+0x1a>
    1db4:	47 95       	ror	r20

00001db6 <__fp_splitA>:
    1db6:	88 0f       	add	r24, r24
    1db8:	97 fb       	bst	r25, 7
    1dba:	99 1f       	adc	r25, r25
    1dbc:	61 f0       	breq	.+24     	; 0x1dd6 <__fp_splitA+0x20>
    1dbe:	9f 3f       	cpi	r25, 0xFF	; 255
    1dc0:	79 f0       	breq	.+30     	; 0x1de0 <__fp_splitA+0x2a>
    1dc2:	87 95       	ror	r24
    1dc4:	08 95       	ret
    1dc6:	12 16       	cp	r1, r18
    1dc8:	13 06       	cpc	r1, r19
    1dca:	14 06       	cpc	r1, r20
    1dcc:	55 1f       	adc	r21, r21
    1dce:	f2 cf       	rjmp	.-28     	; 0x1db4 <__fp_split3+0xe>
    1dd0:	46 95       	lsr	r20
    1dd2:	f1 df       	rcall	.-30     	; 0x1db6 <__fp_splitA>
    1dd4:	08 c0       	rjmp	.+16     	; 0x1de6 <__fp_splitA+0x30>
    1dd6:	16 16       	cp	r1, r22
    1dd8:	17 06       	cpc	r1, r23
    1dda:	18 06       	cpc	r1, r24
    1ddc:	99 1f       	adc	r25, r25
    1dde:	f1 cf       	rjmp	.-30     	; 0x1dc2 <__fp_splitA+0xc>
    1de0:	86 95       	lsr	r24
    1de2:	71 05       	cpc	r23, r1
    1de4:	61 05       	cpc	r22, r1
    1de6:	08 94       	sec
    1de8:	08 95       	ret

00001dea <__fp_zero>:
__fp_zero():
    1dea:	e8 94       	clt

00001dec <__fp_szero>:
    1dec:	bb 27       	eor	r27, r27
    1dee:	66 27       	eor	r22, r22
    1df0:	77 27       	eor	r23, r23
    1df2:	cb 01       	movw	r24, r22
    1df4:	97 f9       	bld	r25, 7
    1df6:	08 95       	ret

00001df8 <__gesf2>:
__gesf2():
    1df8:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__fp_cmp>
    1dfc:	08 f4       	brcc	.+2      	; 0x1e00 <__gesf2+0x8>
    1dfe:	8f ef       	ldi	r24, 0xFF	; 255
    1e00:	08 95       	ret

00001e02 <__mulsf3>:
__mulsf3():
    1e02:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__mulsf3x>
    1e06:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__fp_round>
    1e0a:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__fp_pscA>
    1e0e:	38 f0       	brcs	.+14     	; 0x1e1e <__mulsf3+0x1c>
    1e10:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__fp_pscB>
    1e14:	20 f0       	brcs	.+8      	; 0x1e1e <__mulsf3+0x1c>
    1e16:	95 23       	and	r25, r21
    1e18:	11 f0       	breq	.+4      	; 0x1e1e <__mulsf3+0x1c>
    1e1a:	0c 94 ab 0e 	jmp	0x1d56	; 0x1d56 <__fp_inf>
    1e1e:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__fp_nan>
    1e22:	11 24       	eor	r1, r1
    1e24:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <__fp_szero>

00001e28 <__mulsf3x>:
__mulsf3x():
    1e28:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__fp_split3>
    1e2c:	70 f3       	brcs	.-36     	; 0x1e0a <__mulsf3+0x8>

00001e2e <__mulsf3_pse>:
    1e2e:	95 9f       	mul	r25, r21
    1e30:	c1 f3       	breq	.-16     	; 0x1e22 <__mulsf3+0x20>
    1e32:	95 0f       	add	r25, r21
    1e34:	50 e0       	ldi	r21, 0x00	; 0
    1e36:	55 1f       	adc	r21, r21
    1e38:	62 9f       	mul	r22, r18
    1e3a:	f0 01       	movw	r30, r0
    1e3c:	72 9f       	mul	r23, r18
    1e3e:	bb 27       	eor	r27, r27
    1e40:	f0 0d       	add	r31, r0
    1e42:	b1 1d       	adc	r27, r1
    1e44:	63 9f       	mul	r22, r19
    1e46:	aa 27       	eor	r26, r26
    1e48:	f0 0d       	add	r31, r0
    1e4a:	b1 1d       	adc	r27, r1
    1e4c:	aa 1f       	adc	r26, r26
    1e4e:	64 9f       	mul	r22, r20
    1e50:	66 27       	eor	r22, r22
    1e52:	b0 0d       	add	r27, r0
    1e54:	a1 1d       	adc	r26, r1
    1e56:	66 1f       	adc	r22, r22
    1e58:	82 9f       	mul	r24, r18
    1e5a:	22 27       	eor	r18, r18
    1e5c:	b0 0d       	add	r27, r0
    1e5e:	a1 1d       	adc	r26, r1
    1e60:	62 1f       	adc	r22, r18
    1e62:	73 9f       	mul	r23, r19
    1e64:	b0 0d       	add	r27, r0
    1e66:	a1 1d       	adc	r26, r1
    1e68:	62 1f       	adc	r22, r18
    1e6a:	83 9f       	mul	r24, r19
    1e6c:	a0 0d       	add	r26, r0
    1e6e:	61 1d       	adc	r22, r1
    1e70:	22 1f       	adc	r18, r18
    1e72:	74 9f       	mul	r23, r20
    1e74:	33 27       	eor	r19, r19
    1e76:	a0 0d       	add	r26, r0
    1e78:	61 1d       	adc	r22, r1
    1e7a:	23 1f       	adc	r18, r19
    1e7c:	84 9f       	mul	r24, r20
    1e7e:	60 0d       	add	r22, r0
    1e80:	21 1d       	adc	r18, r1
    1e82:	82 2f       	mov	r24, r18
    1e84:	76 2f       	mov	r23, r22
    1e86:	6a 2f       	mov	r22, r26
    1e88:	11 24       	eor	r1, r1
    1e8a:	9f 57       	subi	r25, 0x7F	; 127
    1e8c:	50 40       	sbci	r21, 0x00	; 0
    1e8e:	9a f0       	brmi	.+38     	; 0x1eb6 <__mulsf3_pse+0x88>
    1e90:	f1 f0       	breq	.+60     	; 0x1ece <__mulsf3_pse+0xa0>
    1e92:	88 23       	and	r24, r24
    1e94:	4a f0       	brmi	.+18     	; 0x1ea8 <__mulsf3_pse+0x7a>
    1e96:	ee 0f       	add	r30, r30
    1e98:	ff 1f       	adc	r31, r31
    1e9a:	bb 1f       	adc	r27, r27
    1e9c:	66 1f       	adc	r22, r22
    1e9e:	77 1f       	adc	r23, r23
    1ea0:	88 1f       	adc	r24, r24
    1ea2:	91 50       	subi	r25, 0x01	; 1
    1ea4:	50 40       	sbci	r21, 0x00	; 0
    1ea6:	a9 f7       	brne	.-22     	; 0x1e92 <__mulsf3_pse+0x64>
    1ea8:	9e 3f       	cpi	r25, 0xFE	; 254
    1eaa:	51 05       	cpc	r21, r1
    1eac:	80 f0       	brcs	.+32     	; 0x1ece <__mulsf3_pse+0xa0>
    1eae:	0c 94 ab 0e 	jmp	0x1d56	; 0x1d56 <__fp_inf>
    1eb2:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <__fp_szero>
    1eb6:	5f 3f       	cpi	r21, 0xFF	; 255
    1eb8:	e4 f3       	brlt	.-8      	; 0x1eb2 <__mulsf3_pse+0x84>
    1eba:	98 3e       	cpi	r25, 0xE8	; 232
    1ebc:	d4 f3       	brlt	.-12     	; 0x1eb2 <__mulsf3_pse+0x84>
    1ebe:	86 95       	lsr	r24
    1ec0:	77 95       	ror	r23
    1ec2:	67 95       	ror	r22
    1ec4:	b7 95       	ror	r27
    1ec6:	f7 95       	ror	r31
    1ec8:	e7 95       	ror	r30
    1eca:	9f 5f       	subi	r25, 0xFF	; 255
    1ecc:	c1 f7       	brne	.-16     	; 0x1ebe <__mulsf3_pse+0x90>
    1ece:	fe 2b       	or	r31, r30
    1ed0:	88 0f       	add	r24, r24
    1ed2:	91 1d       	adc	r25, r1
    1ed4:	96 95       	lsr	r25
    1ed6:	87 95       	ror	r24
    1ed8:	97 f9       	bld	r25, 7
    1eda:	08 95       	ret

00001edc <pow>:
    1edc:	fa 01       	movw	r30, r20
    1ede:	ee 0f       	add	r30, r30
    1ee0:	ff 1f       	adc	r31, r31
    1ee2:	30 96       	adiw	r30, 0x00	; 0
    1ee4:	21 05       	cpc	r18, r1
    1ee6:	31 05       	cpc	r19, r1
    1ee8:	a1 f1       	breq	.+104    	; 0x1f52 <pow+0x76>
    1eea:	61 15       	cp	r22, r1
    1eec:	71 05       	cpc	r23, r1
    1eee:	61 f4       	brne	.+24     	; 0x1f08 <pow+0x2c>
    1ef0:	80 38       	cpi	r24, 0x80	; 128
    1ef2:	bf e3       	ldi	r27, 0x3F	; 63
    1ef4:	9b 07       	cpc	r25, r27
    1ef6:	49 f1       	breq	.+82     	; 0x1f4a <pow+0x6e>
    1ef8:	68 94       	set
pow():
    1efa:	90 38       	cpi	r25, 0x80	; 128
    1efc:	81 05       	cpc	r24, r1
    1efe:	61 f0       	breq	.+24     	; 0x1f18 <pow+0x3c>
    1f00:	80 38       	cpi	r24, 0x80	; 128
    1f02:	bf ef       	ldi	r27, 0xFF	; 255
    1f04:	9b 07       	cpc	r25, r27
    1f06:	41 f0       	breq	.+16     	; 0x1f18 <pow+0x3c>
    1f08:	99 23       	and	r25, r25
    1f0a:	4a f5       	brpl	.+82     	; 0x1f5e <pow+0x82>
    1f0c:	ff 3f       	cpi	r31, 0xFF	; 255
    1f0e:	e1 05       	cpc	r30, r1
    1f10:	31 05       	cpc	r19, r1
    1f12:	21 05       	cpc	r18, r1
    1f14:	19 f1       	breq	.+70     	; 0x1f5c <pow+0x80>
    1f16:	e8 94       	clt
    1f18:	08 94       	sec
    1f1a:	e7 95       	ror	r30
    1f1c:	d9 01       	movw	r26, r18
    1f1e:	aa 23       	and	r26, r26
    1f20:	29 f4       	brne	.+10     	; 0x1f2c <pow+0x50>
    1f22:	ab 2f       	mov	r26, r27
    1f24:	be 2f       	mov	r27, r30
    1f26:	f8 5f       	subi	r31, 0xF8	; 248
    1f28:	d0 f3       	brcs	.-12     	; 0x1f1e <pow+0x42>
    1f2a:	10 c0       	rjmp	.+32     	; 0x1f4c <pow+0x70>
    1f2c:	ff 5f       	subi	r31, 0xFF	; 255
    1f2e:	70 f4       	brcc	.+28     	; 0x1f4c <pow+0x70>
    1f30:	a6 95       	lsr	r26
    1f32:	e0 f7       	brcc	.-8      	; 0x1f2c <pow+0x50>
    1f34:	f7 39       	cpi	r31, 0x97	; 151
    1f36:	50 f0       	brcs	.+20     	; 0x1f4c <pow+0x70>
    1f38:	19 f0       	breq	.+6      	; 0x1f40 <pow+0x64>
    1f3a:	ff 3a       	cpi	r31, 0xAF	; 175
    1f3c:	38 f4       	brcc	.+14     	; 0x1f4c <pow+0x70>
    1f3e:	9f 77       	andi	r25, 0x7F	; 127
    1f40:	9f 93       	push	r25
    1f42:	0d d0       	rcall	.+26     	; 0x1f5e <pow+0x82>
    1f44:	0f 90       	pop	r0
    1f46:	07 fc       	sbrc	r0, 7
    1f48:	90 58       	subi	r25, 0x80	; 128
    1f4a:	08 95       	ret
    1f4c:	46 f0       	brts	.+16     	; 0x1f5e <pow+0x82>
    1f4e:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__fp_nan>
    1f52:	60 e0       	ldi	r22, 0x00	; 0
    1f54:	70 e0       	ldi	r23, 0x00	; 0
    1f56:	80 e8       	ldi	r24, 0x80	; 128
    1f58:	9f e3       	ldi	r25, 0x3F	; 63
    1f5a:	08 95       	ret
    1f5c:	4f e7       	ldi	r20, 0x7F	; 127
    1f5e:	9f 77       	andi	r25, 0x7F	; 127
    1f60:	5f 93       	push	r21
    1f62:	4f 93       	push	r20
    1f64:	3f 93       	push	r19
    1f66:	2f 93       	push	r18
    1f68:	0e 94 6e 10 	call	0x20dc	; 0x20dc <log>
    1f6c:	2f 91       	pop	r18
    1f6e:	3f 91       	pop	r19
    1f70:	4f 91       	pop	r20
    1f72:	5f 91       	pop	r21
    1f74:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__mulsf3>
    1f78:	0c 94 cb 0f 	jmp	0x1f96	; 0x1f96 <exp>

00001f7c <__unordsf2>:
__unordsf2():
    1f7c:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__fp_cmp>
    1f80:	88 0b       	sbc	r24, r24
    1f82:	99 0b       	sbc	r25, r25
    1f84:	08 95       	ret
    1f86:	29 f4       	brne	.+10     	; 0x1f92 <__unordsf2+0x16>
    1f88:	16 f0       	brts	.+4      	; 0x1f8e <__unordsf2+0x12>
    1f8a:	0c 94 ab 0e 	jmp	0x1d56	; 0x1d56 <__fp_inf>
    1f8e:	0c 94 f5 0e 	jmp	0x1dea	; 0x1dea <__fp_zero>
    1f92:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__fp_nan>

00001f96 <exp>:
exp():
    1f96:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <__fp_splitA>
    1f9a:	a8 f3       	brcs	.-22     	; 0x1f86 <__unordsf2+0xa>
    1f9c:	96 38       	cpi	r25, 0x86	; 134
    1f9e:	a0 f7       	brcc	.-24     	; 0x1f88 <__unordsf2+0xc>
    1fa0:	07 f8       	bld	r0, 7
    1fa2:	0f 92       	push	r0
    1fa4:	e8 94       	clt
    1fa6:	2b e3       	ldi	r18, 0x3B	; 59
    1fa8:	3a ea       	ldi	r19, 0xAA	; 170
    1faa:	48 eb       	ldi	r20, 0xB8	; 184
    1fac:	5f e7       	ldi	r21, 0x7F	; 127
    1fae:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <__mulsf3_pse>
    1fb2:	0f 92       	push	r0
    1fb4:	0f 92       	push	r0
    1fb6:	0f 92       	push	r0
    1fb8:	4d b7       	in	r20, 0x3d	; 61
    1fba:	5e b7       	in	r21, 0x3e	; 62
    1fbc:	0f 92       	push	r0
    1fbe:	0e 94 b6 10 	call	0x216c	; 0x216c <modf>
    1fc2:	e4 e5       	ldi	r30, 0x54	; 84
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__fp_powser>
    1fca:	4f 91       	pop	r20
    1fcc:	5f 91       	pop	r21
    1fce:	ef 91       	pop	r30
    1fd0:	ff 91       	pop	r31
    1fd2:	e5 95       	asr	r30
    1fd4:	ee 1f       	adc	r30, r30
    1fd6:	ff 1f       	adc	r31, r31
    1fd8:	49 f0       	breq	.+18     	; 0x1fec <exp+0x56>
    1fda:	fe 57       	subi	r31, 0x7E	; 126
    1fdc:	e0 68       	ori	r30, 0x80	; 128
    1fde:	44 27       	eor	r20, r20
    1fe0:	ee 0f       	add	r30, r30
    1fe2:	44 1f       	adc	r20, r20
    1fe4:	fa 95       	dec	r31
    1fe6:	e1 f7       	brne	.-8      	; 0x1fe0 <exp+0x4a>
    1fe8:	41 95       	neg	r20
    1fea:	55 0b       	sbc	r21, r21
    1fec:	0e 94 30 10 	call	0x2060	; 0x2060 <ldexp>
    1ff0:	0f 90       	pop	r0
    1ff2:	07 fe       	sbrs	r0, 7
    1ff4:	0c 94 24 10 	jmp	0x2048	; 0x2048 <inverse>
    1ff8:	08 95       	ret

00001ffa <__fp_powser>:
    1ffa:	df 93       	push	r29
    1ffc:	cf 93       	push	r28
    1ffe:	1f 93       	push	r17
    2000:	0f 93       	push	r16
    2002:	ff 92       	push	r15
    2004:	ef 92       	push	r14
    2006:	df 92       	push	r13
    2008:	7b 01       	movw	r14, r22
__fp_powser():
    200a:	8c 01       	movw	r16, r24
    200c:	68 94       	set
    200e:	06 c0       	rjmp	.+12     	; 0x201c <__fp_powser+0x22>
    2010:	da 2e       	mov	r13, r26
    2012:	ef 01       	movw	r28, r30
    2014:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__mulsf3x>
    2018:	fe 01       	movw	r30, r28
    201a:	e8 94       	clt
    201c:	a5 91       	lpm	r26, Z+
    201e:	25 91       	lpm	r18, Z+
    2020:	35 91       	lpm	r19, Z+
    2022:	45 91       	lpm	r20, Z+
    2024:	55 91       	lpm	r21, Z+
    2026:	a6 f3       	brts	.-24     	; 0x2010 <__fp_powser+0x16>
    2028:	ef 01       	movw	r28, r30
    202a:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__addsf3x>
    202e:	fe 01       	movw	r30, r28
    2030:	97 01       	movw	r18, r14
    2032:	a8 01       	movw	r20, r16
    2034:	da 94       	dec	r13
    2036:	69 f7       	brne	.-38     	; 0x2012 <__fp_powser+0x18>
    2038:	df 90       	pop	r13
    203a:	ef 90       	pop	r14
    203c:	ff 90       	pop	r15
    203e:	0f 91       	pop	r16
    2040:	1f 91       	pop	r17
    2042:	cf 91       	pop	r28
    2044:	df 91       	pop	r29
    2046:	08 95       	ret

00002048 <inverse>:
inverse():
    2048:	9b 01       	movw	r18, r22
    204a:	ac 01       	movw	r20, r24
    204c:	60 e0       	ldi	r22, 0x00	; 0
    204e:	70 e0       	ldi	r23, 0x00	; 0
    2050:	80 e8       	ldi	r24, 0x80	; 128
    2052:	9f e3       	ldi	r25, 0x3F	; 63
    2054:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__divsf3>
    2058:	0c 94 ab 0e 	jmp	0x1d56	; 0x1d56 <__fp_inf>
    205c:	0c 94 ea 10 	jmp	0x21d4	; 0x21d4 <__fp_mpack>

00002060 <ldexp>:
ldexp():
    2060:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <__fp_splitA>
    2064:	d8 f3       	brcs	.-10     	; 0x205c <inverse+0x14>
    2066:	99 23       	and	r25, r25
    2068:	c9 f3       	breq	.-14     	; 0x205c <inverse+0x14>
    206a:	94 0f       	add	r25, r20
    206c:	51 1d       	adc	r21, r1
    206e:	a3 f3       	brvs	.-24     	; 0x2058 <inverse+0x10>
    2070:	91 50       	subi	r25, 0x01	; 1
    2072:	50 40       	sbci	r21, 0x00	; 0
    2074:	94 f0       	brlt	.+36     	; 0x209a <ldexp+0x3a>
    2076:	59 f0       	breq	.+22     	; 0x208e <ldexp+0x2e>
    2078:	88 23       	and	r24, r24
    207a:	32 f0       	brmi	.+12     	; 0x2088 <ldexp+0x28>
    207c:	66 0f       	add	r22, r22
    207e:	77 1f       	adc	r23, r23
    2080:	88 1f       	adc	r24, r24
    2082:	91 50       	subi	r25, 0x01	; 1
    2084:	50 40       	sbci	r21, 0x00	; 0
    2086:	c1 f7       	brne	.-16     	; 0x2078 <ldexp+0x18>
    2088:	9e 3f       	cpi	r25, 0xFE	; 254
    208a:	51 05       	cpc	r21, r1
    208c:	2c f7       	brge	.-54     	; 0x2058 <inverse+0x10>
    208e:	88 0f       	add	r24, r24
    2090:	91 1d       	adc	r25, r1
    2092:	96 95       	lsr	r25
    2094:	87 95       	ror	r24
    2096:	97 f9       	bld	r25, 7
    2098:	08 95       	ret
    209a:	5f 3f       	cpi	r21, 0xFF	; 255
    209c:	ac f0       	brlt	.+42     	; 0x20c8 <ldexp+0x68>
    209e:	98 3e       	cpi	r25, 0xE8	; 232
    20a0:	9c f0       	brlt	.+38     	; 0x20c8 <ldexp+0x68>
    20a2:	bb 27       	eor	r27, r27
    20a4:	86 95       	lsr	r24
    20a6:	77 95       	ror	r23
    20a8:	67 95       	ror	r22
    20aa:	b7 95       	ror	r27
    20ac:	08 f4       	brcc	.+2      	; 0x20b0 <ldexp+0x50>
    20ae:	b1 60       	ori	r27, 0x01	; 1
    20b0:	93 95       	inc	r25
    20b2:	c1 f7       	brne	.-16     	; 0x20a4 <ldexp+0x44>
    20b4:	bb 0f       	add	r27, r27
    20b6:	58 f7       	brcc	.-42     	; 0x208e <ldexp+0x2e>
    20b8:	11 f4       	brne	.+4      	; 0x20be <ldexp+0x5e>
    20ba:	60 ff       	sbrs	r22, 0
    20bc:	e8 cf       	rjmp	.-48     	; 0x208e <ldexp+0x2e>
    20be:	6f 5f       	subi	r22, 0xFF	; 255
    20c0:	7f 4f       	sbci	r23, 0xFF	; 255
    20c2:	8f 4f       	sbci	r24, 0xFF	; 255
    20c4:	9f 4f       	sbci	r25, 0xFF	; 255
    20c6:	e3 cf       	rjmp	.-58     	; 0x208e <ldexp+0x2e>
    20c8:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <__fp_szero>
    20cc:	16 f0       	brts	.+4      	; 0x20d2 <ldexp+0x72>
    20ce:	0c 94 ea 10 	jmp	0x21d4	; 0x21d4 <__fp_mpack>
    20d2:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__fp_nan>
    20d6:	68 94       	set
    20d8:	0c 94 ab 0e 	jmp	0x1d56	; 0x1d56 <__fp_inf>

000020dc <log>:
log():
    20dc:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <__fp_splitA>
    20e0:	a8 f3       	brcs	.-22     	; 0x20cc <ldexp+0x6c>
    20e2:	99 23       	and	r25, r25
    20e4:	c1 f3       	breq	.-16     	; 0x20d6 <ldexp+0x76>
    20e6:	ae f3       	brts	.-22     	; 0x20d2 <ldexp+0x72>
    20e8:	df 93       	push	r29
    20ea:	cf 93       	push	r28
    20ec:	1f 93       	push	r17
    20ee:	0f 93       	push	r16
    20f0:	ff 92       	push	r15
    20f2:	c9 2f       	mov	r28, r25
    20f4:	dd 27       	eor	r29, r29
    20f6:	88 23       	and	r24, r24
    20f8:	2a f0       	brmi	.+10     	; 0x2104 <log+0x28>
    20fa:	21 97       	sbiw	r28, 0x01	; 1
    20fc:	66 0f       	add	r22, r22
    20fe:	77 1f       	adc	r23, r23
    2100:	88 1f       	adc	r24, r24
    2102:	da f7       	brpl	.-10     	; 0x20fa <log+0x1e>
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e8       	ldi	r20, 0x80	; 128
    210a:	5f eb       	ldi	r21, 0xBF	; 191
    210c:	9f e3       	ldi	r25, 0x3F	; 63
    210e:	88 39       	cpi	r24, 0x98	; 152
    2110:	20 f0       	brcs	.+8      	; 0x211a <log+0x3e>
    2112:	80 3e       	cpi	r24, 0xE0	; 224
    2114:	38 f0       	brcs	.+14     	; 0x2124 <log+0x48>
    2116:	21 96       	adiw	r28, 0x01	; 1
    2118:	8f 77       	andi	r24, 0x7F	; 127
    211a:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__addsf3>
    211e:	ec e7       	ldi	r30, 0x7C	; 124
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	04 c0       	rjmp	.+8      	; 0x212c <log+0x50>
    2124:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__addsf3>
    2128:	e9 ea       	ldi	r30, 0xA9	; 169
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__fp_powser>
    2130:	8b 01       	movw	r16, r22
    2132:	be 01       	movw	r22, r28
    2134:	ec 01       	movw	r28, r24
    2136:	fb 2e       	mov	r15, r27
    2138:	6f 57       	subi	r22, 0x7F	; 127
    213a:	71 09       	sbc	r23, r1
    213c:	75 95       	asr	r23
    213e:	77 1f       	adc	r23, r23
    2140:	88 0b       	sbc	r24, r24
    2142:	99 0b       	sbc	r25, r25
    2144:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__floatsisf>
    2148:	28 e1       	ldi	r18, 0x18	; 24
    214a:	32 e7       	ldi	r19, 0x72	; 114
    214c:	41 e3       	ldi	r20, 0x31	; 49
    214e:	5f e3       	ldi	r21, 0x3F	; 63
    2150:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__mulsf3x>
    2154:	af 2d       	mov	r26, r15
    2156:	98 01       	movw	r18, r16
    2158:	ae 01       	movw	r20, r28
    215a:	ff 90       	pop	r15
    215c:	0f 91       	pop	r16
    215e:	1f 91       	pop	r17
    2160:	cf 91       	pop	r28
    2162:	df 91       	pop	r29
    2164:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__addsf3x>
    2168:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__fp_round>

0000216c <modf>:
    216c:	fa 01       	movw	r30, r20
    216e:	dc 01       	movw	r26, r24
    2170:	aa 0f       	add	r26, r26
    2172:	bb 1f       	adc	r27, r27
    2174:	9b 01       	movw	r18, r22
    2176:	ac 01       	movw	r20, r24
    2178:	bf 57       	subi	r27, 0x7F	; 127
    217a:	28 f4       	brcc	.+10     	; 0x2186 <modf+0x1a>
modf():
    217c:	22 27       	eor	r18, r18
    217e:	33 27       	eor	r19, r19
    2180:	44 27       	eor	r20, r20
    2182:	50 78       	andi	r21, 0x80	; 128
    2184:	20 c0       	rjmp	.+64     	; 0x21c6 <modf+0x5a>
    2186:	b7 51       	subi	r27, 0x17	; 23
    2188:	90 f4       	brcc	.+36     	; 0x21ae <modf+0x42>
    218a:	ab 2f       	mov	r26, r27
    218c:	00 24       	eor	r0, r0
    218e:	46 95       	lsr	r20
    2190:	37 95       	ror	r19
    2192:	27 95       	ror	r18
    2194:	01 1c       	adc	r0, r1
    2196:	a3 95       	inc	r26
    2198:	d2 f3       	brmi	.-12     	; 0x218e <modf+0x22>
    219a:	00 20       	and	r0, r0
    219c:	71 f0       	breq	.+28     	; 0x21ba <modf+0x4e>
    219e:	22 0f       	add	r18, r18
    21a0:	33 1f       	adc	r19, r19
    21a2:	44 1f       	adc	r20, r20
    21a4:	b3 95       	inc	r27
    21a6:	da f3       	brmi	.-10     	; 0x219e <modf+0x32>
    21a8:	0e d0       	rcall	.+28     	; 0x21c6 <modf+0x5a>
    21aa:	0c 94 30 0d 	jmp	0x1a60	; 0x1a60 <__subsf3>
    21ae:	61 30       	cpi	r22, 0x01	; 1
    21b0:	71 05       	cpc	r23, r1
    21b2:	a0 e8       	ldi	r26, 0x80	; 128
    21b4:	8a 07       	cpc	r24, r26
    21b6:	b9 46       	sbci	r27, 0x69	; 105
    21b8:	30 f4       	brcc	.+12     	; 0x21c6 <modf+0x5a>
    21ba:	9b 01       	movw	r18, r22
    21bc:	ac 01       	movw	r20, r24
    21be:	66 27       	eor	r22, r22
    21c0:	77 27       	eor	r23, r23
    21c2:	88 27       	eor	r24, r24
    21c4:	90 78       	andi	r25, 0x80	; 128
    21c6:	30 96       	adiw	r30, 0x00	; 0
    21c8:	21 f0       	breq	.+8      	; 0x21d2 <modf+0x66>
    21ca:	20 83       	st	Z, r18
    21cc:	31 83       	std	Z+1, r19	; 0x01
    21ce:	42 83       	std	Z+2, r20	; 0x02
    21d0:	53 83       	std	Z+3, r21	; 0x03
    21d2:	08 95       	ret

000021d4 <__fp_mpack>:
__fp_mpack():
    21d4:	9f 3f       	cpi	r25, 0xFF	; 255
    21d6:	31 f0       	breq	.+12     	; 0x21e4 <__fp_mpack_finite+0xc>

000021d8 <__fp_mpack_finite>:
    21d8:	91 50       	subi	r25, 0x01	; 1
    21da:	20 f4       	brcc	.+8      	; 0x21e4 <__fp_mpack_finite+0xc>
    21dc:	87 95       	ror	r24
    21de:	77 95       	ror	r23
    21e0:	67 95       	ror	r22
    21e2:	b7 95       	ror	r27
    21e4:	88 0f       	add	r24, r24
    21e6:	91 1d       	adc	r25, r1
    21e8:	96 95       	lsr	r25
    21ea:	87 95       	ror	r24
    21ec:	97 f9       	bld	r25, 7
    21ee:	08 95       	ret

000021f0 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    21f0:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    21f2:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    21f4:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    21f6:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    21f8:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    21fa:	0d c0       	rjmp	.+26     	; 0x2216 <__udivmodsi4_ep>

000021fc <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    21fc:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    21fe:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    2200:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    2202:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    2204:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    2206:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    2208:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    220a:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    220c:	20 f0       	brcs	.+8      	; 0x2216 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    220e:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    2210:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    2212:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    2214:	f5 0b       	sbc	r31, r21

00002216 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    2216:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    2218:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    221a:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    221c:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    221e:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    2220:	69 f7       	brne	.-38     	; 0x21fc <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    2222:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    2224:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    2226:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    2228:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    222a:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    222c:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    222e:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    2230:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    2232:	08 95       	ret

00002234 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    2234:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    2236:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    2238:	1e f4       	brtc	.+6      	; 0x2240 <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    223a:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    223c:	0e 94 31 11 	call	0x2262	; 0x2262 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    2240:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    2242:	07 d0       	rcall	.+14     	; 0x2252 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    2244:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    2248:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    224a:	03 d0       	rcall	.+6      	; 0x2252 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    224c:	4e f4       	brtc	.+18     	; 0x2260 <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    224e:	0c 94 31 11 	jmp	0x2262	; 0x2262 <__negsi2>

00002252 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    2252:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    2254:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    2256:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    2258:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    225a:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    225c:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    225e:	5f 4f       	sbci	r21, 0xFF	; 255

00002260 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    2260:	08 95       	ret

00002262 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    2262:	90 95       	com	r25
    2264:	80 95       	com	r24
    2266:	70 95       	com	r23
    2268:	61 95       	neg	r22
    226a:	7f 4f       	sbci	r23, 0xFF	; 255
    226c:	8f 4f       	sbci	r24, 0xFF	; 255
    226e:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    2270:	08 95       	ret

00002272 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    2272:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    2274:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    2276:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    2278:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    227a:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    227c:	09 94       	ijmp

0000227e <malloc>:
malloc():
    227e:	0f 93       	push	r16
    2280:	1f 93       	push	r17
    2282:	cf 93       	push	r28
    2284:	df 93       	push	r29
    2286:	82 30       	cpi	r24, 0x02	; 2
    2288:	91 05       	cpc	r25, r1
    228a:	10 f4       	brcc	.+4      	; 0x2290 <malloc+0x12>
    228c:	82 e0       	ldi	r24, 0x02	; 2
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	e0 91 97 02 	lds	r30, 0x0297	; 0x800297 <__flp>
    2294:	f0 91 98 02 	lds	r31, 0x0298	; 0x800298 <__flp+0x1>
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	a0 e0       	ldi	r26, 0x00	; 0
    22a0:	30 97       	sbiw	r30, 0x00	; 0
    22a2:	99 f4       	brne	.+38     	; 0x22ca <malloc+0x4c>
    22a4:	21 15       	cp	r18, r1
    22a6:	31 05       	cpc	r19, r1
    22a8:	09 f4       	brne	.+2      	; 0x22ac <malloc+0x2e>
    22aa:	4a c0       	rjmp	.+148    	; 0x2340 <malloc+0xc2>
    22ac:	28 1b       	sub	r18, r24
    22ae:	39 0b       	sbc	r19, r25
    22b0:	24 30       	cpi	r18, 0x04	; 4
    22b2:	31 05       	cpc	r19, r1
    22b4:	d8 f5       	brcc	.+118    	; 0x232c <malloc+0xae>
    22b6:	8a 81       	ldd	r24, Y+2	; 0x02
    22b8:	9b 81       	ldd	r25, Y+3	; 0x03
    22ba:	61 15       	cp	r22, r1
    22bc:	71 05       	cpc	r23, r1
    22be:	89 f1       	breq	.+98     	; 0x2322 <malloc+0xa4>
    22c0:	fb 01       	movw	r30, r22
    22c2:	93 83       	std	Z+3, r25	; 0x03
    22c4:	82 83       	std	Z+2, r24	; 0x02
    22c6:	fe 01       	movw	r30, r28
    22c8:	11 c0       	rjmp	.+34     	; 0x22ec <malloc+0x6e>
    22ca:	40 81       	ld	r20, Z
    22cc:	51 81       	ldd	r21, Z+1	; 0x01
    22ce:	02 81       	ldd	r16, Z+2	; 0x02
    22d0:	13 81       	ldd	r17, Z+3	; 0x03
    22d2:	48 17       	cp	r20, r24
    22d4:	59 07       	cpc	r21, r25
    22d6:	e0 f0       	brcs	.+56     	; 0x2310 <malloc+0x92>
    22d8:	48 17       	cp	r20, r24
    22da:	59 07       	cpc	r21, r25
    22dc:	99 f4       	brne	.+38     	; 0x2304 <malloc+0x86>
    22de:	10 97       	sbiw	r26, 0x00	; 0
    22e0:	61 f0       	breq	.+24     	; 0x22fa <malloc+0x7c>
    22e2:	12 96       	adiw	r26, 0x02	; 2
    22e4:	0c 93       	st	X, r16
    22e6:	12 97       	sbiw	r26, 0x02	; 2
    22e8:	13 96       	adiw	r26, 0x03	; 3
    22ea:	1c 93       	st	X, r17
    22ec:	32 96       	adiw	r30, 0x02	; 2
    22ee:	cf 01       	movw	r24, r30
    22f0:	df 91       	pop	r29
    22f2:	cf 91       	pop	r28
    22f4:	1f 91       	pop	r17
    22f6:	0f 91       	pop	r16
    22f8:	08 95       	ret
    22fa:	00 93 97 02 	sts	0x0297, r16	; 0x800297 <__flp>
    22fe:	10 93 98 02 	sts	0x0298, r17	; 0x800298 <__flp+0x1>
    2302:	f4 cf       	rjmp	.-24     	; 0x22ec <malloc+0x6e>
    2304:	21 15       	cp	r18, r1
    2306:	31 05       	cpc	r19, r1
    2308:	51 f0       	breq	.+20     	; 0x231e <malloc+0xa0>
    230a:	42 17       	cp	r20, r18
    230c:	53 07       	cpc	r21, r19
    230e:	38 f0       	brcs	.+14     	; 0x231e <malloc+0xa0>
    2310:	a9 01       	movw	r20, r18
    2312:	db 01       	movw	r26, r22
    2314:	9a 01       	movw	r18, r20
    2316:	bd 01       	movw	r22, r26
    2318:	df 01       	movw	r26, r30
    231a:	f8 01       	movw	r30, r16
    231c:	c1 cf       	rjmp	.-126    	; 0x22a0 <malloc+0x22>
    231e:	ef 01       	movw	r28, r30
    2320:	f9 cf       	rjmp	.-14     	; 0x2314 <malloc+0x96>
    2322:	90 93 98 02 	sts	0x0298, r25	; 0x800298 <__flp+0x1>
    2326:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <__flp>
    232a:	cd cf       	rjmp	.-102    	; 0x22c6 <malloc+0x48>
    232c:	fe 01       	movw	r30, r28
    232e:	e2 0f       	add	r30, r18
    2330:	f3 1f       	adc	r31, r19
    2332:	81 93       	st	Z+, r24
    2334:	91 93       	st	Z+, r25
    2336:	22 50       	subi	r18, 0x02	; 2
    2338:	31 09       	sbc	r19, r1
    233a:	39 83       	std	Y+1, r19	; 0x01
    233c:	28 83       	st	Y, r18
    233e:	d7 cf       	rjmp	.-82     	; 0x22ee <malloc+0x70>
    2340:	20 91 95 02 	lds	r18, 0x0295	; 0x800295 <__brkval>
    2344:	30 91 96 02 	lds	r19, 0x0296	; 0x800296 <__brkval+0x1>
    2348:	23 2b       	or	r18, r19
    234a:	41 f4       	brne	.+16     	; 0x235c <malloc+0xde>
    234c:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <__malloc_heap_start>
    2350:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <__malloc_heap_start+0x1>
    2354:	30 93 96 02 	sts	0x0296, r19	; 0x800296 <__brkval+0x1>
    2358:	20 93 95 02 	sts	0x0295, r18	; 0x800295 <__brkval>
    235c:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__malloc_heap_end>
    2360:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <__malloc_heap_end+0x1>
    2364:	21 15       	cp	r18, r1
    2366:	31 05       	cpc	r19, r1
    2368:	41 f4       	brne	.+16     	; 0x237a <malloc+0xfc>
    236a:	2d b7       	in	r18, 0x3d	; 61
    236c:	3e b7       	in	r19, 0x3e	; 62
    236e:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <__malloc_margin>
    2372:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <__malloc_margin+0x1>
    2376:	24 1b       	sub	r18, r20
    2378:	35 0b       	sbc	r19, r21
    237a:	e0 91 95 02 	lds	r30, 0x0295	; 0x800295 <__brkval>
    237e:	f0 91 96 02 	lds	r31, 0x0296	; 0x800296 <__brkval+0x1>
    2382:	e2 17       	cp	r30, r18
    2384:	f3 07       	cpc	r31, r19
    2386:	a0 f4       	brcc	.+40     	; 0x23b0 <malloc+0x132>
    2388:	2e 1b       	sub	r18, r30
    238a:	3f 0b       	sbc	r19, r31
    238c:	28 17       	cp	r18, r24
    238e:	39 07       	cpc	r19, r25
    2390:	78 f0       	brcs	.+30     	; 0x23b0 <malloc+0x132>
    2392:	ac 01       	movw	r20, r24
    2394:	4e 5f       	subi	r20, 0xFE	; 254
    2396:	5f 4f       	sbci	r21, 0xFF	; 255
    2398:	24 17       	cp	r18, r20
    239a:	35 07       	cpc	r19, r21
    239c:	48 f0       	brcs	.+18     	; 0x23b0 <malloc+0x132>
    239e:	4e 0f       	add	r20, r30
    23a0:	5f 1f       	adc	r21, r31
    23a2:	50 93 96 02 	sts	0x0296, r21	; 0x800296 <__brkval+0x1>
    23a6:	40 93 95 02 	sts	0x0295, r20	; 0x800295 <__brkval>
    23aa:	81 93       	st	Z+, r24
    23ac:	91 93       	st	Z+, r25
    23ae:	9f cf       	rjmp	.-194    	; 0x22ee <malloc+0x70>
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	e0 e0       	ldi	r30, 0x00	; 0
    23b4:	9c cf       	rjmp	.-200    	; 0x22ee <malloc+0x70>

000023b6 <free>:
free():
    23b6:	cf 93       	push	r28
    23b8:	df 93       	push	r29
    23ba:	00 97       	sbiw	r24, 0x00	; 0
    23bc:	e9 f0       	breq	.+58     	; 0x23f8 <free+0x42>
    23be:	fc 01       	movw	r30, r24
    23c0:	32 97       	sbiw	r30, 0x02	; 2
    23c2:	13 82       	std	Z+3, r1	; 0x03
    23c4:	12 82       	std	Z+2, r1	; 0x02
    23c6:	a0 91 97 02 	lds	r26, 0x0297	; 0x800297 <__flp>
    23ca:	b0 91 98 02 	lds	r27, 0x0298	; 0x800298 <__flp+0x1>
    23ce:	ed 01       	movw	r28, r26
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	10 97       	sbiw	r26, 0x00	; 0
    23d6:	a1 f4       	brne	.+40     	; 0x2400 <free+0x4a>
    23d8:	20 81       	ld	r18, Z
    23da:	31 81       	ldd	r19, Z+1	; 0x01
    23dc:	82 0f       	add	r24, r18
    23de:	93 1f       	adc	r25, r19
    23e0:	20 91 95 02 	lds	r18, 0x0295	; 0x800295 <__brkval>
    23e4:	30 91 96 02 	lds	r19, 0x0296	; 0x800296 <__brkval+0x1>
    23e8:	28 17       	cp	r18, r24
    23ea:	39 07       	cpc	r19, r25
    23ec:	09 f0       	breq	.+2      	; 0x23f0 <free+0x3a>
    23ee:	61 c0       	rjmp	.+194    	; 0x24b2 <free+0xfc>
    23f0:	f0 93 96 02 	sts	0x0296, r31	; 0x800296 <__brkval+0x1>
    23f4:	e0 93 95 02 	sts	0x0295, r30	; 0x800295 <__brkval>
    23f8:	df 91       	pop	r29
    23fa:	cf 91       	pop	r28
    23fc:	08 95       	ret
    23fe:	ea 01       	movw	r28, r20
    2400:	ce 17       	cp	r28, r30
    2402:	df 07       	cpc	r29, r31
    2404:	e8 f5       	brcc	.+122    	; 0x2480 <free+0xca>
    2406:	4a 81       	ldd	r20, Y+2	; 0x02
    2408:	5b 81       	ldd	r21, Y+3	; 0x03
    240a:	9e 01       	movw	r18, r28
    240c:	41 15       	cp	r20, r1
    240e:	51 05       	cpc	r21, r1
    2410:	b1 f7       	brne	.-20     	; 0x23fe <free+0x48>
    2412:	e9 01       	movw	r28, r18
    2414:	fb 83       	std	Y+3, r31	; 0x03
    2416:	ea 83       	std	Y+2, r30	; 0x02
    2418:	49 91       	ld	r20, Y+
    241a:	59 91       	ld	r21, Y+
    241c:	c4 0f       	add	r28, r20
    241e:	d5 1f       	adc	r29, r21
    2420:	ec 17       	cp	r30, r28
    2422:	fd 07       	cpc	r31, r29
    2424:	61 f4       	brne	.+24     	; 0x243e <free+0x88>
    2426:	80 81       	ld	r24, Z
    2428:	91 81       	ldd	r25, Z+1	; 0x01
    242a:	02 96       	adiw	r24, 0x02	; 2
    242c:	84 0f       	add	r24, r20
    242e:	95 1f       	adc	r25, r21
    2430:	e9 01       	movw	r28, r18
    2432:	99 83       	std	Y+1, r25	; 0x01
    2434:	88 83       	st	Y, r24
    2436:	82 81       	ldd	r24, Z+2	; 0x02
    2438:	93 81       	ldd	r25, Z+3	; 0x03
    243a:	9b 83       	std	Y+3, r25	; 0x03
    243c:	8a 83       	std	Y+2, r24	; 0x02
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	e0 e0       	ldi	r30, 0x00	; 0
    2442:	12 96       	adiw	r26, 0x02	; 2
    2444:	8d 91       	ld	r24, X+
    2446:	9c 91       	ld	r25, X
    2448:	13 97       	sbiw	r26, 0x03	; 3
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	b9 f5       	brne	.+110    	; 0x24bc <free+0x106>
    244e:	2d 91       	ld	r18, X+
    2450:	3c 91       	ld	r19, X
    2452:	11 97       	sbiw	r26, 0x01	; 1
    2454:	cd 01       	movw	r24, r26
    2456:	02 96       	adiw	r24, 0x02	; 2
    2458:	82 0f       	add	r24, r18
    245a:	93 1f       	adc	r25, r19
    245c:	20 91 95 02 	lds	r18, 0x0295	; 0x800295 <__brkval>
    2460:	30 91 96 02 	lds	r19, 0x0296	; 0x800296 <__brkval+0x1>
    2464:	28 17       	cp	r18, r24
    2466:	39 07       	cpc	r19, r25
    2468:	39 f6       	brne	.-114    	; 0x23f8 <free+0x42>
    246a:	30 97       	sbiw	r30, 0x00	; 0
    246c:	51 f5       	brne	.+84     	; 0x24c2 <free+0x10c>
    246e:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <__flp+0x1>
    2472:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <__flp>
    2476:	b0 93 96 02 	sts	0x0296, r27	; 0x800296 <__brkval+0x1>
    247a:	a0 93 95 02 	sts	0x0295, r26	; 0x800295 <__brkval>
    247e:	bc cf       	rjmp	.-136    	; 0x23f8 <free+0x42>
    2480:	d3 83       	std	Z+3, r29	; 0x03
    2482:	c2 83       	std	Z+2, r28	; 0x02
    2484:	40 81       	ld	r20, Z
    2486:	51 81       	ldd	r21, Z+1	; 0x01
    2488:	84 0f       	add	r24, r20
    248a:	95 1f       	adc	r25, r21
    248c:	c8 17       	cp	r28, r24
    248e:	d9 07       	cpc	r29, r25
    2490:	61 f4       	brne	.+24     	; 0x24aa <free+0xf4>
    2492:	4e 5f       	subi	r20, 0xFE	; 254
    2494:	5f 4f       	sbci	r21, 0xFF	; 255
    2496:	88 81       	ld	r24, Y
    2498:	99 81       	ldd	r25, Y+1	; 0x01
    249a:	48 0f       	add	r20, r24
    249c:	59 1f       	adc	r21, r25
    249e:	51 83       	std	Z+1, r21	; 0x01
    24a0:	40 83       	st	Z, r20
    24a2:	8a 81       	ldd	r24, Y+2	; 0x02
    24a4:	9b 81       	ldd	r25, Y+3	; 0x03
    24a6:	93 83       	std	Z+3, r25	; 0x03
    24a8:	82 83       	std	Z+2, r24	; 0x02
    24aa:	21 15       	cp	r18, r1
    24ac:	31 05       	cpc	r19, r1
    24ae:	09 f0       	breq	.+2      	; 0x24b2 <free+0xfc>
    24b0:	b0 cf       	rjmp	.-160    	; 0x2412 <free+0x5c>
    24b2:	f0 93 98 02 	sts	0x0298, r31	; 0x800298 <__flp+0x1>
    24b6:	e0 93 97 02 	sts	0x0297, r30	; 0x800297 <__flp>
    24ba:	9e cf       	rjmp	.-196    	; 0x23f8 <free+0x42>
    24bc:	fd 01       	movw	r30, r26
    24be:	dc 01       	movw	r26, r24
    24c0:	c0 cf       	rjmp	.-128    	; 0x2442 <free+0x8c>
    24c2:	13 82       	std	Z+3, r1	; 0x03
    24c4:	12 82       	std	Z+2, r1	; 0x02
    24c6:	d7 cf       	rjmp	.-82     	; 0x2476 <free+0xc0>

000024c8 <snprintf>:
snprintf():
    24c8:	ae e0       	ldi	r26, 0x0E	; 14
    24ca:	b0 e0       	ldi	r27, 0x00	; 0
    24cc:	ea e6       	ldi	r30, 0x6A	; 106
    24ce:	f2 e1       	ldi	r31, 0x12	; 18
    24d0:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <__prologue_saves__+0x1c>
    24d4:	0d 89       	ldd	r16, Y+21	; 0x15
    24d6:	1e 89       	ldd	r17, Y+22	; 0x16
    24d8:	8f 89       	ldd	r24, Y+23	; 0x17
    24da:	98 8d       	ldd	r25, Y+24	; 0x18
    24dc:	26 e0       	ldi	r18, 0x06	; 6
    24de:	2c 83       	std	Y+4, r18	; 0x04
    24e0:	1a 83       	std	Y+2, r17	; 0x02
    24e2:	09 83       	std	Y+1, r16	; 0x01
    24e4:	97 ff       	sbrs	r25, 7
    24e6:	02 c0       	rjmp	.+4      	; 0x24ec <snprintf+0x24>
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	90 e8       	ldi	r25, 0x80	; 128
    24ec:	01 97       	sbiw	r24, 0x01	; 1
    24ee:	9e 83       	std	Y+6, r25	; 0x06
    24f0:	8d 83       	std	Y+5, r24	; 0x05
    24f2:	ae 01       	movw	r20, r28
    24f4:	45 5e       	subi	r20, 0xE5	; 229
    24f6:	5f 4f       	sbci	r21, 0xFF	; 255
    24f8:	69 8d       	ldd	r22, Y+25	; 0x19
    24fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24fc:	ce 01       	movw	r24, r28
    24fe:	01 96       	adiw	r24, 0x01	; 1
    2500:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <vfprintf>
    2504:	4d 81       	ldd	r20, Y+5	; 0x05
    2506:	5e 81       	ldd	r21, Y+6	; 0x06
    2508:	57 fd       	sbrc	r21, 7
    250a:	0a c0       	rjmp	.+20     	; 0x2520 <snprintf+0x58>
    250c:	2f 81       	ldd	r18, Y+7	; 0x07
    250e:	38 85       	ldd	r19, Y+8	; 0x08
    2510:	42 17       	cp	r20, r18
    2512:	53 07       	cpc	r21, r19
    2514:	0c f4       	brge	.+2      	; 0x2518 <snprintf+0x50>
    2516:	9a 01       	movw	r18, r20
    2518:	02 0f       	add	r16, r18
    251a:	13 1f       	adc	r17, r19
    251c:	f8 01       	movw	r30, r16
    251e:	10 82       	st	Z, r1
    2520:	2e 96       	adiw	r28, 0x0e	; 14
    2522:	e4 e0       	ldi	r30, 0x04	; 4
    2524:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <__epilogue_restores__+0x1c>

00002528 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    2528:	f8 94       	cli

0000252a <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    252a:	ff cf       	rjmp	.-2      	; 0x252a <__stop_program>
